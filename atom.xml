<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Du.Jiang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.amorou.cn/"/>
  <updated>2019-08-11T01:55:37.981Z</updated>
  <id>https://www.amorou.cn/</id>
  
  <author>
    <name>Du.Jiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zookeeper + ZKUI 搭建分布式配置中心</title>
    <link href="https://www.amorou.cn/2017-07-15/Zookeeper%20+%20ZKUI%20%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html"/>
    <id>https://www.amorou.cn/2017-07-15/Zookeeper + ZKUI 搭建分布式配置中心.html</id>
    <published>2017-07-15T08:32:14.000Z</published>
    <updated>2019-08-11T01:55:37.981Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>当在一个集群规模的环境中，多台同类型的应用使用同样的配置文件，为了避免登陆每台机器修改配置，为了减少人为的修改导致配置不一致，为了实现配置文件的统一管理、版本控制，那么就有必要实现一个配置管理中心的应用。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>jdk环境</p></li><li><p>maven环境</p></li></ul><h2 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.apache.org/dyn/closer.cgi/zookeeper/" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi/zookeeper/</a></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf zookeeper-3.4.13.tar.gz</span><br></pre></td></tr></table></figure><h3 id="新增配置文件"><a href="#新增配置文件" class="headerlink" title="新增配置文件"></a>新增配置文件</h3><p>复制<code>/zookeeper/conf/zoo_sample.cfg</code>文件为<code>zoo.cfg</code></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line"># 数据文件夹</span><br><span class="line">dataDir=/usr/local/services/zookeeper/data</span><br><span class="line"># 日志文件夹</span><br><span class="line">dataLogDir=/usr/local/services/zookeeper/logs</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure><h2 id="Zookeeper启动"><a href="#Zookeeper启动" class="headerlink" title="Zookeeper启动"></a>Zookeeper启动</h2><p>启动之前若没有设置Jdk环境变量，则需要先修改<code>zkServer.sh</code>文件，在文件开头添加如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java <span class="comment"># jdk安装目录</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h3 id="手动启动"><a href="#手动启动" class="headerlink" title="手动启动"></a>手动启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">/usr/local/services/zkServer.sh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">/usr/local/services/zkServer.sh stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">/usr/local/services/zkServer.sh restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">/usr/local/services/zkServer.sh status</span><br></pre></td></tr></table></figure><h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><p>新增环境变量，修改<code>/etc/profile</code>文件，在其尾部追加如下内容：</p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Zookeeper Home</span><br><span class="line">export ZOOKEEPER_HOME=/usr/local/services/zookeeper</span><br><span class="line">export PATH=$ZOOKEEPER_HOME/bin:$PATH</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>新增环境变量后启动、停止、重启等操作就不需要指定可执行文件的路径，可在任意位置直接使用即可，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">zkServer.sh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">zkServer.sh stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">zkServer.sh restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><p>在<code>/etc/systemd/system</code>目录下创建新建<code>zookeeper.service</code>文件，写入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=zookeeper.service</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">Environment=/usr/local/services/zookeeper/bin</span><br><span class="line">ExecStart=/usr/local/services/zookeeper/bin/zkServer.sh start</span><br><span class="line">ExecStop=/usr/local/services/zookeeper/bin/zkServer.sh stop</span><br><span class="line">ExecReload=/usr/local/services/zookeeper/bin/zkServer.sh restart</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>完成后执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重新加载服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机自启动</span></span><br><span class="line">systemctl enable zookeeper.service</span><br></pre></td></tr></table></figure><p>其他操作命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重新加载配置信息</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动zookeeper</span></span><br><span class="line">systemctl start zookeeper.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关掉zookeeper</span></span><br><span class="line">systemctl stop zookeeper.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看进程状态及日志</span></span><br><span class="line">systemctl status zookeeper.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机自启动</span></span><br><span class="line">systemctl enable zookeeper.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭自启动</span></span><br><span class="line">systemctl disable zookeeper.service</span><br></pre></td></tr></table></figure><h2 id="Zookeeper连接"><a href="#Zookeeper连接" class="headerlink" title="Zookeeper连接"></a>Zookeeper连接</h2><p><code>Zookeeper</code>服务启动后，使用自带的客服端连接工具进行连接测试，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure><p><img src="/2017-07-15/Zookeeper + ZKUI 搭建分布式配置中心.htm/1565085249495.png" alt="1565085249495"></p><p>查看目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure><p><img src="/2017-07-15/Zookeeper + ZKUI 搭建分布式配置中心.htm/1565085237446.png" alt="1565085237446"></p><p>出现上面的结果则证明连接成功。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如需在其他服务器上访问<code>Zookeeper</code>，需要开放对应的端口。</p><h2 id="Zkui安装"><a href="#Zkui安装" class="headerlink" title="Zkui安装"></a>Zkui安装</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/DeemOpen/zkui" target="_blank" rel="noopener">https://github.com/DeemOpen/zkui</a></p><h3 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">unzip zkui-master.zip</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd zkui-master</span><br><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>上面的解压，编译操作由于需要<code>maven</code>环境支持，所以服务器需要安装配置<code>maven</code>环境，在编译的过程中还要下载大量依赖<code>jar</code>包，如果服务器网络不好，会导致此过程很慢，所以我们可以在自己的开发环境进行编译的操作，完成后将源码根目录下的<code>config.cfg</code>和编译后的<code>/target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</code>可执行<code>jar</code>文件上传至服务器即可。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/services/zkui</span><br><span class="line">cp config.cfg target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar /usr/<span class="built_in">local</span>/services/zkui</span><br></pre></td></tr></table></figure><h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 服务端口</span><br><span class="line">serverPort=9090</span><br><span class="line"># zookeeper服务地址，如果是zookeeper集群则以逗号分割</span><br><span class="line">zkServer=192.168.255.1:2181,192.168.255.2:2181,192.168.255.3:2181</span><br><span class="line"># 管理界面登录帐号</span><br><span class="line">userSet = &#123;&quot;users&quot;: [&#123; &quot;username&quot;:&quot;admin&quot; , &quot;password&quot;:&quot;admin&quot;,&quot;role&quot;: &quot;ADMIN&quot; &#125;,&#123; &quot;username&quot;:&quot;appconfig&quot; , &quot;appconfig&quot;:&quot;&quot;,&quot;role&quot;: &quot;USER&quot; &#125;]&#125;</span><br></pre></td></tr></table></figure><h2 id="Zkui启动"><a href="#Zkui启动" class="headerlink" title="Zkui启动"></a>Zkui启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/services/zkui &amp;&amp; nohup java -jar zkui-2.0-SNAPSHOT-jar-with-dependencies.jar &amp;</span><br></pre></td></tr></table></figure><h2 id="Zkui连接"><a href="#Zkui连接" class="headerlink" title="Zkui连接"></a>Zkui连接</h2><ul><li>浏览器打开<code>http://ip:port</code></li><li>用配置文件中的账号密码登陆</li></ul><p><img src="/2017-07-15/Zookeeper + ZKUI 搭建分布式配置中心.htm/1565085219704.png" alt="1565085219704"></p><p><img src="/2017-07-15/Zookeeper + ZKUI 搭建分布式配置中心.htm/1565085206278.png" alt="1565085206278"></p><h2 id="Zkui启用HTTPS"><a href="#Zkui启用HTTPS" class="headerlink" title="Zkui启用HTTPS"></a>Zkui启用HTTPS</h2><h3 id="生成keystore文件"><a href="#生成keystore文件" class="headerlink" title="生成keystore文件"></a>生成<code>keystore</code>文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入zukui目录</span></span><br><span class="line">cd /usr/local/services</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成私钥，有效期为3650天</span></span><br><span class="line">keytool -genkey -v -alias jetty -keyalg RSA -storetype PKCS12 -validity 3650 -keystore ./keystore.jks</span><br></pre></td></tr></table></figure><p><img src="/2017-07-15/Zookeeper + ZKUI 搭建分布式配置中心.htm/1565085190270.png" alt="1565085190270"></p><h3 id="修改config-cfg文件"><a href="#修改config-cfg文件" class="headerlink" title="修改config.cfg文件"></a>修改<code>config.cfg</code>文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https=true</span><br><span class="line">keystoreFile=/usr/local/services/zkui/keystore.jks</span><br><span class="line"># 生成私钥的口令</span><br><span class="line">keystorePwd=zkuiadmin</span><br><span class="line">keystoreManagerPwd=zkuiadmin</span><br></pre></td></tr></table></figure><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><p><img src="/2017-07-15/Zookeeper + ZKUI 搭建分布式配置中心.htm/1565085162921.png" alt="1565085162921"></p><h2 id="Zookeeper配置中心"><a href="#Zookeeper配置中心" class="headerlink" title="Zookeeper配置中心"></a>Zookeeper配置中心</h2><h3 id="Zkui导入配置"><a href="#Zkui导入配置" class="headerlink" title="Zkui导入配置"></a>Zkui导入配置</h3><p>配置文件为<code>txt</code>文本，使用<code>Zkui</code>导入到<code>Zookeeper</code>中，配置文件具体示例内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># datasource</span><br><span class="line">/config/demo,dev=spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test</span><br><span class="line">/config/demo,dev=spring.datasource.username=root</span><br><span class="line">/config/demo,dev=spring.datasource.password=root</span><br><span class="line">/config/demo,dev=spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line"># redis</span><br><span class="line">/config/demo,dev=spring.redis.host=127.0.0.1</span><br><span class="line">/config/demo,dev=spring.redis.port=6379</span><br><span class="line">/config/demo,dev=spring.redis.password=admin</span><br><span class="line"></span><br><span class="line"># 其他配置</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>配置命名规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&#123;node&#125;/&#123;application-name&#125;,&#123;profile&#125;=&#123;key&#125;=&#123;value&#125;</span><br></pre></td></tr></table></figure><p>其中<code>{application-name}</code>与<code>{profile}</code>之间用逗号分隔，也可以定义其他分隔符号，在项目的<code>bootstrap</code>文件中根据<code>spring.cloud.zookeeper.config.profileSeparator</code>指定。<code>application</code>文件要指定<code>profile</code>，它的值要和<code>ZooKeeper</code>配置中的<code>{profile}</code>一致。</p><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>以<code>SpringBoot</code>项目为基础，新增<code>zookeeper</code>配置中心支持依赖，修改<code>pom.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建<code>/src/main/resources/bootstrap.properties</code>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br><span class="line"></span><br><span class="line">spring.application.name=spring-cloud-zookeeper-client-test</span><br><span class="line"></span><br><span class="line">spring.cloud.zookeeper.connect-string=192.168.255.1:2181,192.168.255.2:2181,192.168.255.3:2181</span><br><span class="line">spring.cloud.zookeeper.config.enabled=true</span><br><span class="line">spring.cloud.zookeeper.config.root=/config</span><br><span class="line">spring.cloud.zookeeper.config.profileSeparator=,</span><br></pre></td></tr></table></figure><h2 id="ZooKeeper服务器配置"><a href="#ZooKeeper服务器配置" class="headerlink" title="ZooKeeper服务器配置"></a>ZooKeeper服务器配置</h2><p>除了zoo.cfg配置文件配置以外，也可也使用Java的zookeeper.propertyName名配置。当然那样不太方便了。</p><h3 id="最小化配置"><a href="#最小化配置" class="headerlink" title="最小化配置"></a>最小化配置</h3><ul><li><code>clientPort</code>: 客户端端口</li><li><code>dataDir</code>: ZooKeeper的数据目录</li><li><code>tickTime</code>: 相当于心跳时间，ZooKeeper的最小时间单位。</li></ul><h3 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h3><ul><li><code>dataLogDir</code>: ZooKeeper的事务日志存储的位置。默认和快照数据存储在同一个位置。建议尽量将两者分开。最好给事务日志一个单独的高性能磁盘，记录日志对磁盘性能要求非常高。</li><li><code>snapCount</code>: 仅支持Java系统属性配置,<code>zookeeper.snapCount</code>，两次快照之间的事务操作次数。默认值是10000</li><li><code>preAllocSize</code>: 默认是64MB。仅支持Java系统属性配置<code>zookeeper.preAllocSize</code>，如果频繁的进行快照，那么事务日志可能增长不到64MB，我们可以调整这个参数来优化存储</li><li><code>traceFile</code>：仅支持Java系统属性配置，<code>requestTraceFile</code>，开启日志调试。这个仅在开发环境下使用。traceFile文件名一般为traceFile.year.month.day。</li><li><code>fsync.warningthresholdms</code>： 单位为微秒，仅支持Java系统属性配置<code>fsync.warningthresholdms</code>，一旦进行一个fsync的操作大于此参数指定的时间，就在日志中打印报警信息。</li><li><code>autopurge.snapRetainCount</code>: 默认值为3，自动清理历史事务日志和快照数据的参数。清理日志后还剩余多少快照和事务日志文件。</li><li><code>autopurge.purgeInterval</code>: 默认值为0，单位是小时，不支持系统属性。与<code>autopurge.snapRetainCount</code>配套使用。如果值为0或者负数，代表不开启定时清理功能。</li><li><code>syncEnabled</code>: 3.4.6 版本中新引入的属性，使用Java系统属性配置，<code>zookeeper. observer.syncEnabled</code>，允许观察者记录事务日志和写入快照数据。 观察者不参与投票，但是可以提交方案。开启这个选项之后，减少观察者重启的时间。默认为true。</li></ul><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><ul><li><code>globalOutstandingLimit</code>: 默认值为1000，仅支持Java系统属性配置<code>zookeeper.globalOutstandingLimit</code>，配置ZooKeeper服务器最大请求的堆积数量，也就是服务器同时处理的请求数。</li><li><code>maxClientCnxns</code>： 默认值为60，不支持Java系统属性配置，单个客户端和单台服务器之间的并发连接数。如果设置为0，代表不限制。3.4.0之前这个参数都是10，3.4.0版本以后开始变成了60.</li><li><code>clientPortAddress</code>：不支持Java系统属性配置，监听客户端连接的地址和端口，如果有多个网卡，可以指定不同的监听端口。</li><li><code>minSessionTimeout</code>: 最小的超时时长限制，为tickTime的整数倍。默认为2</li><li><code>maxSessionTimeout</code>：最大超时时长。 默认为20</li></ul><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><ul><li><code>electionAlg</code>：不支持Java系统属性，用于选举实现，默认值是3，其它的0，1，2都是要弃用的。</li><li><code>initLimit</code>：没有Java系统属性，时间数量，单位是ticks，默认值为10. 该参数为Leader服务器等待Follwer服务器启动，并完成数据同步的时间，Leader允许Follower在这个时间内完成工作。如果集群数量过于庞大，可以适当增加这个参数。</li><li><code>syncLimit</code>：不支持Java系统属性配置，默认值为5。Leader服务器和Follwer服务器进行心跳检测的最大延时时间。如果再这个心跳时间内无法收到Follower的心跳信息，那么Leader就认为该Follower已经脱离了和自己的同步。</li><li><code>leaderServes</code>：仅支持Java系统属性配置，<code>zookeeper.leaderServes</code>默认值为yes，只能配置伪yes或no。设置Leader服务器是否支持客户端的连接，若设置为no，那么leader服务器只专注于进行分布式协调。</li><li><code>cnxTimeout</code>：默认值为5000，单位为毫秒。仅支持系统属性配置<code>zookeeper.cnxTimeout</code>，用于在Leader选举的时候，各服务器之间进行TCP创建连接的超时时间。</li><li><code>server.x=[hostname]:port1[:port2]</code> : 不支持Java配置。用于配置组成ZooKeeper集群的机器列表。其中x为Server ID，与每台服务器myid文件中的数字相对应。第一个端口指定Follower与Leader进行通信和数据同步的端口。第二个端口用于选举过程中的投票通信。</li></ul><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><ul><li>周期性的清理事务日志文件和快照文件。 可以设置<code>autopurge</code>选项</li><li>ZooKeeper使用Log4j来记录日志，可以使用Log4j的自动滚动日志特性</li><li>客户端连接ZooKeeper服务器列表的时候，最好对应ZooKeeper服务器的列表，否则可能会有砌块的事情发生。</li><li>ZooKeeper服务器集群中的服务器列表保持一致</li><li>事务日志文件最好存在在单独的磁盘上，这样可以更好的发挥ZooKeeper的性能</li></ul><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><p>SpringCloud-Zookeeper：<a href="https://github.com/amorous/SpringCloud-Zookeeper" target="_blank" rel="noopener">https://github.com/amorous/SpringCloud-Zookeeper</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="Zookeeper" scheme="https://www.amorou.cn/categories/Zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="https://www.amorou.cn/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>第一章 分布式开发与SpringCloud简介</title>
    <link href="https://www.amorou.cn/2017-04-15/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E4%B8%8ESpringCloud%E7%AE%80%E4%BB%8B.html"/>
    <id>https://www.amorou.cn/2017-04-15/第一章 分布式开发与SpringCloud简介.html</id>
    <published>2017-04-15T08:21:55.000Z</published>
    <updated>2019-08-11T00:53:48.675Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="第一章-分布式开发与SpringCloud简介"><a href="#第一章-分布式开发与SpringCloud简介" class="headerlink" title="第一章 分布式开发与SpringCloud简介"></a>第一章 分布式开发与SpringCloud简介</h1><h2 id="一、分布式开发简介"><a href="#一、分布式开发简介" class="headerlink" title="一、分布式开发简介"></a>一、分布式开发简介</h2><p>​ 当有了第一台电脑之后就开始有人去想到如何将不同的电脑进行网络连接，而有了网络连接之后对于项目的开发就开始有了所谓的分布式设计，从最初的设计来讲，重要的数据肯定是要保存多份的。所以对于分布式的要求就逐步形成了。</p><p>​ 实际上经过了这么多年的发展，很多的人开始认识到一个问题：单台主机所能处理的数据量是有限的，所以为了得到更高性能的设计方案一定要采用多台主机，可是这多台主机之间该如何进行分配呢？</p><p>​ 于是对于分布式的开发设计，最初就有了以下的几点思考？</p><ul><li>分布式的开发如何可疑让代码更加安全？</li><li>分布式开发的时候如何进行有效的通讯？</li><li>在进行分布式处理的时候到底如何进行程序的功能划分？</li></ul><p>现在对于很多有经验的开发工程师来说实际上都已经清楚的知道了现在项目开发之中要进行的分布式的设计：</p><ul><li>WEB集群：考虑到多用户的并发访问的处理速度；</li><li>业务中心：在进行一些庞大的醒目设计过程之中，应该有更加完善的业务处理，这样所有的客户端（服务器）直接调用这些业务中心的操作就可以完成具体的功能；</li><li>数据库集群：解决了数据的存储问题，以及数据的分片管理。</li></ul><p>对于分布式的项目开发按照历史的发展经历过如下的一些技术：</p><ul><li><p>CORBA：公共对象请求代理架构，它是一种开发的标准，而且也是许多语言都支持的开发标准。</p></li><li><p>RMI（远程方法调用）：该技术是SUN提出的，该技术出现的最大特征死希望可以与CORBA进行市场竞争，于是这个时候出现了一个问题：很多的公司不认可这项技术；</p><ul><li>在Java里面提出了远程接口的概念，不过RMI的实现有些糟心；</li></ul><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\1.png" alt="1"></p></li><li><p>后来SUN的设计师发现，RMI很好用，但是不如CORBA广泛，于是开始思考能否基于CORBA做一些更好的设计呢？这样就产生了一个新的协议：RMI-IIOP协议，而这个协议用在EJB技术上；</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\2.png" alt="2"></p><p>EJB留给世界的只是它优秀的理论，和它糟糕的实现，并且这个理论被一些开源框架无限制的扩充与实现着。</p></li><li><p>.NET出现了，而后又因为J#的问题，微软和SUN就彻底决裂了，后来行业就乱了，因为有两套企业架构，公司就面临选择，于是尴尬的局面出现了，选择谁？后来软件行业继续推广，同时出现了一款优秀语言：XML，很多的公司就觉得应该用XML作为数据交换的基础，这个时候著名的软件架构：WebService登场了。</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\3.png" alt="3"></p><p>如果你的项目之中想要使用WebService技术进行开发，则有如下问题：</p><ul><li>速度太慢了，处理的速度不行；</li><li>如果想要采用远程接口的方式调用，则要利用开发工具生成一堆的工具类代码；</li></ul><p>后来2005年的时候WebService在市面上继续发酵，形成了又一大核心神器：SOA（面向服务架构）。它提出了一个企业服务总线（ESB）的概念。</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\4.png" alt="4"></p></li><li><p>SOA提出的服务总线又成为了新一代分布式的讨论需求，人们发现如果将所有的服务统一管理起来，就成为了服务总线，那么所有的开发者直接调用里面的服务就完成一些功能。后来又不断出现了许多的RPC开发技术，其中在国内具有代表性的的dubbo开噶技术。不过这个时候成长最快的是Rest，因为JSON的广泛应用，就如同最初XML技术造就了WebService一样，JSON造就了Rest服务，人们认为我们的操作应该更加简单一些，Rest还是一个未成型的标准还在发展着，而随着Rest技术的广泛任何，Spring终于得到了一个新的机会：利用Rest进行RPC技术实现，这样的操作速度很快，而且占用的带宽要少。在SpringCloud之中就真正的将整个的Rest作为了RPC实现技术，并且这一技术已经开始出现有行业的统一之势。而且SpringCloud也依照于SpringBoot开发技术，可以实现项目的打包发布以及单独运行，这一点都符合于当前云时代的开发要求。</p></li></ul><h2 id="二、SpringCloud开发架构"><a href="#二、SpringCloud开发架构" class="headerlink" title="二、SpringCloud开发架构"></a>二、SpringCloud开发架构</h2><p>​ SpringCloud整体核心架构只有一点：Rest服务，也就是说在整个SpringCloud配置过程之中，所有的配置处理都是围绕着Rest完成的，在整个Rest处理之中，一定要有两个端：服务的提供者（Provider）、服务的消费者（Consumer），所以对于整个SpringCloud的基础结构就如下所示：</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\5.png" alt="5"></p><p>​ 既然SpringCloud的核心是Restful结构，那么如果要想更好的去使用Rest这些为服务还需要考虑如下几个问题？</p><ol><li><p>所有的为服务的地址一定会非常的多，所以为了统一管理这些地址信息，也为了可以及时的告诉用户哪些服务不可用，应该准备一个分布式的注册中心，并且该注册中心应该支持有HA机制，为了高速并且方便的进行所有服务的注册操作，在SpringCloud里面提供有一个Eureka的注册中心；</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\6.png" alt="6"></p></li><li><p>对于整个的WEB端的架构（SpringBoot实现）可以轻松方便的进行WEB程序的编写，而后利用Nginx或Apache实现负载均衡处理，但是现在WEB端出现了负载均衡，那么业务端呢？应该也提供有多个业务端进行负载均衡。那么这个时候就需要将所有需要参与到负载均衡的业务端在Eureka之中进行注册。</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\7.png" alt="7"></p><p>在进行客户端使用Rest架构调用的时候，往往都需要一个调用地址，即时现在使用了Eureka作为注册中心，那么它也需要有一个明确的调用地址，可是所有的操作如果都利用调用地址的方式来处理，不是很方便，开发者最方便应用的工具死接口，所以就希望可以将所有的Rest服务的内容以接口的方式调用，所以它又提供了一个Feign技术，利用此技术可以伪造接口实现。</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\8.png" alt="8"></p></li><li><p>在进行整体的微架构设计的时候由于牵城到的问题还是RPC，所以就必须考虑熔断处理机制，实际上所谓的熔断就好比实际生活之中使用的保险丝一样，有了保险丝在一些设备出现了故障之后依然可以保护家庭电器可以正常使用，如果说现在有若干个微服务，并且这些微服务之间允许互相调用，例如：A微服务调用了B微服务、B微服务又调用了C的微服务；</p><p>如果在实际的项目设计过程之中没有处理好熔断机制，那么就会产生雪崩效应，为了防止这样的问题出现，SpringCloud里面提供有一个Hystrix熔断处理机制，以保证某一个微服务即时出现了问题之后依然可以正常使用。</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\9.png" alt="9"></p></li><li><p>在进行微服务访问的时候还有一点是非常可怕的。</p><p><img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\10.png" alt="10"></p><p>通过Zuul的代理用户只需要知道指定的路由的路径就可以访问指定的微服务的信息，这样更好的提现了Java中的“key=value”的设计思想，而且所有的微服务通过Zuul进行代理之后也可以更加合理的进行名称的隐藏。</p></li><li><p>在SpringBoot学习的时候一直强调过一个问题：在SpringBoot里面强调的是一个“零配置”的概念，本质在不需要编写任何的配置文件，但是事实上这一点并没有完全的实现，因为在整体的设计里面，依然会提供有application.yml（application.properties）配置文件，那么如果在微服务的创建之中，那么一定会有成百上千个微服务的信息出现，于是这些配置文件的管理就成为了问题，例如：现在突然有一天你的主机要进行变更，所有的服务的IP地址都可能发生改变，这样对于程序的维护是不方便的，为了解决这样的问题，在SpringCloud设计的时候提供有SpringCloudConfig的程序组件，利用这个组件就可以直接基于Git或Svn来进行配置文件的管理。<img src="/2017-04-15/第一章 分布式开发与SpringCloud简介.htm/第一章 分布式开发与SpringCloud简介\11.png" alt="11"></p><p>在整体设计上SpringCloud更好的实现了RPC的架构设计，而且使用乐Rest作为通讯的基础，这一点是它的成功之处，同时由于大量的使用了netflix公司的产品技术，所以这些技术也有可靠的保证。</p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.amorou.cn/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.amorou.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat内置过滤器详解</title>
    <link href="https://www.amorou.cn/2017-03-27/Tomcat%E5%86%85%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://www.amorou.cn/2017-03-27/Tomcat内置过滤器详解.html</id>
    <published>2017-03-27T14:41:29.000Z</published>
    <updated>2019-08-11T00:53:48.666Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>Tomcat提供了许多<strong>过滤器</strong>，这些<strong>过滤器</strong>可以在全局配置文件 <code>$CATALINA_BASE/conf/web.xml</code>中使用，表示对当前Tomcat容器中所有项目同时开启；也可以在各个Web应用程序配置文件 <code>WEB-INF/web.xml</code>中进行配置，表示仅对当前配置项目生效。每个过滤器如下所述（基于Tomcat 8.0版本）。</p><h1 id="一、AddDefaultCharsetFilter"><a href="#一、AddDefaultCharsetFilter" class="headerlink" title="一、AddDefaultCharsetFilter"></a>一、AddDefaultCharsetFilter</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>HTTP规范清楚地表明了，如果没有为“<code>text</code>”媒体类型的媒体子类型指定字符集，但是，浏览器可能会尝试自动检测字符集。攻击者可能利用此漏洞执行XSS攻击。默认情况下，Internet Explorer是开启自动检测字符集的。其他浏览器可以选择性启用。</p><p>此过滤器通过显式设置字符集来防止攻击。除非用户显式覆盖提供的字符集，否则浏览器将遵循显式设置的字符集，从而防止XSS攻击。</p><h2 id="过滤器类名"><a href="#过滤器类名" class="headerlink" title="过滤器类名"></a>过滤器类名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.filters.AddDefaultCharsetFilter</span><br></pre></td></tr></table></figure><h2 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h2><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>encoding</code></td><td style="text-align:left">如果<code>Servlet</code>没有设置其他字符集，则需要设置的字符集的名称。此参数有两个特殊值 <code>default</code>和<code>system</code>。值<code>system</code> 使用JVM范围的默认字符集，通常由<code>locale</code>设置。<code>default</code>将使用<strong>ISO-8859-1</strong>。</td></tr></tbody></table><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>addDefaultCharsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.AddDefaultCharsetFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>system<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>addDefaultCharsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>防止XSS攻击</p><h1 id="二、CorsFilter"><a href="#二、CorsFilter" class="headerlink" title="二、CorsFilter"></a>二、CorsFilter</h1><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><p>CorsFilter跨域资源共享规范的一个实现，常常用于前后端分离，静态资源与后端分离等情况。它主要在HttpServletResponse中增加Access-Control-*头，同时保护HTTP响应避免拆分，如果请求无效或者禁止访问，则返回403响应码。</p><h2 id="过滤器类名-1"><a href="#过滤器类名-1" class="headerlink" title="过滤器类名"></a>过滤器类名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.filters.CorsFilter</span><br></pre></td></tr></table></figure><h2 id="初始化参数-1"><a href="#初始化参数-1" class="headerlink" title="初始化参数"></a>初始化参数</h2><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>cors.allowed.origins</code></td><td style="text-align:left">允许访问的跨域资源列表。<code>*</code>表示允许访问来自任何域的资源，多个域用”,”分隔。例如：<code>https://www.w3.org, https://www.apache.org</code>。 <strong>默认值：</strong>空字符串（禁止访问资源）。</td></tr><tr><td style="text-align:left"><code>cors.allowed.methods</code></td><td style="text-align:left">可以用于访问资源的HTTP方法列表，”,”分隔，用于跨域请求。这些方法将出现在Prefligh（预检请求）响应头Access-Control-Allow-Methods的一部分，<strong>默认值：</strong> <code>GET, POST, HEAD, OPTIONS</code></td></tr><tr><td style="text-align:left"><code>cors.allowed.headers</code></td><td style="text-align:left">构造请求时可以使用的请求头，以”,”分隔，这些方法将包含在Prefligh（预检请求）响应头Access-Control-Allow-Headers内。<strong>默认值：</strong><code>Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers</code></td></tr><tr><td style="text-align:left"><code>cors.exposed.headers</code></td><td style="text-align:left">浏览器允许访问的头部信息列表，”,”分隔。这些方法将包含在Prefligh（预检请求）响应头Access-Control-Allow-Headers内。<strong>默认值：</strong>无。默认情况下不公开非简单标头</td></tr><tr><td style="text-align:left"><code>cors.preflight.maxage</code></td><td style="text-align:left">浏览器允许缓存的Preflght请求结果的时间，单位为秒。如果为负数，则表示CorsFilter不会添加头到Preflight响应，这些方法将包含Prefligh（预检请求）响应头Access-Control-Max-Age内。<strong>默认值：</strong> <code>1800</code></td></tr><tr><td style="text-align:left"><code>cors.support.credentials</code></td><td style="text-align:left">表示资源是否支持用户证书，这些方法将包含在Prefligh（预检请求）响应头Access-Control-Allow-Credentials内，它可以帮助浏览器确定是否可以使用凭据进行实际请求。<strong>默认值：</strong> <code>false</code></td></tr><tr><td style="text-align:left"><code>cors.request.decorate</code></td><td style="text-align:left">用于控制是否应将CORS特定属性添加到HttpServletRequest对象。<strong>默认值：</strong> <code>true</code>；<br>如果<code>cors.request.decorate</code>初始化参数为 <code>true</code>：则设置以下属性：<br><strong>cors.isCorsRequest：</strong>用于确定请求是否为CORS请求的标志；<br><strong>cors.request.origin：</strong>Origin URL，即发出请求的页面的URL；<br><strong>cors.request.type：</strong>CORS请求的类型。可能的值：<br><code>SIMPLE</code>: 非Preflight请求为先导的请求；<br><code>ACTUAL</code>: 以Preflight请求为先导的请求；<br><code>PRE_FLIGHT</code>: Preflight请求；<br><code>NOT_CORS</code>: 正常同域请求；<br><code>INVALID_CORS</code>: 无效的域请求。<br><strong>cors.request.headers: </strong>作为Preflight请求Access-Control-Request-Header头发送的请求头信息</td></tr></tbody></table><h2 id="配置示例-1"><a href="#配置示例-1" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.origins<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.methods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,POST,HEAD,OPTIONS,PUT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.exposed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Access-Control-Allow-Origin,Access-Control-Allow-Credentials<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.support.credentials<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.preflight.maxage<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h2><p>处理跨域请求</p><h1 id="三、CsrfPreventionFilter"><a href="#三、CsrfPreventionFilter" class="headerlink" title="三、CsrfPreventionFilter"></a>三、CsrfPreventionFilter</h1><h2 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h2><p>该过滤器为Web应用程序提供基本的CSRF保护。如果过滤器映射到<code>/*</code>并且返回到客户端的所有URL都通过调用<code>HttpServletResponse#encodeRedirectURL(String)</code>或 编码 <code>HttpServletResponse#encodeURL(String)</code>。</p><p>实现机制是生成一个nonce并且将其保存到session中，URL的encode也使用同样的nonce，当请求到达时，会比较请求中的nonce和session中的token是否一致，只有相同的才允许继续执行。</p><h2 id="过滤器类名-2"><a href="#过滤器类名-2" class="headerlink" title="过滤器类名"></a>过滤器类名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.filters.CsrfPreventionFilter</span><br></pre></td></tr></table></figure><h2 id="初始化参数-2"><a href="#初始化参数-2" class="headerlink" title="初始化参数"></a>初始化参数</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>denyStatus</code>（tomcat7.0之后新增）</td><td>拒绝请求时使用的HTTP响应状态代码，默认值：<code>403</code></td></tr><tr><td><code>entryPoints</code></td><td>以“,”为分隔的URL列表，这项配置用来做类似于exclude的功能，在配置中的映射，可以跳过检查</td></tr><tr><td><code>nonceCacheSize</code></td><td>随机数缓存大小。预生成的随机数被缓存到一个LRU缓存中以支持并发请求，用于浏览器刷新等行为（可能导致随机数不是当前的），默认值：5</td></tr><tr><td><code>randomClass</code></td><td>用于生成随机数的类的名称。该类必须是一个继承自<code>java.util.Random</code>的实例，默认值：<code>java.security.SecureRandom</code></td></tr></tbody></table><h2 id="配置示例-2"><a href="#配置示例-2" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CsrfPreventionFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CsrfPreventionFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>denyStatus<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>403<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>entryPoints<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/html,/css,/js<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>nonceCacheSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>5<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CsrfPreventionFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h2><p>用于CSRF安全过滤处理</p><h1 id="四、RestCsrfPreventionFilter"><a href="#四、RestCsrfPreventionFilter" class="headerlink" title="四、RestCsrfPreventionFilter"></a>四、RestCsrfPreventionFilter</h1><h2 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h2><p>该过滤器为REST APIs提供基本的CSRF保护。CSRF保护仅适用于非（GET、HEAD、OPTIONS）的HTTP修改请求。它基于一个自定义头X-CSRF-TOKEN和一个有效的nonce实现。</p><p>REST API的CSRF保护机制包括以下步骤：</p><ul><li>客户端要求提供有效的随机数。这是通过对受保护资源的非修改“获取”请求来执行的。</li><li>服务器使用映射到当前用户会话的有效随机数进行响应。</li><li>客户端在同一用户会话的帧中的后续修改请求中提供此随机数。</li><li>服务器拒绝对不包含有效nonce的受保护资源的所有修改请求。</li></ul><h2 id="过滤器类名-3"><a href="#过滤器类名-3" class="headerlink" title="过滤器类名"></a>过滤器类名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.filters.CsrfPreventionFilter</span><br></pre></td></tr></table></figure><h2 id="初始化参数-3"><a href="#初始化参数-3" class="headerlink" title="初始化参数"></a>初始化参数</h2><h1 id="六、FailedRequestFilter"><a href="#六、FailedRequestFilter" class="headerlink" title="六、FailedRequestFilter"></a>六、FailedRequestFilter</h1><h2 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h2><p>用于触发请求的参数解析，如果由于解析错误或请求大小限制（例如<a href="http://tomcat.apache.org/tomcat-6.0-doc/config/http.html" target="_blank" rel="noopener"> Connector</a>中的<code>maxParameterCount</code>属性 ）而在参数解析期间跳过某些参数，则拒绝请求 。此过滤器可用于确保客户端提交的任何参数值都不会丢失。</p><p>该过滤器的原理是：先调用<code>ServletRequest.getParameter</code>（首次调用会触发Tomcat服务器的请求参数解析，如果参数解析失败，将结果放到请求属性org.apache.catalina.parameter_parse_failed中），之后判断属性org.apache.catalina.parameter_parse_failed的值，如果不为空则直接返回400，以下是源码解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isGoodRequest</span><span class="params">(ServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Trigger parsing of parameters</span></span><br><span class="line">request.getParameter(<span class="string">"none"</span>);</span><br><span class="line"><span class="comment">// Detect failure</span></span><br><span class="line"><span class="keyword">if</span> (request.getAttribute(Globals.PARAMETER_PARSE_FAILED_ATTR) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能正确解析参数，需要该Filter之前设置字符集编码过滤器<code>SetCharacterEncodingFilter</code>。</p><h2 id="过滤器类名-4"><a href="#过滤器类名-4" class="headerlink" title="过滤器类名"></a>过滤器类名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.filters.FailedRequestFilter</span><br></pre></td></tr></table></figure><h2 id="初始化参数-4"><a href="#初始化参数-4" class="headerlink" title="初始化参数"></a>初始化参数</h2><p>无</p><h2 id="配置示例-3"><a href="#配置示例-3" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>failedRequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.FailedRequestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>failedRequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h2><p>用于对请求参数有严格限制时的后台处理。</p><h1 id="十三、SetCharacterEncodingFilter"><a href="#十三、SetCharacterEncodingFilter" class="headerlink" title="十三、SetCharacterEncodingFilter"></a>十三、SetCharacterEncodingFilter</h1><h2 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h2><p>提供了一种设置字符集编码的方式，通常情况下默认ISO-8859-1编码，但实际生产环境推荐使用UTF-8编码，此过滤器可通过配置强制改变请求的编码方式，本质上这个过滤器调用 <code>ServletRequest.setCharacterEncoding()</code>方法。</p><p>此过滤器只针对<code>POST</code>请求中的参数有效，因此我们需要在参数解析之前进行数据编码处理，所以经常会把此过滤器的顺序放在最前面，<code>GET</code>请求的编码不是在这里设置的，而是在<code>server.xml</code>文件中的<code>Connector</code>节点上设置。</p><h2 id="过滤器类名-5"><a href="#过滤器类名-5" class="headerlink" title="过滤器类名"></a>过滤器类名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.filters.SetCharacterEncodingFilter</span><br></pre></td></tr></table></figure><h2 id="初始化参数-5"><a href="#初始化参数-5" class="headerlink" title="初始化参数"></a>初始化参数</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>encoding</code></td><td>要设置的字符编码。</td></tr><tr><td><code>ignore</code></td><td>表示是否忽略客户端请求设置的字符集编码，如果为<code>true</code>那么都会将请求字符集编码覆盖，如果为<code>false</code>，仅会当请求没有指定字符集编码时才会进行设置。默认值：<code>false</code></td></tr></tbody></table><h2 id="配置示例-4"><a href="#配置示例-4" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>setCharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.SetCharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>setCharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h2><p>用于处理<code>POST</code>请求中参数包含中文时，中文乱码的问题。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="Tomcat" scheme="https://www.amorou.cn/categories/Tomcat/"/>
    
    
      <category term="Tomcat" scheme="https://www.amorou.cn/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ超详细教程</title>
    <link href="https://www.amorou.cn/2017-03-21/RabbitMQ%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B.html"/>
    <id>https://www.amorou.cn/2017-03-21/RabbitMQ超详细教程.html</id>
    <published>2017-03-21T05:18:31.000Z</published>
    <updated>2019-08-11T00:53:48.636Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="1、为什么使用RabbitMQ"><a href="#1、为什么使用RabbitMQ" class="headerlink" title="1、为什么使用RabbitMQ"></a>1、为什么使用RabbitMQ</h2><p><strong>为什么我开始选择学习RabbitMQ：</strong></p><ol><li>安装部署简单，上手门槛低，功能丰富，符合AMQP标准；</li><li>企业级消息队列，经过大量实践考验的高可靠；</li><li>集群易扩展，可以轻松的增减集群节点；</li><li>有强大的WEB管理页面。</li></ol><p><strong>企业为什么将RabbitMQ作为消息队列系统：</strong></p><p><strong>十万米高空看RabbitMQ：</strong></p><ol><li>有商业化的运营，不会轻易死掉；</li><li>遵循AMQP协议，不会被绑架；</li><li>强大的社区支持，为技术进步提供动力；</li><li>大量成功的应用案例，例如阿里、网易等互联网巨头都有使用。</li></ol><p><strong>显微镜看RabbitMQ：</strong></p><ol><li>Erlang开发，AMQP的最佳搭档，在支持持久化的消息队列中性能算很优秀的；</li><li>支持消息持久化、支持消息确认机制、灵活的任务分发机制等，支持功能非常丰富；</li><li>可靠性高；</li><li>集群扩展很容易，并且可以通过增加节点实现成倍的性能提升；</li><li>WEB管理和监控，有些技术癌更喜欢命令行界面，但WEB管理为后期运维提供很大的便利。</li><li>RabbitMQ劣势： 在kafka和zero面前性能被虐成渣，（持久化消息和ACK确认的情况下生产和消费消息单机大约在1-2万左右）</li></ol><p><strong>结论：如果你希望使用一个可靠性高、功能强大、易于管理的消息队列系统那么就选择RabbitMQ吧，如果你想用一个性能高，但偶尔丢点数据不是很在乎可以使用kafka或者zeroMQ。</strong></p><h2 id="2、RabbitMQ产生的背景"><a href="#2、RabbitMQ产生的背景" class="headerlink" title="2、RabbitMQ产生的背景"></a>2、RabbitMQ产生的背景</h2><p>1、消息队列系统最在可以追溯到上个世纪。1983年最早的消息队列软件Teknekron诞生，当时紧用于一些金融交易等系统。</p><p>2、上世纪九十年代，诞生了多家消息队列系统，例如IBM MQ、微软的MSMQ、TIBCO MQ等消息队列在企业中的应用也愈加广泛。显然这些商用的消息队列系统如果企业要使用需要付出高昂的成本，并且各个消息队列之间使用不同的API不同的协议。</p><p>3、2004年，AMQP（Advanced Message Queuing Protocol,高级消息队列协议）开始开发。通过这一标准可以和任意AMQP供应商提供的MQ服务进行交互。</p><p>4、2006年，光阴荏苒时光如梭，一转眼就说到了重点。我们的主角使用Erlang语言实现的AMQP开源版本，RabbitMQ诞生了，同年AMQP协议首次发布。</p><h2 id="3、为什么叫RabbitMQ？"><a href="#3、为什么叫RabbitMQ？" class="headerlink" title="3、为什么叫RabbitMQ？"></a>3、为什么叫RabbitMQ？</h2><p>兔子行动非常迅速而且繁殖起来也非常疯狂，所以就把Rabbit用作这个分布式软件的命名（就是这么简单）。</p><h1 id="一、RabbitMQ的安装"><a href="#一、RabbitMQ的安装" class="headerlink" title="一、RabbitMQ的安装"></a>一、RabbitMQ的安装</h1><p>全文讲解的是在winodws10下的安装使用</p><h2 id="1、下载安装erlang"><a href="#1、下载安装erlang" class="headerlink" title="1、下载安装erlang"></a>1、下载安装erlang</h2><p>下载erlang，原因在于RabbitMQ服务端代码是使用并发式语言erlang编写的，下载地址：<a href="http://www.erlang.org/downloads" target="_blank" rel="noopener"><em>http://www.erlang.org/downloads</em></a>，双击.exe文件进行安装就好。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595811567.png" alt="1553595811567"></p><p>下载完成后双击打开，一直next就可以，不再描述</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595853833.png" alt="1553595853833"></p><p>安装完成之后创建一个名为ERLANG_HOME的环境变量，其值指向erlang的安装目录。同将<code>%ERLANG_HOME%\bin</code>加入到Path中</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595874152.png" alt="1553595874152"></p><p>最后打开命令行，输入erl，如果出现erlang的版本信息就表示erlang语言环境安装成功。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595888912.png" alt="1553595888912"></p><h2 id="2、下载安装RabbitMQ"><a href="#2、下载安装RabbitMQ" class="headerlink" title="2、下载安装RabbitMQ"></a>2、下载安装RabbitMQ</h2><p>点击<a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener"><em>RabbitMQ官网下载地址</em></a>，进入下载页面：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595935526.png" alt="1553595935526"></p><p>选择对应的下载链接：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595944109.png" alt="1553595944109"></p><p>安装路径不能有空格，默认的安装路径是有空格的，请注意：3.7.4之后版本是无需理会安装空格的。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595951886.png" alt="1553595951886"></p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595956541.png" alt="1553595956541"></p><h2 id="3、激活-RabbitMQ’s-Management-Plugin"><a href="#3、激活-RabbitMQ’s-Management-Plugin" class="headerlink" title="3、激活 RabbitMQ’s Management Plugin"></a>3、激活 RabbitMQ’s Management Plugin</h2><p>安装RabbitMQ-Plugins，这个相当于是一个管理界面，方便我们在浏览器界面查看RabbitMQ各个消息队列以及exchange的工作情况。进入RabbitMQ的安装目录并以<strong>管理员身份</strong>运行cmd命令：</p><p>输入指令激活插件：<strong>rabbitmq-plugins.bat enable rabbitmq_management</strong></p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595977845.png" alt="1553595977845"></p><p>​ 输入指令启动RabbitMQ服务：<strong>net start RabbitMQ</strong></p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553595985023.png" alt="1553595985023"></p><p>常用命令：</p><blockquote><p>启动服务：net start RabbitMQ</p><p>停止服务：net stop RabbitMQ</p><p>重启服务：net stop RabbitMQ &amp;&amp; net start RabbitMQ</p></blockquote><h2 id="4、登录验证"><a href="#4、登录验证" class="headerlink" title="4、登录验证"></a>4、登录验证</h2><p>浏览器访问：<a href="http://localhost:15672" target="_blank" rel="noopener"><em>http://localhost:15672</em></a>，默认用户名和密码：guest</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596005404.png" alt="1553596005404"></p><h2 id="5、配置允许远程访问"><a href="#5、配置允许远程访问" class="headerlink" title="5、配置允许远程访问"></a>5、配置允许远程访问</h2><p>更多情况下，队列服务往往不在我们本机上，我们需要远程来控制RabbitMQ，但是默认是无法通过<strong><a href="http://server-name:15672" target="_blank" rel="noopener">http://server-name:15672</a></strong>来访问的，可以通过修改<strong>\RabbitMQ Server\rabbitmq_server-3.6.10\etc</strong>下<strong>Rabbitmq.config</strong>来设置允许guest用户远程登录，具体修改为如下，然后就到服务管理器中重启RabbitMQ服务。</p><p>默认RabbitMQ会在<strong>C:\Users\Administrator\AppData\Roaming\RabbitMQ</strong> 中生成一个配置文件，<strong>rabbitmq.config</strong> 里面就是实际用到的配置信息，如果图方便，也可以这里直接改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;rabbit, [&#123;loopback_users, [guest]&#125;]&#125;].</span><br></pre></td></tr></table></figure><h1 id="二、RabbitMQ概念"><a href="#二、RabbitMQ概念" class="headerlink" title="二、RabbitMQ概念"></a>二、RabbitMQ概念</h1><ul><li><p>producer：消息生产者</p></li><li><p>consumer：消息消费者</p></li><li><p>virtual host：虚拟主机，在RabbitMQ中，用户只能在虚拟主机的层面上进行一些权限设置，比如我可以访问哪些队列，我可以处理哪些请求等等；</p></li><li><p>broker：消息转发者，也就是我们RabbitMQ服务端充当的功能了，那么消息是按照什么规则进行转发的呢？需要用到下面几个概念；</p></li><li><p>exchange：交换机，他是和producer直接进行打交道的，有点类似于路由器的功能，主要就是进行转发操作的呗，那么producer到底用哪个exchange进行路由呢？这个取决于routing key(路由键)，每个消息都有这个键，我们也可以自己设定，其实就是一字符串；</p></li><li><p>queue：消息队列，用于存放消息，他接收exchange路由过来的消息，我们可以对队列内容进行持久化操作，那么queue到底接收那个exchange路由的消息呢？这个时候就要用到binding key(绑定键)了，绑定键会将队列和exchange进行绑定，至于绑定方式，RabbitMQ提供了多种方式；</p></li></ul><p>以上就是RabbitMQ涉及到的一些概念了，用一张图表示这些概念之间的关系就是：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596062355.png" alt="1553596062355"></p><h1 id="三、用户角色权限、virtual-hosts配置"><a href="#三、用户角色权限、virtual-hosts配置" class="headerlink" title="三、用户角色权限、virtual hosts配置"></a>三、用户角色权限、virtual hosts配置</h1><h2 id="1、用户管理"><a href="#1、用户管理" class="headerlink" title="1、用户管理"></a>1、用户管理</h2><p>​ 我们在开发的时候一般不直接使用guest账号进行操作，而是新增一个新的管理用户进行操作，那么怎么新增帐号呢？</p><ol><li><p>首先使用guest帐号登录管理控制台</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596113270.png" alt="1553596113270"></p></li><li><p>如上图点击<strong>Admin</strong>菜单并点击<strong>Add a user</strong>操作就会出现用户名和密码以及确认密码、<strong>Tags</strong>（相当于角色）的输入框。输入后点击左下方的<strong>Add user</strong>按钮即可完成新增用户的操作，新增成功后会在<strong>Admin</strong>页面列表中出现我们新增的用户。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596129491.png" alt="1553596129491"></p></li></ol><h2 id="2、角色管理"><a href="#2、角色管理" class="headerlink" title="2、角色管理"></a>2、角色管理</h2><p>RabbitMQ中的角色分为如下五类：none、management、policymaker、monitoring、administrator</p><ul><li><p>none ：</p><p>不能访问 management plugin</p></li><li><p>management ：</p><p>用户可以通过AMQP做的任何事外加：</p><p>列出自己可以通过AMQP登入的virtual hosts</p><p>查看自己的virtual hosts中的queues, exchanges 和 bindings</p><p>查看和关闭自己的channels 和 connections</p><p>查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。</p></li><li><p>policymaker ：</p><p>management可以做的任何事外加： 查看、创建和删除自己的virtual hosts所属的policies和parameters</p></li><li><p>monitoring ：</p><p>management可以做的任何事外加：</p><p>​ 列出所有virtual hosts，包括他们不能登录的virtual hosts</p><p>​ 查看其他用户的connections和channels</p><p>​ 查看节点级别的数据如clustering和memory使用情况</p><p>​ 查看真正的关于所有virtual hosts的全局的统计信息</p></li><li><p>administrator ：</p><p>policymaker和monitoring可以做的任何事外加:</p><p>​ 创建和删除virtual hosts</p><p>​ 查看、创建和删除users</p><p>​ 查看创建和删除permissions</p><p>​ 关闭其他用户的connections</p></li></ul><h2 id="3、virtual-hosts"><a href="#3、virtual-hosts" class="headerlink" title="3、virtual hosts"></a>3、virtual hosts</h2><p>像mysql有数据库的概念并且可以指定用户对库和表等操作的权限。那RabbitMQ呢？RabbitMQ也有类似的权限管理。在RabbitMQ中可以虚拟消息服务器VirtualHost，每个VirtualHost相当月一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通。</p><p>在RabbitMQ中无法通过AMQP创建VirtualHost，可以通过以下命令来创建。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596315130.png" alt="1553596315130"></p><p>如上图在创建完vhost后可以在All Virtual Host标签看到新建的VirtualHost。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596339805.png" alt="1553596339805"></p><h2 id="4、virtual-hosts授权"><a href="#4、virtual-hosts授权" class="headerlink" title="4、virtual hosts授权"></a>4、virtual hosts授权</h2><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596348575.png" alt="1553596348575"></p><p>在用户列表界面点击我们需要授权的用户，出现如下界面：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596356642.png" alt="1553596356642"></p><p>然后选择指定的Virtual Host进行授权，授权完成后我们回到Admin页面如下：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596365503.png" alt="1553596365503"></p><h1 id="四、RabbitMQ-简单队列"><a href="#四、RabbitMQ-简单队列" class="headerlink" title="四、RabbitMQ - 简单队列"></a>四、RabbitMQ - 简单队列</h1><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596376129.png" alt="1553596376129"></p><p>一个生产者对应一个消费者！！！</p><p>生产者将消息发送到“hello”队列。消费者从该队列接收消息。</p><p>接下来我们将用Java编写两个程序;发送单个消息的生产者，以及接收消息并将其打印出来的消费者。</p><p>1、新建Maven项目，添加RabbitMQ客户端和 (<a href="http://central.maven.org/maven2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar" target="_blank" rel="noopener">SLF4J API</a> and <a href="http://central.maven.org/maven2/org/slf4j/slf4j-simple/1.7.25/slf4j-simple-1.7.25.jar" target="_blank" rel="noopener">SLF4J Simple</a>)的依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>rabbitmq<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>rabbitmq<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、创建获取连接工具类：ConnectionUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、定义连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"><span class="comment">//2、设置服务器地址</span></span><br><span class="line">connectionFactory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"><span class="comment">//3、设置端口</span></span><br><span class="line">connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line"><span class="comment">//4、设置VirtualHost、用户名及密码</span></span><br><span class="line">connectionFactory.setVirtualHost(<span class="string">"/virtual_test"</span>);</span><br><span class="line">connectionFactory.setUsername(<span class="string">"djtest"</span>);</span><br><span class="line">connectionFactory.setPassword(<span class="string">"djtest"</span>);</span><br><span class="line"><span class="comment">//5、获取并返回连接</span></span><br><span class="line"><span class="keyword">return</span> connectionFactory.newConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建消息发送者：Send.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明(创建)队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、定义消息内容</span></span><br><span class="line">String message = <span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="comment">//5、发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">System.out.println(<span class="string">"[x] Sent'"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"><span class="comment">//6、关闭通道</span></span><br><span class="line">channel.close();</span><br><span class="line"><span class="comment">//7、关闭连接</span></span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们直接运行消费者的main方法，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent&apos;Hello World!&apos;</span><br></pre></td></tr></table></figure><p>查看管理界面Queue页面结果如下：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596502939.png" alt="1553596502939"></p><p>4、创建消息消费者：Recv.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//5、监听队列</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码编写完成后运行，控制台打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>查看管理界面Queue页面结果会发现我们之前发布的消息已经被消费：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596559895.png" alt="1553596559895"></p><h1 id="五、RabbitMQ-–-Work-Queue（工作队列）"><a href="#五、RabbitMQ-–-Work-Queue（工作队列）" class="headerlink" title="五、RabbitMQ – Work Queue（工作队列）"></a>五、RabbitMQ – Work Queue（工作队列）</h1><h2 id="1、Round-robin-dispatching（轮询分发）"><a href="#1、Round-robin-dispatching（轮询分发）" class="headerlink" title="1、Round-robin dispatching（轮询分发）"></a>1、Round-robin dispatching（轮询分发）</h2><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596583343.png" alt="1553596583343"></p><p>一个生产者对应多个消费者，但是只能有一个消费者获得消息！！！</p><p>竞争消费者模式。</p><p>接下来用Java编写两个程序;发送单个消息的生产者，以及接收消息并将其打印出来的多个消费者。</p><h3 id="1、创建消息发送者：Send-java"><a href="#1、创建消息发送者：Send-java" class="headerlink" title="1、创建消息发送者：Send.java"></a>1、创建消息发送者：Send.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明(创建)队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、定义消息内容(发布多条消息)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"I am work_queue "</span> + i;</span><br><span class="line"><span class="comment">//5、发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"><span class="comment">//模拟发送消息延时，便于演示多个消费者竞争接受消息</span></span><br><span class="line">Thread.sleep(i * <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6、关闭信道</span></span><br><span class="line">channel.close();</span><br><span class="line"><span class="comment">//7、关闭连接</span></span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建消息消费者1：Recv-1-java"><a href="#2、创建消息消费者1：Recv-1-java" class="headerlink" title="2、创建消息消费者1：Recv_1.java"></a>2、创建消息消费者1：Recv_1.java</h3><p>每接收一条消息后休眠10毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//5、监听队列</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建消息消费者2：Recv-2-java"><a href="#3、创建消息消费者2：Recv-2-java" class="headerlink" title="3、创建消息消费者2：Recv_2.java"></a>3、创建消息消费者2：Recv_2.java</h3><p>每接收一条消息后休眠1000毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line"><span class="comment">//消费者2接收一条消息后休眠1000毫秒</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//5、监听队列</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试结果</p><p><strong>生产者一次打印从0-9条消息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent &apos;I am work_queue 0&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 1&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 2&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 3&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 4&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 5&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 6&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 7&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 8&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 9&apos;</span><br></pre></td></tr></table></figure><p><strong>消费者1：结果为打印偶数条消息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am work_queue 0</span><br><span class="line">I am work_queue 2</span><br><span class="line">I am work_queue 4</span><br><span class="line">I am work_queue 6</span><br><span class="line">I am work_queue 8</span><br></pre></td></tr></table></figure><p><strong>消费者2：结果为打印奇数条消息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am work_queue 1</span><br><span class="line">I am work_queue 3</span><br><span class="line">I am work_queue 5</span><br><span class="line">I am work_queue 7</span><br><span class="line">I am work_queue 9</span><br></pre></td></tr></table></figure><h3 id="5、分析结果"><a href="#5、分析结果" class="headerlink" title="5、分析结果"></a>5、分析结果</h3><p><strong>消费者1和消费者2获取到的消息内容是不同的，也就是说同一个消息只能被一个消费者获取。</strong></p><p><strong>消费者1和消费者2分别获取奇数条消息和偶数条消息，两种获取消息的条数是一样的。</strong></p><p>前面我们说这种模式是竞争消费者模式，一条队列被多个消费者监听，这里两个消费者，其中消费者1和消费者2在获取消息后分别休眠了10毫秒和1000毫秒，也就是说两个消费者获取消息的效率是不一样的，但是结果却是两者获得的消息条数是一样的，这根本就不构成竞争关系，那么我们应该怎么办才能让工作效率高的消费者获取消息更多，也就是消费者1获取消息更多呢？</p><p>PS：在增加一个消费者其实获取消息条数也是一样的，消费者1获取0、3、6、9，消费者2获取1、4、7，消费者3获取2、5、8</p><p>每个消费者将获得相同数量的消息。这种分发消息的方式称为循环法。</p><h2 id="2、Fair-dispatch（公平分发）"><a href="#2、Fair-dispatch（公平分发）" class="headerlink" title="2、Fair dispatch（公平分发）"></a>2、Fair dispatch（公平分发）</h2><p>根据结果分析我们得知，如果，我们单个消费者1分钟最多处理60条消息，但是，生产者1分钟可能会发送300条消息，如果，我们一台消费者客户端，1分钟同时要接收到300条消息，已经超过我们最大的负载，这时，就可能导致，服务器资源被耗尽，消费者客户端卡死等情况。然而，RabbitMQ对此却一无所知，仍然会均匀的发送消息。</p><p>发生这种情况是因为RabbitMQ只是在消息进入队列时调度消息。它不会查看消费者未确认消息的数量。它只会盲目的把第n个消息发送给第n个消费者。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596764194.png" alt="1553596764194"></p><p>为了改变这种模式，RabbitMQ提供了一种qos（服务质量保证）功能，即在非自动确认消息的前提下，如果一定数目的消息（通过基于consume或者channel设置Qos的值）未被确认前，不进行消费新的消息。</p><p>我们可以使用basicQos方法和prefetchCount = 1设置。这告诉RabbitMQ在处理并确认前一个消息之前，不要向该消费者发送新消息，它会将它发送给下一个仍然很忙的工人。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">com.rabbitmq.client.Channel：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicQos</span><span class="params">(<span class="keyword">int</span> prefetchCount)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicQos</span><span class="params">(<span class="keyword">int</span> prefetchCount, <span class="keyword">boolean</span> global)</span> <span class="keyword">throws</span> IOException</span>;   </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicQos</span><span class="params">(<span class="keyword">int</span> prefetchSize, <span class="keyword">int</span> prefetchCount, <span class="keyword">boolean</span> global)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prefetchSize：服务器将传递的最大内容量（以八位字节为单位），如果不受限制，则为0</span></span><br><span class="line"><span class="comment">// prefetchCount：服务器将传递的最大消息数，如果不受限制，则为0，简单点说，就是会告诉RabbitMQ不要同时给一个消费者推送多于N个消息，即一旦有N个消息还没有ack，则该consumer将block掉，直到有消息ack</span></span><br><span class="line"><span class="comment">// global：true\false 是否将上面设置应用于channel，简单点说，就是上面限制是channel级别的还是consumer级别</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prefetchCount = <span class="number">1</span> ; </span><br><span class="line">channel.basicQos（prefetchCount）;</span><br></pre></td></tr></table></figure><p>生产者和消费者同时增加如上代码，表示同一时刻服务器只会发送一条消息给消费者。发现消费者1和消费者2获取消息结果还是如之前那样，这是为什么呢，是因为prefetchCount在autoAsk=false的情况下生效，即在自动应答的情况下这两个值是不生效的，而我们之前的消费端代码是使用的自动应答模式。</p><h3 id="1、创建消息发送者：Send-java-1"><a href="#1、创建消息发送者：Send-java-1" class="headerlink" title="1、创建消息发送者：Send.java"></a>1、创建消息发送者：Send.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue_fair"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明(创建)队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、限制每个消费者同时最多能处理1条消息</span></span><br><span class="line"><span class="keyword">int</span> prefetchCount = <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、定义消息内容(发布多条消息)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">String message = <span class="string">"I am work_queue "</span> + i;</span><br><span class="line"><span class="comment">//6、发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"><span class="comment">//模拟发送消息延时，便于演示多个消费者竞争接受消息</span></span><br><span class="line">Thread.sleep(i * <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7、关闭信道</span></span><br><span class="line">channel.close();</span><br><span class="line"><span class="comment">//8、关闭连接</span></span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建消息消费者1：Recv-1-java-1"><a href="#2、创建消息消费者1：Recv-1-java-1" class="headerlink" title="2、创建消息消费者1：Recv_1.java"></a>2、创建消息消费者1：Recv_1.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue_fair"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、保证一次只处理一个</span></span><br><span class="line"><span class="keyword">int</span> prefetchCount = <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br><span class="line"><span class="comment">//5、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//7、获取消息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//消费者1接收一条消息后休眠10毫秒</span></span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//手动应答</span></span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//6、监听队列-关闭自动应答</span></span><br><span class="line"><span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</span><br><span class="line">channel.basicConsume(QUEUE_NAME, autoAck, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建消息消费者2：Recv-2-java-1"><a href="#3、创建消息消费者2：Recv-2-java-1" class="headerlink" title="3、创建消息消费者2：Recv_2.java"></a>3、创建消息消费者2：Recv_2.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"work_queue_fair"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、保证一次只处理一个</span></span><br><span class="line"><span class="keyword">int</span> prefetchCount = <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br><span class="line"><span class="comment">//5、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//7、获取消息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line"><span class="comment">//消费者2接收一条消息后休眠1000毫秒</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//手动应答</span></span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//6、监听队列-关闭自动应答</span></span><br><span class="line"><span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</span><br><span class="line">channel.basicConsume(QUEUE_NAME, autoAck, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、测试结果"><a href="#4、测试结果" class="headerlink" title="4、测试结果"></a>4、测试结果</h3><p><strong>生产者一次打印从0-9条消息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent &apos;I am work_queue 0&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 1&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 2&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 3&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 4&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 5&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 6&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 7&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 8&apos;</span><br><span class="line">[x] Sent &apos;I am work_queue 9&apos;</span><br></pre></td></tr></table></figure><p><strong>消费者1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I am work_queue 0</span><br><span class="line">I am work_queue 2</span><br><span class="line">I am work_queue 3</span><br><span class="line">I am work_queue 4</span><br><span class="line">I am work_queue 5</span><br><span class="line">I am work_queue 6</span><br><span class="line">I am work_queue 7</span><br><span class="line">I am work_queue 8</span><br><span class="line">I am work_queue 9</span><br></pre></td></tr></table></figure><p><strong>消费者2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am work_queue 1</span><br></pre></td></tr></table></figure><h3 id="5、应用场景"><a href="#5、应用场景" class="headerlink" title="5、应用场景"></a>5、应用场景</h3><p>效率高的消费者消费消息多。可以用来进行负载均衡。</p><p><strong>PS：如果所有消费者都很忙，队列就会填满。那么将需要考虑添加更多消费者，或者创建更多的virtualHost来细化你的设计，或者采取其他策略。</strong></p><h1 id="六、Exchanges（交换机）"><a href="#六、Exchanges（交换机）" class="headerlink" title="六、Exchanges（交换机）"></a>六、Exchanges（交换机）</h1><p>交换器分为四种，分别是：direct、fanout、topic和 headers。</p><p>前面三种分别对应路由模式、发布订阅模式和通配符模式，headers 交换器允许匹配 AMQP 消息的 header 而非路由键，除此之外，header 交换器和 direct 交换器完全一致，但是性能却差很多，因此基本上不会用到该交换器，这里也不详细介绍。</p><h2 id="1、direct"><a href="#1、direct" class="headerlink" title="1、direct"></a>1、direct</h2><p>如果路由键完全匹配的话，消息才会被投放到相应的队列。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596975661.png" alt="1553596975661"></p><p>direct是RabbitMQ默认的交换机模式，也是最简单的模式，根据key全文匹配去寻找队列。</p><h2 id="2、fanout"><a href="#2、fanout" class="headerlink" title="2、fanout"></a>2、fanout</h2><p>当发送一条消息到fanout交换器上时，它会把消息投放到所有附加在此交换器上的队列。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553596990106.png" alt="1553596990106"></p><p>不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。</p><p>发送消息，只需要指定交换机，route key 可以为空</p><h2 id="3、topic"><a href="#3、topic" class="headerlink" title="3、topic"></a>3、topic</h2><p>设置模糊的绑定方式，“*”操作符将“.”视为分隔符，匹配单个字符；“#”操作符没有分块的概念，它将任意“.”均视为关键字的匹配部分，能够匹配多个字符。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553597009104.png" alt="1553597009104"></p><h1 id="七、RabbitMQ-–-Publish-Subscribe（发布-订阅模式）"><a href="#七、RabbitMQ-–-Publish-Subscribe（发布-订阅模式）" class="headerlink" title="七、RabbitMQ – Publish/Subscribe（发布/订阅模式）"></a>七、RabbitMQ – Publish/Subscribe（发布/订阅模式）</h1><p>在之前的案例中都是同一个消息都只能被一个消费者消费，如果现在同一个消息需要向多个消费者传递信息，那么就需要使用到Publish/Subscribe（发布/订阅）。</p><p>以下构建一个注册成功后发送邮件和短信通知的例子。</p><p>RabbitMQ中消息传递模型的核心思想是生产者永远不会将任何消息直接发送到队列。实际上，生产者通常甚至不知道消息是否会被传递到任何队列。</p><p>相反，生产者只能向exchange（交换机）发送消息。exchange一方面接收来自生产者的消息，另一方面将它们推送到队列。exchange必须确切知道如何处理它收到的消息。它应该附加到特定队列吗？它应该附加到许多队列吗？或者它应该被丢弃。其规则由交换类型定义 。</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553597038735.png" alt="1553597038735"></p><p>在RabbitMQ中有几种交换类型可供选择：<code>direct</code>、<code>topic</code>、<code>headers</code>、<code>fanout</code>，接下来的列子我们讲使用“<code>fanout</code>”这种类型，并将其称为 “<code>fanout_exchange</code>”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.exchangeDeclare(<span class="string">"fanout_exchange"</span>, <span class="string">"fanout"</span>);</span><br></pre></td></tr></table></figure><h2 id="1、创建消息发送者：Send-java-2"><a href="#1、创建消息发送者：Send-java-2" class="headerlink" title="1、创建消息发送者：Send.java"></a>1、创建消息发送者：Send.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明交换机</span></span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>);</span><br><span class="line"><span class="comment">//4、定义消息内容</span></span><br><span class="line">String message = <span class="string">"注册成功"</span>;</span><br><span class="line"><span class="comment">//5、发布消息</span></span><br><span class="line">channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"><span class="comment">//6、关闭信道</span></span><br><span class="line">channel.close();</span><br><span class="line"><span class="comment">//7、关闭连接</span></span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们先测试运行发送者代码，然后通过管理界面可以看到我们的交换机创建成功了，如下图：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553597112137.png" alt="1553597112137"></p><p>但是此时并没有看到队列，如下图：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553597119600.png" alt="1553597119600"></p><p>发现此时我们的消息丢失了，因为交换机没有存储的能力，在RabbitMQ里面只有队列有存储能力，由于这时候还没有队列绑定到这个交换机，所以数据丢失了。</p><h2 id="2、创建消息消费者1：Recv-1-java-2"><a href="#2、创建消息消费者1：Recv-1-java-2" class="headerlink" title="2、创建消息消费者1：Recv_1.java"></a>2、创建消息消费者1：Recv_1.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"ps_queue_email"</span>;</span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"fanout_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、将队列绑定到交换机</span></span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"><span class="comment">//5、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>) + <span class="string">" - 开始发送email通知"</span>);</span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//7、监听队列-关闭自动确认</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建消息消费者2：Recv-2-java-2"><a href="#3、创建消息消费者2：Recv-2-java-2" class="headerlink" title="3、创建消息消费者2：Recv_2.java"></a>3、创建消息消费者2：Recv_2.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"ps_queue_sms"</span>;</span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"fanout_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、将队列绑定到交换机</span></span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"><span class="comment">//5、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>) + <span class="string">" - 开始发送短信通知"</span>);</span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//7、监听队列-关闭自动确认</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、测试结果-1"><a href="#4、测试结果-1" class="headerlink" title="4、测试结果"></a>4、测试结果</h2><p><strong>生产者</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent &apos;注册成功&apos;</span><br></pre></td></tr></table></figure><p><strong>消费者1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting for messages. To exit press CTRL+C</span><br><span class="line">注册成功 - 开始发送email通知</span><br></pre></td></tr></table></figure><p><strong>消费者2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting for messages. To exit press CTRL+C</span><br><span class="line">注册成功 - 开始发送短信通知</span><br></pre></td></tr></table></figure><p><strong>管理页面</strong></p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553597186725.png" alt="1553597186725"></p><h2 id="5、应用场景-1"><a href="#5、应用场景-1" class="headerlink" title="5、应用场景"></a>5、应用场景</h2><p>比如一个商城系统需要在管理员上传商品新的图片时，前台系统必须更新图片，日志系统必须记录相应的日志，那么就可以将两个队列绑定到图片上传交换器上，一个用于前台系统更新图片，另一个用于日志系统记录日志。</p><h1 id="八、RabbitMQ-–-Routing（路由模式）"><a href="#八、RabbitMQ-–-Routing（路由模式）" class="headerlink" title="八、RabbitMQ – Routing（路由模式）"></a>八、RabbitMQ – Routing（路由模式）</h1><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553597202538.png" alt="1553597202538"></p><p>生产者将消息发送到direct交换器，在绑定队列和交换器的时候有一个路由key，生产者发送的消息会指定一个路由key，那么消息只会发送到相应key相同的队列，接着监听该队列的消费者消费消息。</p><p><strong>也就是让消费者有选择性的接收消息。</strong></p><h2 id="1、创建消息发送者：Send-java-3"><a href="#1、创建消息发送者：Send-java-3" class="headerlink" title="1、创建消息发送者：Send.java"></a>1、创建消息发送者：Send.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"direct_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明交换机</span></span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"direct"</span>);</span><br><span class="line"><span class="comment">//4、定义消息内容</span></span><br><span class="line">String message = <span class="string">"橙色"</span>;</span><br><span class="line"><span class="comment">//5、发布消息</span></span><br><span class="line">String routingKey = <span class="string">"oranger"</span>;</span><br><span class="line">channel.basicPublish(EXCHANGE_NAME, routingKey, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"><span class="comment">//6、关闭信道</span></span><br><span class="line">channel.close();</span><br><span class="line"><span class="comment">//7、关闭连接</span></span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、创建消息消费者1：Recv-1-java-3"><a href="#2、创建消息消费者1：Recv-1-java-3" class="headerlink" title="2、创建消息消费者1：Recv_1.java"></a>2、创建消息消费者1：Recv_1.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"routing_queue"</span>;</span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"direct_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、将队列绑定到交换机</span></span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"oranger"</span>);</span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"green"</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"><span class="comment">//5、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="string">" [Recv_1] - "</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//7、监听队列-关闭自动确认</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建消息消费者2：Recv-2-java-3"><a href="#3、创建消息消费者2：Recv-2-java-3" class="headerlink" title="3、创建消息消费者2：Recv_2.java"></a>3、创建消息消费者2：Recv_2.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"routing_queue"</span>;</span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"direct_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、将队列绑定到交换机</span></span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"black"</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"><span class="comment">//5、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="string">" [Recv_1] - "</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//7、监听队列-关闭自动确认</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、测试结果-2"><a href="#4、测试结果-2" class="headerlink" title="4、测试结果"></a>4、测试结果</h2><p>我们首先看代码，生产者发布消息，指定的路由key为<strong>oranger</strong>。消费者1绑定队列和交换机时key分别是<strong>oranger/green</strong>；消费者2绑定队列和交换器时key是<strong>black</strong>。</p><p>所以我们可以猜测生产者发送的消息，只有消费者1能够接收并消费，而消费者2是不能接收的。</p><p><strong>生产者</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent &apos;橙色&apos;</span><br></pre></td></tr></table></figure><p><strong>消费者1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting for messages. To exit press CTRL+C</span><br><span class="line">[Recv_1] - 橙色</span><br></pre></td></tr></table></figure><p><strong>消费者2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting for messages. To exit press CTRL+C</span><br></pre></td></tr></table></figure><h2 id="5、应用场景-2"><a href="#5、应用场景-2" class="headerlink" title="5、应用场景"></a>5、应用场景</h2><p>利用消费者能够有选择性的接收消息的特性，比如我们商城系统的后台管理系统对于商品进行修改、删除、新增操作都需要更新前台系统的界面展示，而查询操作确不需要，那么这两个队列分开接收消息就比较好。</p><h1 id="九、RabbitMQ-–-Topics（主题模式）"><a href="#九、RabbitMQ-–-Topics（主题模式）" class="headerlink" title="九、RabbitMQ – Topics（主题模式）"></a>九、RabbitMQ – Topics（主题模式）</h1><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553597305637.png" alt="1553597305637"></p><p>生产者将消息发送到topic交换器。</p><p>上面的路由模式是根据路由key进行完整的匹配（完全相等才发送消息），这里的通配符模式通俗的来讲就是模糊匹配。</p><p><strong>符号“#”表示匹配一个或多个词，符号“*”表示匹配一个词。</strong></p><h2 id="1、创建消息发送者：Send-java-4"><a href="#1、创建消息发送者：Send-java-4" class="headerlink" title="1、创建消息发送者：Send.java"></a>1、创建消息发送者：Send.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明交换机</span></span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"topic"</span>);</span><br><span class="line"><span class="comment">//4、定义消息内容</span></span><br><span class="line">String messageByAdd = <span class="string">"新增用户"</span>;</span><br><span class="line"><span class="comment">//5、发布消息</span></span><br><span class="line">String routingKeyByAdd = <span class="string">"user.add"</span>;</span><br><span class="line">channel.basicPublish(EXCHANGE_NAME, routingKeyByAdd, <span class="keyword">null</span>, messageByAdd.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + messageByAdd + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、定义消息内容</span></span><br><span class="line">String messageByDel = <span class="string">"新增用户"</span>;</span><br><span class="line"><span class="comment">//5、发布消息</span></span><br><span class="line">String routingKeyByDel = <span class="string">"user.delete"</span>;</span><br><span class="line">channel.basicPublish(EXCHANGE_NAME, routingKeyByDel, <span class="keyword">null</span>, messageByDel.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + messageByDel + <span class="string">"'"</span>);</span><br><span class="line"><span class="comment">//6、关闭信道</span></span><br><span class="line">channel.close();</span><br><span class="line"><span class="comment">//7、关闭连接</span></span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、创建消息消费者1：Recv-1-java-4"><a href="#2、创建消息消费者1：Recv-1-java-4" class="headerlink" title="2、创建消息消费者1：Recv_1.java"></a>2、创建消息消费者1：Recv_1.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"topic_queue_1"</span>;</span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、将队列绑定到交换机</span></span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"user.add"</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"><span class="comment">//5、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="string">" [Recv_1] - "</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//7、监听队列-关闭自动确认</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建消息消费者2：Recv-2-java-4"><a href="#3、创建消息消费者2：Recv-2-java-4" class="headerlink" title="3、创建消息消费者2：Recv_2.java"></a>3、创建消息消费者2：Recv_2.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"topic_queue_2"</span>;</span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line"><span class="comment">//2、声明信道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//3、声明队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//4、将队列绑定到交换机</span></span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"user.#"</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"><span class="comment">//5、定义队列的消费者</span></span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//6、获取消息</span></span><br><span class="line">System.out.println(<span class="string">" [Recv_1] - "</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//7、监听队列-关闭自动确认</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、测试结果-3"><a href="#4、测试结果-3" class="headerlink" title="4、测试结果"></a>4、测试结果</h2><p>生产者发布消息绑定的路由key为<strong>user.add</strong>和<strong>user.delete</strong>。消费者1绑定队列和交换机绑定路由key为<strong>user.add</strong>；消费者2绑定队列和交换机绑定路由key为<strong>user.#</strong>。</p><p>所以我们可以猜测生产者发送的消息，消费者1能够接收并消费新增用户的消息，而消费者2能接收新增和删除用户的消息。</p><p><strong>生产者</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent &apos;新增用户&apos;</span><br><span class="line">[x] Sent &apos;删除用户&apos;</span><br></pre></td></tr></table></figure><p><strong>消费者1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Recv_1] - 新增用户</span><br></pre></td></tr></table></figure><p><strong>消费者2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Recv_1] - 新增用户</span><br><span class="line">[Recv_1] - 删除用户</span><br></pre></td></tr></table></figure><h1 id="十、RabbitMQ-消息应答ack机制"><a href="#十、RabbitMQ-消息应答ack机制" class="headerlink" title="十、RabbitMQ - 消息应答ack机制"></a>十、RabbitMQ - 消息应答ack机制</h1><h2 id="1、创建消息发送者：Send-java-5"><a href="#1、创建消息发送者：Send-java-5" class="headerlink" title="1、创建消息发送者：Send.java"></a>1、创建消息发送者：Send.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"simple_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>, <span class="keyword">false</span>);</span><br><span class="line">String message = <span class="string">"ack_test"</span>;</span><br><span class="line">channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、自动应答-创建消息消费者：RecvAutoAck-java"><a href="#2、自动应答-创建消息消费者：RecvAutoAck-java" class="headerlink" title="2、自动应答-创建消息消费者：RecvAutoAck.java"></a>2、自动应答-创建消息消费者：RecvAutoAck.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecvAutoAck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"simple_queue"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"simple_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">" [Recv_1] - "</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//开启自动应答机制</span></span><br><span class="line"><span class="keyword">boolean</span> autoAck = <span class="keyword">true</span>;</span><br><span class="line">channel.basicConsume(QUEUE_NAME, autoAck, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、手动应答-创建消息消费者：RecvBasicAck-java"><a href="#3、手动应答-创建消息消费者：RecvBasicAck-java" class="headerlink" title="3、手动应答-创建消息消费者：RecvBasicAck.java"></a>3、手动应答-创建消息消费者：RecvBasicAck.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecvBasciAck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"simple_queue"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"simple_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">" [Recv_1] - "</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line"><span class="comment">//手动应答</span></span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//关闭自动应答机制</span></span><br><span class="line"><span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</span><br><span class="line">channel.basicConsume(QUEUE_NAME, autoAck, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法1：basicAck（确认收到一个或多个消息）"><a href="#方法1：basicAck（确认收到一个或多个消息）" class="headerlink" title="方法1：basicAck（确认收到一个或多个消息）"></a>方法1：basicAck（确认收到一个或多个消息）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//deliveryTag：该消息的index</span></span><br><span class="line"><span class="comment">//multiple：是否批量.true：将一次性ack所有小于deliveryTag的消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicAck</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><h3 id="方法2：basicReject（拒绝一条收到的消息-单条拒绝）"><a href="#方法2：basicReject（拒绝一条收到的消息-单条拒绝）" class="headerlink" title="方法2：basicReject（拒绝一条收到的消息-单条拒绝）"></a>方法2：basicReject（拒绝一条收到的消息-单条拒绝）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//deliveryTag:该消息的index</span></span><br><span class="line"><span class="comment">//requeue：被拒绝的是否重新入队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicReject</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> requeue)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><h3 id="方法3：basicNack（拒绝一条或多条收到的消息-批量拒绝）"><a href="#方法3：basicNack（拒绝一条或多条收到的消息-批量拒绝）" class="headerlink" title="方法3：basicNack（拒绝一条或多条收到的消息-批量拒绝）"></a>方法3：basicNack（拒绝一条或多条收到的消息-批量拒绝）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//deliveryTag:该消息的index</span></span><br><span class="line"><span class="comment">//multiple：是否批量.true:将一次性拒绝所有小于deliveryTag的消息。</span></span><br><span class="line"><span class="comment">//requeue：被拒绝的是否重新入队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicNack</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple, <span class="keyword">boolean</span> requeue)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><h3 id="方法4：basicRecover（重新发送到队列中）"><a href="#方法4：basicRecover（重新发送到队列中）" class="headerlink" title="方法4：basicRecover（重新发送到队列中）"></a>方法4：basicRecover（重新发送到队列中）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//requeue：被拒绝的是否重新入队列</span></span><br><span class="line">Basic.<span class="function">RecoverOk <span class="title">basicRecover</span><span class="params">(<span class="keyword">boolean</span> requeue)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><h2 id="4、注意"><a href="#4、注意" class="headerlink" title="4、注意"></a>4、注意</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - inequivalent arg &apos;durable&apos; for queue &apos;simple_queue&apos; in vhost &apos;/virtual_test&apos;: received &apos;false&apos; but current is &apos;true&apos;, class-id=50, method-id=10)</span><br><span class="line">at com.rabbitmq.client.impl.ChannelN.asyncShutdown(ChannelN.java:516)</span><br><span class="line">at com.rabbitmq.client.impl.ChannelN.processAsync(ChannelN.java:346)</span><br><span class="line">at com.rabbitmq.client.impl.AMQChannel.handleCompleteInboundCommand(AMQChannel.java:182)</span><br><span class="line">at com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:114)</span><br><span class="line">at com.rabbitmq.client.impl.AMQConnection.readFrame(AMQConnection.java:672)</span><br><span class="line">at com.rabbitmq.client.impl.AMQConnection.access$300(AMQConnection.java:48)</span><br><span class="line">at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:599)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><p>以上异常是由于修改了队列的应答模式，需要删除之前的队列，或者重新定义新的队列，因为队列和交换机的一些属性一旦定义，就不允许修改。</p><h1 id="十一、RabbitMQ-消息的持久性"><a href="#十一、RabbitMQ-消息的持久性" class="headerlink" title="十一、RabbitMQ - 消息的持久性"></a>十一、RabbitMQ - 消息的持久性</h1><p>在正常的服务器运行过程中，时常会面临服务器宕机重启的情况，那么我们的消息此时会如何呢？很不幸的事情就是，我们的消息可能会消失，这肯定不是我们希望见到的结果。所以我们希望AMQP服务器崩溃了也可以将消息恢复，这称之为消息持久化。RabbitMQ自然存在这种策略可以帮助我们完成这件事情。</p><p>如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue、Exchange与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。当然还是会有一些小概率事件会导致消息丢失。</p><h2 id="1、交换机持久化"><a href="#1、交换机持久化" class="headerlink" title="1、交换机持久化"></a>1、交换机持久化</h2><h3 id="创建消息发送者代码：Send-java"><a href="#创建消息发送者代码：Send-java" class="headerlink" title="创建消息发送者代码：Send.java"></a>创建消息发送者代码：Send.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"simple_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//声明交换机-并开启交换机的持久化策略</span></span><br><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>, durable);</span><br><span class="line">String message = <span class="string">"exchange_durable_test"</span>;</span><br><span class="line">channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关闭交换机持久化策略：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">false</span>;</span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">""</span>, durable);</span><br></pre></td></tr></table></figure><p><strong>开启交换机持久化策略：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">""</span>, durable);</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>设置durable = <strong>false</strong>时;运行<strong>Send.java</strong>，进入控制台我们可以看到我们刚刚创建交换机，然后执行rabbitmq-service stop命令停止RabbitMQ服务，再执行 rabbitmq-service start命令启动RabbitMQ服务，进入控制台我们可以发现刚刚我们创建的交换机消失了。</p><p>设置durable = <strong>true</strong>;重复上述步骤，我们可以发现我们的交换机持久化策略已经生效。</p><h2 id="2、队列持久化"><a href="#2、队列持久化" class="headerlink" title="2、队列持久化"></a>2、队列持久化</h2><h3 id="创建消息发送者代码：Send-java（引用上一步的代码）"><a href="#创建消息发送者代码：Send-java（引用上一步的代码）" class="headerlink" title="创建消息发送者代码：Send.java（引用上一步的代码）"></a>创建消息发送者代码：Send.java（引用上一步的代码）</h3><h3 id="创建消息消费者代码：Recv-java"><a href="#创建消息消费者代码：Recv-java" class="headerlink" title="创建消息消费者代码：Recv.java"></a>创建消息消费者代码：Recv.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringQUEUE_NAME= <span class="string">"simple_queue"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringEXCHANGE_NAME= <span class="string">"simple_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//声明队列-并开启队列的持久化策略</span></span><br><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">false</span>;</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, durable, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line">DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">" [Recv_1] - "</span> + <span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关闭队列持久化策略：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">false</span>;</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, durable, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p><strong>开启队列持久化策略：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, durable, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><p>设置durable = <strong>false</strong>时;运行<strong>Recv.java</strong>，进入控制台我们可以看到我们刚刚创建交换机，然后执行rabbitmq-service stop命令停止RabbitMQ服务，再执行 rabbitmq-service start命令启动RabbitMQ服务，进入控制台发现刚刚创建的队列依然存在，这是为什么呢，已经关闭了持久化策略，原因是我们的消费端还一直处于监听队列的状态，再我们重启RabbitMQ之后立马又帮我们声明了这个队列，那如果消费端也宕机了，我们这里先关闭消费端的监听，再重启查看，发现果然如预想的一样，队列已经不存在了。</p><p>设置durable = <strong>true</strong>;重复上述步骤，发现我们的队列依然存在，队列持久化策略已经生效。</p><p>简单队列和Work Queue由于没有使用到交换机，所以队列的声明是在发送者端完成的；Publish/Subscribe、Routing、Topics由于用到了交换机，所以队列的声明在消费者端，消费者端再将各自的队列绑定到交换机；这两种情况都不影响队列的持久化，它们的持久化策略和方式都是一样的。</p><h2 id="3、消息持久化"><a href="#3、消息持久化" class="headerlink" title="3、消息持久化"></a>3、消息持久化</h2><h3 id="修改消息发送者代码：Send-java"><a href="#修改消息发送者代码：Send-java" class="headerlink" title="修改消息发送者代码：Send.java"></a>修改消息发送者代码：Send.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义交换机名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"simple_exchange"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//声明交换机-并开启交换机的持久化策略</span></span><br><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>, durable);</span><br><span class="line">String message = <span class="string">"durable_test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传送模式-标记持久化</span></span><br><span class="line"><span class="keyword">int</span> deliveryMode = <span class="number">2</span>;</span><br><span class="line">AMQP.BasicProperties basicProperties = <span class="keyword">new</span> AMQP.BasicProperties().builder().deliveryMode(deliveryMode).build();</span><br><span class="line">channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, basicProperties, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AMQP.BasicProperties 提供了一个构造器，可以通过builder() 来设置一些属性；可以通过AMQP.BasicProperties 来设置消息的一些属性，更多属性设置参见<a href="https://rabbitmq.github.io/rabbitmq-java-client/api/current/" target="_blank" rel="noopener"><strong>官方API文档</strong></a>。</p><p>运行上一个例子的Send.java时，重启RabbitMQ服务后发现我们发布的消息消失了，运行本例，重启RabbitMQ服务后消息依然存在，可以证明我们的消息持久化策略也已经生效。</p><p>将消息以持久化方式发布时，会对性能造成一定的影响（就像数据库操作一样，健壮性的存在必定造成一些性能牺牲）。</p><h2 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h2><p>当RabbitMQ服务器重启后，原先的队列和交换器会随同里面的消息一同消失。原因在于每个队列和交换器都有durable属性，该属性默认是false，它决定了RabbitMQ是否需要在崩溃或者重启之后重新创建队列或者交换器。将它设置为true就代表了持久性，在服务器重启之后就会重新持久的创建队列和交换器。</p><p>当然做到这点还不够，我们需要的是持久化的消息，所以在消息发布前，通过将消息的“投递模式”(delivery mode)属性设置为2将消息标记为持久化。到目前为止，消息还只是被表示为持久化，还需要被发布到持久化的交换器中并到达持久化的队列中才行。如果不是这样，包含持久化消息的队列或者交换器挥着Rabbit崩溃重启后不复存在，导致消息成为一个孤儿。因此，总结起来需要做到以下三点：</p><ol><li>将消息的投递模式选项设置为2(持久)；</li><li>将消息发送到持久化的交换器；</li><li>消息到达持久化的队列。</li></ol><p><strong>注意，如果原先有非持久的交换器或者队列，需要删除后才可重新创建，否则就创建其他名称的交换器或者队列。</strong></p><h1 id="十二、RabbitMQ-–消息确认机制"><a href="#十二、RabbitMQ-–消息确认机制" class="headerlink" title="十二、RabbitMQ –消息确认机制"></a>十二、RabbitMQ –消息确认机制</h1><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553597763131.png" alt="1553597763131"></p><p>正常情况下，如果消息经过交换器进入队列就可以完成消息的持久化，但如果消息在没有到达RabbitMQ服务器Broker之前出现意外，那就造成消息丢失，有没有办法可以解决这个问题？</p><p>RabbitMQ有两种方式来解决这个问题：</p><p>通过AMQP提供的事务机制实现；</p><p>使用发送者确认模式实现；</p><h2 id="1、事务机制"><a href="#1、事务机制" class="headerlink" title="1、事务机制"></a>1、事务机制</h2><p>事务的实现主要是对信道（Channel）的设置，主要的方法有三个：</p><ol><li><p>channel.txSelect() 声明启动事务模式；</p></li><li><p>channel.txComment() 提交事务；</p></li><li><p>channel.txRollback() 回滚事务；</p></li></ol><h3 id="发送者使用事务"><a href="#发送者使用事务" class="headerlink" title="发送者使用事务"></a>发送者使用事务</h3><h4 id="创建消息发送者代码：Send-java-1"><a href="#创建消息发送者代码：Send-java-1" class="headerlink" title="创建消息发送者代码：Send.java"></a>创建消息发送者代码：Send.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"transaction_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">String message = <span class="string">"transaction_test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1、声明事务</span></span><br><span class="line">channel.txSelect();</span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"><span class="comment">//除以0，模拟异常，使用rabbitmq默认交换机</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"><span class="comment">//2、提交事务</span></span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//3、回滚事务</span></span><br><span class="line">channel.txRollback();</span><br><span class="line">System.out.println(<span class="string">"回滚事务："</span> + e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码我们可以看出，在发送消息之前的代码和之前介绍的都是一样的，只是在发送消息之前，需要声明channel为事务模式，提交或者回滚事务即可。</p><h3 id="消费者使用事务"><a href="#消费者使用事务" class="headerlink" title="消费者使用事务"></a>消费者使用事务</h3><p>假设消费者模式中使用了事务，并且在消息确认之后进行了事务回滚，那么RabbitMQ会产生什么样的变化？</p><p>结果分为两种情况：</p><ul><li><p>autoAck=false手动应对的时候是支持事务的，也就是说即使你已经手动确认了消息已经收到了，但在确认消息会等事务的返回解决之后，在做决定是确认消息还是重新放回队列，如果你手动确认现在之后，又回滚了事务，那么已事务回滚为主，此条消息会重新放回队列；</p></li><li><p>autoAck=true如果自定确认为true的情况是不支持事务的，也就是说你即使在收到消息之后在回滚事务也是于事无补的，队列已经把消息移除了；</p></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>事务模式的性能很差，那有没有既能保证消息的可靠性又能兼顾性能的解决方案呢？那就是接下来要讲的Confirm发送方确认模式。</p><h2 id="2、Confirm发送方确认模式"><a href="#2、Confirm发送方确认模式" class="headerlink" title="2、Confirm发送方确认模式"></a>2、Confirm发送方确认模式</h2><p>Confirm发送方确认模式使用和事务类似，也是通过设置Channel进行发送方确认的。</p><p>Confirm的三种实现方式：</p><ol><li><p>channel.waitForConfirms() 普通发送方确认模式；</p></li><li><p>channel.waitForConfirmsOrDie() 批量确认模式；</p></li><li><p>channel.addConfirmListener() 异步监听发送方确认模式；</p></li></ol><h3 id="方式一：普通Confirm模式：SendConfirm-java"><a href="#方式一：普通Confirm模式：SendConfirm-java" class="headerlink" title="方式一：普通Confirm模式：SendConfirm.java"></a>方式一：普通Confirm模式：SendConfirm.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendConfirm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"confirm_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">String message = <span class="string">" confirm_test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启发送方确认模式</span></span><br><span class="line">channel.confirmSelect();</span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (channel.waitForConfirms()) &#123;</span><br><span class="line">System.out.println(<span class="string">"消息发送成功"</span> );</span><br><span class="line">&#125;</span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看代码可以知道，我们只需要在推送消息之前，channel.confirmSelect()声明开启发送方确认模式，再使用channel.waitForConfirms()等待消息被服务器确认即可。</p><h3 id="方式二：批量Confirm模式：SendBatchConfirm-java"><a href="#方式二：批量Confirm模式：SendBatchConfirm-java" class="headerlink" title="方式二：批量Confirm模式：SendBatchConfirm.java"></a>方式二：批量Confirm模式：SendBatchConfirm.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendBatchConfirm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"confirm_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">String message = <span class="string">" confirm_test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启发送方确认模式</span></span><br><span class="line">channel.confirmSelect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"' - "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直到所有信息都发布，只要有一个未确认就会IOException</span></span><br><span class="line">channel.waitForConfirmsOrDie();</span><br><span class="line">System.out.println(<span class="string">"消息发送成功"</span>);</span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码可以看出来channel.waitForConfirmsOrDie()，使用同步方式等所有的消息发送之后才会执行后面代码，只要有一个消息未被确认就会抛出IOException异常。</p><h3 id="方式三：异步Confirm模式：SendAsynConfirm-java"><a href="#方式三：异步Confirm模式：SendAsynConfirm-java" class="headerlink" title="方式三：异步Confirm模式：SendAsynConfirm.java"></a>方式三：异步Confirm模式：SendAsynConfirm.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConfirmListener;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> cn.dj.rabbitmq.util.ConnectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendAsynConfirm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"confirm_queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启发送方确认模式</span></span><br><span class="line">channel.confirmSelect();</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步监听确认和未确认的消息</span></span><br><span class="line">channel.addConfirmListener(<span class="keyword">new</span> ConfirmListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNack</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"未确认消息，标识："</span> + deliveryTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAck</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//这里设置秒延迟，便于观察</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(String.format(<span class="string">"已确认消息，标识：%d，多个消息：%b"</span>, deliveryTag, multiple));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">String message = <span class="string">"confirm_test"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"' - "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"程序执行结束"</span>);</span><br><span class="line"></span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步模式的优点，就是执行效率高，不需要等待消息执行完，只需要监听消息即可，以上异步返回的信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> [x] Sent &apos;confirm_test&apos; - 0</span><br><span class="line"> [x] Sent &apos;confirm_test&apos; - 1</span><br><span class="line"> [x] Sent &apos;confirm_test&apos; - 2</span><br><span class="line"> [x] Sent &apos;confirm_test&apos; - 3</span><br><span class="line"> [x] Sent &apos;confirm_test&apos; - 4</span><br><span class="line">程序执行结束</span><br><span class="line">已确认消息，标识：1，多个消息：false</span><br></pre></td></tr></table></figure><h1 id="十三、RabbitMQ-–-Spring集成-XML版本"><a href="#十三、RabbitMQ-–-Spring集成-XML版本" class="headerlink" title="十三、RabbitMQ – Spring集成-XML版本"></a>十三、RabbitMQ – Spring集成-XML版本</h1><h2 id="1、新建Maven项目，修改pom-xml"><a href="#1、新建Maven项目，修改pom-xml" class="headerlink" title="1、新建Maven项目，修改pom.xml"></a>1、新建Maven项目，修改pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-spring-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>rabbitmq-spring-xml<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>rabbitmq-spring-xml<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、新建spring-rabbitmq-xml配置文件"><a href="#2、新建spring-rabbitmq-xml配置文件" class="headerlink" title="2、新建spring-rabbitmq.xml配置文件"></a>2、新建spring-rabbitmq.xml配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/rabbit/spring-rabbit-1.7.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1、配置Rabbit连接工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"127.0.0.1"</span> <span class="attr">port</span>=<span class="string">"5672"</span> <span class="attr">virtual-host</span>=<span class="string">"/virtual_test"</span> <span class="attr">username</span>=<span class="string">"djtest"</span> <span class="attr">password</span>=<span class="string">"djtest"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2、创建Rabbit消息队列模版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"amqpTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">exchange</span>=<span class="string">"fanoutExchange"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3、MQ的管理，包括队列、交换机等 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4、定义队列，自动声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">"spring_rabbit_queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span> <span class="attr">durable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5、定义交换机，自动声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:fanout-exchange</span> <span class="attr">id</span>=<span class="string">"fanoutExchange"</span> <span class="attr">name</span>=<span class="string">"fanoutExchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 6、绑定队列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"spring_rabbit_queue"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:fanout-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 7、队列监听 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"testConsumer1"</span> <span class="attr">method</span>=<span class="string">"listen"</span> <span class="attr">queue-names</span>=<span class="string">"spring_rabbit_queue"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;rabbit:listener ref="testConsumer2" queue-names="spring_rabbit_queue" /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 8、消费者 </span></span><br><span class="line"><span class="comment">消费者1：采用指定监听方法的方式</span></span><br><span class="line"><span class="comment">消费者2：采用实现接口的方式、无需指定方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testConsumer1"</span> <span class="attr">class</span>=<span class="string">"cn.dj.rabbit.consumer.TestConsumer1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean id="testConsumer2" class="cn.dj.rabbit.consumer.TestConsumer2"&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、新建消费者"><a href="#3、新建消费者" class="headerlink" title="3、新建消费者"></a>3、新建消费者</h2><h4 id="TestConsumer1-java（指定方法方式）"><a href="#TestConsumer1-java（指定方法方式）" class="headerlink" title="TestConsumer1.java（指定方法方式）"></a>TestConsumer1.java（指定方法方式）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer1</span> </span>&#123;</span><br><span class="line"><span class="comment">//监听方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"收到消息===&gt;"</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TestConsumer2-java（实现接口方式）"><a href="#TestConsumer2-java（实现接口方式）" class="headerlink" title="TestConsumer2.java（实现接口方式）"></a>TestConsumer2.java（实现接口方式）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer2</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"收到消息===&gt;"</span> + <span class="keyword">new</span> String(msg.getBody(), <span class="string">"utf-8"</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、新建启动类：SpringMain-java"><a href="#4、新建启动类：SpringMain-java" class="headerlink" title="4、新建启动类：SpringMain.java"></a>4、新建启动类：SpringMain.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">AbstractApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring-rabbitmq.xml"</span>);</span><br><span class="line">RabbitTemplate template = context.getBean(RabbitTemplate.class);</span><br><span class="line">template.convertAndSend(<span class="string">"hello spring-rabbit"</span>);</span><br><span class="line">context.destroy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、测试结果"><a href="#5、测试结果" class="headerlink" title="5、测试结果"></a>5、测试结果</h2><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553598029769.png" alt="1553598029769"></p><h2 id="6、注意"><a href="#6、注意" class="headerlink" title="6、注意"></a>6、注意</h2><p>以上消费者代码实现方式在<strong>spring-rabbit 2.0.0.RELEASE</strong>及以上版本启动会报错，具体原因尚未查明。</p><h1 id="十四、RabbitMQ-Spring集成-注解版本"><a href="#十四、RabbitMQ-Spring集成-注解版本" class="headerlink" title="十四、RabbitMQ - Spring集成-注解版本"></a>十四、RabbitMQ - Spring集成-注解版本</h1><p>敬请期待</p><h1 id="十五、RabbitMQ-SpringBoot集成"><a href="#十五、RabbitMQ-SpringBoot集成" class="headerlink" title="十五、RabbitMQ - SpringBoot集成"></a>十五、RabbitMQ - SpringBoot集成</h1><p>敬请期待</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于 RabbitMQ 的五种队列，其实实际使用最多的是最后一种主题模式，通过模糊匹配，使得操作更加自如。那么我们总结一下有交换器参与的队列（最后三种队列）工作方式如下：</p><p><img src="/2017-03-21/RabbitMQ超详细教程.htm/1553598103778.png" alt="1553598103778"></p><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="https://github.com/amorous/RabbitMQ/tree/master/rabbitmq" target="_blank" rel="noopener">基础示例代码</a></p><p><a href="https://github.com/amorous/RabbitMQ/tree/master/rabbitmq-spring-xml" target="_blank" rel="noopener">RabbitMQ与Spring集成XML版本代码</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="RabbitMQ" scheme="https://www.amorou.cn/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="https://www.amorou.cn/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>第一十一章：SpringBoot整合其他服务</title>
    <link href="https://www.amorou.cn/2017-02-25/%E7%AC%AC%E4%B8%80%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9ASpringBoot%E6%95%B4%E5%90%88%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://www.amorou.cn/2017-02-25/第一十一章：SpringBoot整合其他服务.html</id>
    <published>2017-02-25T09:48:43.000Z</published>
    <updated>2019-08-11T00:53:48.667Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>在进行项目开发的时候经常遇见以下的几个问题：需要进行邮件发送、定时任务调度、系统的监控处理，实际上这些操作都可以通过SpringBoot进行整合操作。</p><h1 id="一、邮件服务"><a href="#一、邮件服务" class="headerlink" title="一、邮件服务"></a>一、邮件服务</h1><p>如果要进行邮件的整合处理，一定需要一个邮件服务器，实际上java本身提供有一套JavaMail主键以实现邮件服务器的搭建，但是这个搭建的服务器意义不大，你因为现在搭建完成了，向一些大型的站点发送一封右键，若干小时你就会被拉黑，如果不想拉黑彼此之间就做一个白名单即可。</p><p>那么如果现在自己搭建右键服务器不行，就可以考虑使用QQ邮件服务器、网易右键服务，本次可以申请一个QQ邮箱服务器，如果要申请你一定要登录你自己的QQ邮箱。</p><p><img src="/2017-02-25/第一十一章：SpringBoot整合其他服务.htm/1553593957531.png" alt="1553593957531"></p><p><img src="/2017-02-25/第一十一章：SpringBoot整合其他服务.htm/1553593970890.png" alt="1553593970890"></p><p><img src="/2017-02-25/第一十一章：SpringBoot整合其他服务.htm/1553593974927.png" alt="1553593974927"></p><p><img src="/2017-02-25/第一十一章：SpringBoot整合其他服务.htm/1553593979150.png" alt="1553593979150"></p><p>1、如果要想实现邮件的发送服务，则首先要导入一个依赖的支持库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、修改项目中的application.yml配置文件，实现邮件的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mail:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">xxxxxxxx@qq.com</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">kppavkgkrwnhbjbg</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line">      <span class="string">main.smtp.auth:</span> <span class="literal">true</span></span><br><span class="line">      <span class="string">mail.smtp.strttls.enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="string">mail.smtp.strttls.required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3、编写测试类，直接编写mail服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.StartSpringBootMain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMail</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMail</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// 要发送的消息内容</span></span><br><span class="line">SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">message.setFrom(<span class="string">"发送邮件的帐号：send@qq.com"</span>);</span><br><span class="line">message.setTo(<span class="string">"接收邮件的帐号：receive@qq.com"</span>);</span><br><span class="line">message.setSubject(<span class="string">"测试邮件（来自老李的祝福）"</span>);</span><br><span class="line">message.setText(<span class="string">"好好学习，天天向上"</span>);</span><br><span class="line"><span class="keyword">this</span>.javaMailSender.send(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、定时任务调度"><a href="#二、定时任务调度" class="headerlink" title="二、定时任务调度"></a>二、定时任务调度</h1><p>现在绝大部分系统开发之中个都会涉及到定时调度的话题，对于定时调度的实际开发之中可以使用：TimerTask、Quartz、SpringTask配置，这里面最简单的配置就是Spring自己所提供的Task处理。</p><p>1、如果要实现定时调度，只需要配置一个定时调度的主键类即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyScheduler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用间隔调度，每2秒执行一次</span></span><br><span class="line"><span class="meta">@Scheduled</span>(fixedRate = <span class="number">2000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runJobA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyTaskA --- 间隔："</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每秒执行一次</span></span><br><span class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"* * * * * ?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runJoB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.err.println(<span class="string">"MyTaskB --- 间隔："</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果现在要想执行此任务，那么还需要一个基本的前提：你的程序启东类上一定要启用调度处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartSpringBootMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(StartSpringBootMain.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候所实现的任务调度只是串行任务调度，也就是说所有的任务是一个一个执行的，那么如果现在有一个任务所话费的时间特别的长，则其他的任务都会排队等待，实际开发中这种方式明显不符合我们的需求。</p><p>3、如果想要启用冰心的调度处理，则一定要准备出一个线程调度池，现在写一个线程调度的配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.SchedulingConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.ScheduledTaskRegistrar;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">// 定时调度的配置类一定要实现指定的父接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerConfig</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 开启一个线程调度池</span></span><br><span class="line">taskRegistrar.setScheduler(Executors.newScheduledThreadPool(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以后所编写的定时任务调度的时候一定要准备好一个线程池，这样才能够让多个任务并行执行。</p><h1 id="三、Actuator监控"><a href="#三、Actuator监控" class="headerlink" title="三、Actuator监控"></a>三、Actuator监控</h1><p>对于SpringBoot中服务的监控在SpringBoot开发框架之中提供有一个Actuator监控程序，但是这个监控在很多时候的使用有一些矛盾，对于此类的信息服务，一般而言会有两类信息：</p><ul><li><p>第一类是由系统直接提供的信息，这个需要关闭安全控制；</p></li><li><p>第二类是由用户定义的，希望可以返回固定的一些信息，例如：版本、服务名称等。</p></li></ul><p><img src="/2017-02-25/第一十一章：SpringBoot整合其他服务.htm/1553593979151.png" alt="img"></p><p>1、如果现在要想在代码中启动Actuator服务，那么首先一定要进行开发包的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、此时配置此依赖包的项目就具有了监控的能力，但是这个能力无法直接体现，如果现在要想打开默认的系统的这些监控信息，则需要修改application.yml配置文件，关闭掉当前的安全配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span>  <span class="comment"># 现在关闭系统的安全配置</span></span><br></pre></td></tr></table></figure><p>3、但是如果现在将系统的安全配置关闭之后，此时你的系统的服务信息就有可能被任何人看见，那么不希望被所有人看见，但是又希望所有人可以看见一部分的提示信息，所以在这样的状态下，就需要去考虑自定义一些服务信息，例如，现在先进行健康信息的配置：</p><p>范例：定义一个健康配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.actuator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.Health;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.HealthIndicator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Health.up().withDetail(<span class="string">"info"</span>, <span class="string">"Hello World!!!"</span>).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是发现这种健康的信息配置是需要关闭安全策略之后才能够发现更加详细的内容，而如果开启了安全策略之后可以看到的信息只能够是一些基础的状态：UP（存活）、DOWN（关闭）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.actuator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.Health;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.HealthIndicator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> errorCode = <span class="number">100</span>;<span class="comment">// 这个错误码是通过其他程序获得的</span></span><br><span class="line"><span class="keyword">if</span> (errorCode != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Health.down().withDetail(<span class="string">"Error Code"</span>, errorCode).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Health.up().build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、除了健康之外，还有一巷数据很重要，就是一些服务的信息（“/info”）.而这些服务的信息可以直接通过application.yml文件配置，修改application.yml要按照指定的格式完成：</p><ul><li>对于这样的配置信息最好的方式就是进行pom.xml文件的读取，所以如果要想实现这种关联操作必须修改microboot项目中的pom.xml文件，追加有一个访问的插件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>$<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.tld<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.p12<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改application.yml配置文件，追加详细信息：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="string">app.name:</span> <span class="string">actuator-microboot</span></span><br><span class="line">  <span class="string">app.version:</span> <span class="string">v1.0.0</span></span><br><span class="line">  <span class="string">company.name:</span> <span class="string">www.xxx.cn</span></span><br><span class="line">  <span class="string">pom.artifactId:</span> <span class="string">$project.artifactId$</span></span><br><span class="line">  <span class="string">pom.version:</span> <span class="string">$project.version$</span></span><br></pre></td></tr></table></figure><p>5、由于在开发之中这种提示信息会成为为服务的重要组成部分，所以很多时候重复进行配置文件的定义，那么会比较麻烦，最贱的做法直接做一个配置程序类进行信息的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.info.Info.Builder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectInfoContributor</span> <span class="keyword">implements</span> <span class="title">InfoContributor</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contribute</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">builder.withDetail(<span class="string">"company.name"</span>, <span class="string">"www.xxx.cn"</span>);</span><br><span class="line">builder.withDetail(<span class="string">"version"</span>, <span class="string">"v1.0.0"</span>);</span><br><span class="line">builder.withDetail(<span class="string">"author"</span>, <span class="string">"Tom"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后在实际的开发之中，为了不重复编写一些配置信息，往往会将配置信息放在统一的一个模块里面，需要的时候进行互相引用即可。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第十章：SpringBoot整合消息服务</title>
    <link href="https://www.amorou.cn/2017-02-19/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9ASpringBoot%E6%95%B4%E5%90%88%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://www.amorou.cn/2017-02-19/第十章：SpringBoot整合消息服务.html</id>
    <published>2017-02-19T09:35:42.000Z</published>
    <updated>2019-08-11T00:53:48.735Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>对于异步消息组件在实际的应用之中会有两类：</p><ul><li><p>JMS：代表作就是ActiveMQ，但是其性能不高，因为其是用java程序实现的；</p></li><li><p>AMQB：直接利用协议实现的消息组件，其广谱代表作：RabbitMQ，高性能代表作：Kafka。</p></li></ul><h1 id="一、整合ActiveMQ组件"><a href="#一、整合ActiveMQ组件" class="headerlink" title="一、整合ActiveMQ组件"></a>一、整合ActiveMQ组件</h1><p>1、如果要想在项目中使用ActiveMQ组件，则应该为项目添加依赖支持库，修改pom.xml配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、修改application.yml配置文件进行activemq的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jms:</span></span><br><span class="line"><span class="attr">    pub-sub-domain:</span> <span class="literal">false</span> <span class="comment">#配置消息的类型，如果是true则表示为topic消息，如果为false则是Queue消息</span></span><br><span class="line"><span class="attr">  activemq:</span></span><br><span class="line"><span class="attr">    user:</span> <span class="string">activemq</span>  <span class="comment">#连接用户名</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">hello</span> <span class="comment">#连接密码</span></span><br><span class="line"><span class="attr">    broker-url:</span> <span class="attr">tcp://activemq-server:61616</span> <span class="comment">#消息组件的连接主机信息</span></span><br></pre></td></tr></table></figure><p>3、随后定义一个消息的消费者，消费者主要进行一个监听控制，在SpringBoot里面可以直接利用注解进行监听：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.JmsListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConsumerService</span> </span>&#123;</span><br><span class="line"><span class="comment">// 进行消息接收处理</span></span><br><span class="line"><span class="meta">@JmsListener</span>(destination = <span class="string">"activemq.msg.queue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">System.err.println(<span class="string">"【*** 接收消息 ***】"</span> + text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、随后建立消息的发送则服务，一般而言如果进行消息的发送往往会准备出一个业务接口来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProducerService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、随后建立一个配置程序类，定义ActiveMQ的消息发送模版处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.command.ActiveMQQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.EnableJms;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJms</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(<span class="string">"activemq.msg.queue"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、创建消息发送的子类，实现消息的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.producer.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.producer.IMessageProducerService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProducerServiceImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProducerService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> Queue queue;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jmsMessagingTemplate.convertAndSend(<span class="keyword">this</span>.queue, msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、编写测试类来观察消息的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.StartSpringBootMain;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.producer.IMessageProducerService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveMQ</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IMessageProducerService messageProducer;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">this</span>.messageProducer.sendMessage(<span class="string">"hello world: "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于SpringBoot配置的JMS的组件访问整体的处理十分简单。</p><h1 id="二、整合RabbitMQ组件"><a href="#二、整合RabbitMQ组件" class="headerlink" title="二、整合RabbitMQ组件"></a>二、整合RabbitMQ组件</h1><p>如果要进行RabbitMQ整合的时候一定要注意以下几个概念：交换空间、虚拟主机、队列信息。</p><p>本次为了方便起见，将项目分为两个：RabbitMQ-Consumer、RabbitMQ-Producer。</p><p>1、【两个项目】将rabbitmq的依赖支持包拷贝到项目之中；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、【microboot-rabbitmq-producer、microboot-rabbitmq-consumer】修改application.yml配置文件，追加rabbitmq的相关配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    addresses:</span> <span class="string">rabbitmq-server</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>3、【microboot-rabbitmq-producer】建立一个消息的发送接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProducerService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、【microboot-rabbitmq-producer】为了可以正常使用RabbitMQ进行消息处理，还需要做一个消息生产配置类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// 交换空间名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE = <span class="string">"rabbitmq.microboot.exchange"</span>;</span><br><span class="line"><span class="comment">// 设置路由key</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTINGKEY = <span class="string">"rabbitmq.microboot.routingkey"</span>;</span><br><span class="line"><span class="comment">// 队列名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"rabbitmq.microboot.queue"</span>;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchangeQueue</span><span class="params">(DirectExchange exchange, Queue queue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTINGKEY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用直连的模式</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">getDirectExchage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(EXCHANGE, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要创建的队列信息</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、【microboot-rabbitmq-producer】创建消息服务的实现子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.producer.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.config.ProducerConfig;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.producer.IMessageProducerService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProducerServiceImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProducerService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rabbitTemplate.convertAndSend(ProducerConfig.EXCHANGE, ProducerConfig.ROUTINGKEY, msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、【microboot-rabbitmq-consumer】依然需要做一个消费者的配置程序类，而这个程序类里面主要的目的依然是设置交换空间、路由KEY等信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// 交换空间名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE = <span class="string">"rabbitmq.microboot.exchange"</span>;</span><br><span class="line"><span class="comment">// 设置路由key</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTINGKEY = <span class="string">"rabbitmq.microboot.routingkey"</span>;</span><br><span class="line"><span class="comment">// 队列名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"rabbitmq.microboot.queue"</span>;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchangeQueue</span><span class="params">(DirectExchange exchange, Queue queue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTINGKEY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用直连的模式</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">getDirectExchage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(EXCHANGE, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要创建的队列信息</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、【microboot-rabbitmq-consumer】实现监听处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConsumerService</span> </span>&#123;</span><br><span class="line"><span class="comment">// 进行消息接收处理</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"rabbitmq.microboot.queue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">System.err.println(<span class="string">"【*** 接收消息 ***】"</span> + text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、【microboot-rabbitmq-producer】创建一个测试类实现消息的发送处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.StartSpringBootMain;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.producer.IMessageProducerService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRabbitMQ</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IMessageProducerService messageProducer;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">this</span>.messageProducer.sendMessage(<span class="string">"hello world: "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、【microboot-rabbitmq-consumer】编写消息接收测试类，这里面不需要写代码，只需要做一个休眠即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.StartSpringBootMain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRabbitMQ</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStart</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体进行项目开发之中整合的步骤还是简单，但是要注意，将生产者与消费者的配置类分开了，实际上这两个类的作用是一样的。</p><h1 id="三、整合Kafka组件"><a href="#三、整合Kafka组件" class="headerlink" title="三、整合Kafka组件"></a>三、整合Kafka组件</h1><p>Kafka是现在最好的开源消息组件，其仿照AMQP协议操作，而且处理的性能也是最高的。本次使用已经配置好的Kafka服务器，而且这台服务器使用了kerberos认证，所以首先应该准备好一个jass配置文件：</p><p>1、定义<code>kafka_client_jaas.conf</code>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KafkaClient &#123;</span><br><span class="line">org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">usename=&quot;bob&quot;</span><br><span class="line">password=&quot;bob-pwd&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、为了方便进行项目的观察，本次依然准备出两个项目：生产者（microboot-kafka-producer）、消费者（microboot-kafka-consumer），随后为这两个项目添加Kafka配置支持：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、【microboot-kafka-consumer】修改application.yml配置文件，进行kafka配置项编写：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  kafka:</span></span><br><span class="line"><span class="attr">    bootstrap-servers:</span></span><br><span class="line"><span class="attr">    - kafka-single:</span><span class="number">9095</span></span><br><span class="line"><span class="attr">    template:</span></span><br><span class="line"><span class="attr">      default-topic:</span> <span class="string">kafka-microboot</span></span><br><span class="line"><span class="attr">    consumer:</span></span><br><span class="line"><span class="attr">      key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="attr">      value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="attr">      group-id:</span> <span class="string">group-1</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line">      <span class="string">sasl.mechanism:</span> <span class="string">PLAIN</span></span><br><span class="line">      <span class="string">security.protocol:</span> <span class="string">SASL_PLAINTEXT</span></span><br></pre></td></tr></table></figure><p>4、【microboot-kafka-consumer】建立一个kafka的消费程序类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@KafkaListener</span>(topics = &#123; <span class="string">"kafka-microboot"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(ConsumerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">System.err.println(<span class="string">"【*** 接收消息 ***】key = "</span> + record.key() + <span class="string">"、value = "</span> + record.value());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、【microboot-kafka-consumer】随后还需要修改SpringBoot的启动程序类，追加kerberos配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartSpringBootMain</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 表示系统环境属性</span></span><br><span class="line">System.setProperty(<span class="string">"java.security.auth.login.config"</span>, <span class="string">"D:/kafka_client_jaas.conf"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(StartSpringBootMain.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、【microboot-kafka-producer】修改application.yml配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  kafka:</span></span><br><span class="line"><span class="attr">    bootstrap-servers:</span></span><br><span class="line"><span class="attr">    - kafka-single:</span><span class="number">9095</span></span><br><span class="line"><span class="attr">    template:</span></span><br><span class="line"><span class="attr">      default-topic:</span> <span class="string">kafka-microboot</span></span><br><span class="line"><span class="attr">    producer:</span></span><br><span class="line"><span class="attr">      key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="attr">      value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line">      <span class="string">sasl.mechanism:</span> <span class="string">PLAIN</span></span><br><span class="line">      <span class="string">security.protocol:</span> <span class="string">SASL_PLAINTEXT</span></span><br></pre></td></tr></table></figure><p>7、【microboot-kafka-producer】定义消息发送的服务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProducerService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.producer.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.producer.IMessageProducerService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProducerServiceImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProducerService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.kafkaTemplate.sendDefault(<span class="string">"kafka-key"</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、【microboot-kafka-producer】修改程序启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartSpringBootMain</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 表示系统环境属性</span></span><br><span class="line">System.setProperty(<span class="string">"java.security.auth.login.config"</span>, <span class="string">"D:/kafka_client_jaas.conf"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(StartSpringBootMain.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、编写消息发送的测试类：</p><p><strong>microboot-kafka-producer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.StartSpringBootMain;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.producer.IMessageProducerService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKafka</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IMessageProducerService messageProducer;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">this</span>.messageProducer.sendMessage(<span class="string">"hello world: "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>microboot-kafka-consumer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.StartSpringBootMain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKafka</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStart</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用Kafka进行数据处理的时候，它速度快的主要原因是采用的协议、处理的模式、零拷贝。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第九章：SpringBoot整合MyBatis</title>
    <link href="https://www.amorou.cn/2017-01-22/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9ASpringBoot%E6%95%B4%E5%90%88MyBatis.html"/>
    <id>https://www.amorou.cn/2017-01-22/第九章：SpringBoot整合MyBatis.html</id>
    <published>2017-01-22T08:40:02.000Z</published>
    <updated>2019-08-11T00:53:48.715Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>SpringBoot得到的最终效果是一个简化到极致的WEB开发，但是只要牵扯到WEB开发，就绝对不可能缺少数据层操作，所有的开发都一定秉持着MVC设计模式的原子，MVC里面业务层不可少，数据层永远要与业务层绑定在一起，既然要进行数据层的操作，那么肯定首选的一定就是MyBatis，因为Mybatis整合处理之后尤其是与Spring整合里面可以直接避免掉DAO层的编写，同时VO类也是最干净的，这一点上绝对比其他的ORMapping组件更方便。</p><h1 id="一、配置druid数据库连接池"><a href="#一、配置druid数据库连接池" class="headerlink" title="一、配置druid数据库连接池"></a>一、配置druid数据库连接池</h1><p>这个数据库连接池的配置是由阿里提供的，并且由于性能很高，同时具备有很好的监控性，在实际的开发之中已经开始广泛的使用了。</p><p>1、 首先编写一个数据库创建脚本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">database</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> springboot;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> springboot <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> UTF8;</span><br><span class="line"><span class="keyword">USE</span> springboot;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">deptno<span class="built_in">BIGINT</span>AUTO_INCREMENT,</span><br><span class="line">dname<span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span>pk_deptno PRIMARY <span class="keyword">KEY</span>(deptno)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname) <span class="keyword">VALUE</span> (<span class="string">'开发部'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname) <span class="keyword">VALUE</span> (<span class="string">'财务部'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname) <span class="keyword">VALUE</span> (<span class="string">'市场部'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname) <span class="keyword">VALUE</span> (<span class="string">'人事部'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname) <span class="keyword">VALUE</span> (<span class="string">'公关部'</span>);</span><br></pre></td></tr></table></figure><p>2、 随后要进行druid的数据源的配置，如果要想使用druid的数据源，那么首先一定要修改pom.xml配置文件，引入以下包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、 如果要进行数据源的整合处理，直接修改application.yml配置文件即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment"># 配置当前要使用的数据源的操作类型</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>      <span class="comment"># 配置Mysql的驱动程序类</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/springboot</span>   <span class="comment"># 数据库连接地址</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span>                                <span class="comment"># 数据库用户名</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span>                               <span class="comment"># 数据库密码</span></span><br><span class="line"><span class="attr">    dbcp2:</span>                                        <span class="comment"># 进行数据库连接池的配置</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">5</span>                                 <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span>                             <span class="comment"># 初始化提供的连接数</span></span><br><span class="line"><span class="attr">      max-total:</span> <span class="number">5</span>                                <span class="comment"># 最大的连接数</span></span><br><span class="line"><span class="attr">      max-wait-millis:</span> <span class="number">200</span>                        <span class="comment"># 等待连接获取的最大超时时间</span></span><br></pre></td></tr></table></figure><p>4、如果这个时候要进行junit代码测试，则一定要将Mybatis开发包配置过来，因为只有在Mybatis开发包里面才会将druid的配置的数据库连接池变为所需要的DataSource数据源对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、测试一下当前的连接池是否可用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.StartSpringBootMain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.dataSource.getConnection());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以获取数据库连接，表示当前的druid的配置正确。</p><h1 id="二、整合Mybatis开发框架"><a href="#二、整合Mybatis开发框架" class="headerlink" title="二、整合Mybatis开发框架"></a>二、整合Mybatis开发框架</h1><p>如果要进行mybatis的配置一定要导入spring-boot所支持的mybatis开发包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、修改application.yml配置文件，最佳mybatis的相关配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis.cfg.xml</span>  <span class="comment"># mybatis配置文件所在路劲</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.example.microboot.vo</span>                <span class="comment"># 定义所有操作类的别名所在包</span></span><br><span class="line"><span class="attr">  mapper-locations:</span>                                   <span class="comment"># 所有的mapper映射文件</span></span><br><span class="line"><span class="attr">  - classpath:</span><span class="string">mybatis/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure><p>2、建立一个Dept的VO类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(Long deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dname = dname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Dept [deptno="</span> + deptno + <span class="string">", dname="</span> + dname + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在src/main/resources目录下建立一个mybatis.cfg.xml配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、 src/main/resources/mybatis下建立一个mapper子目录，而后在里面定义有Dept.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"com.example.microboot.dao.IDeptDAO"</span>&gt;</span></span><br><span class="line">select deptno, dname from dept</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、建立IDeptDAO接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDeptDAO</span> </span>&#123;</span><br><span class="line"><span class="function">List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定义DAO接口的时候由于需要自动生成实现子类，所以在接口声明处一定要加上一个<strong>@Mapper</strong>的注解，否者DAO接口和*.xml的Mapper文件无法整合在一起。</p><p>6、建立一个IDeptService接口，作为服务使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDeptService</span> </span>&#123;</span><br><span class="line"><span class="function">List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.dao.IDeptDAO;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.service.IDeptService;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptService</span> <span class="keyword">implements</span> <span class="title">IDeptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IDeptDAO deptDAO;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.deptDAO.list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、进行代码测试类编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.StartSpringBootMain;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.service.IDeptService;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeptService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IDeptService deptService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">List&lt;Dept&gt; list = deptService.list();</span><br><span class="line"><span class="keyword">for</span> (Dept dept : list) &#123;</span><br><span class="line">System.out.println(dept.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时测试通过，则SpringBoot与MyBatis已近可以成功的整合再一起进行项目开发，此时的配置要比之前使用Spring+MyBatis直接配置简单很多。</p><h1 id="三、事务控制"><a href="#三、事务控制" class="headerlink" title="三、事务控制"></a>三、事务控制</h1><p>在Spring之中提供的事务控制里面有以下的几种数据级别。</p><p><img src="/2017-01-22/第九章：SpringBoot整合MyBatis.htm/1553589903381.png" alt="1553589903381"></p><p>如果现在要想在SpringBoot里面去启用MyBatis事务（数据库的事务），那么就可以通过如下的方式来完成。</p><p>1、修改IDeptService接口，追加一个只读事务控制；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDeptService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时配置了一个只读的事务操作，那么也就是说在这个业务方法只能采用读的模式来进行操作。</p><p>2、但是现在配置了一个注解并不表示当前已经合理的支持了事务，如果要进行事务的启用，还需要在程序的启动类上追加一个新的注解配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// 启动SpringBoot程序,而后自带子包扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartSpringBootMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(StartSpringBootMain.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 如果现在要想更好的观察事务的问题，最简单的做法是编写一个数据增加操作，而后为这个业务方法设置只读配置。</p><ul><li><p>追加一个新的方法：</p><p><strong>com.example.microboot.dao.IDeptDAO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDeptDAO</span> </span>&#123;</span><br><span class="line"><span class="function">List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>com.example.microboot.service.IDeptService</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.example.microboot.service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line">public interface IDeptService &#123;</span><br><span class="line">@Transactional(readOnly = true)</span><br><span class="line">List&lt;Dept&gt; list();</span><br><span class="line">// 暂时设置为只读事务</span><br><span class="line">@Transactional(readOnly = true)</span><br><span class="line">boolean add(Dept dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>com.example.microboot.service.impl.DeptService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.dao.IDeptDAO;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.service.IDeptService;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptService</span> <span class="keyword">implements</span> <span class="title">IDeptService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IDeptDAO deptDAO;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.deptDAO.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptDAO.add(dept);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dept.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.microboot.dao.IDeptDAO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"com.example.microboot.vo.Dept"</span>&gt;</span></span><br><span class="line">select deptno, dname from dept</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.microboot.vo.Dept"</span>&gt;</span></span><br><span class="line">insert into dept(dname) values (#&#123;dname&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Dept dept = <span class="keyword">new</span> Dept();</span><br><span class="line">dept.setDname(<span class="string">"测试部门"</span>);</span><br><span class="line">System.out.println(<span class="keyword">this</span>.deptService.add(dept));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>此时运行测试程序报错，</p><p><img src="/2017-01-22/第九章：SpringBoot整合MyBatis.htm/1553590126785.png" alt="1553590126785"></p><p>4、如果在实际的工作之中，对于更新操作应该强制性的启动一个事务控制才对；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>;</span><br></pre></td></tr></table></figure><p>此时应该明确的表示该操作方法应该启动有一个事务的配置项。</p><p>5、 在使用Spring+MyBatis里面处理的时候应该考虑到信息显示问题，所以此处建议使用logback日志组件来进行日志信息的配置；</p><p>a) 将logback-spring.xml配置文件拷贝到src/main/resources目录之中；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"druid.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.microboot.dao"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b) 在项目之中去引入logback的依赖程序文件；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c) 在正常情况下mybatis的日志信息的输出操作必须设置其对应的命名空间，在logback.xml中追加如下信息；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.microboot.dao"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2017-01-22/第九章：SpringBoot整合MyBatis.htm/1553590260663.png" alt="1553590260663"></p><h1 id="四、Druid监控"><a href="#四、Druid监控" class="headerlink" title="四、Druid监控"></a>四、Druid监控</h1><p>Druid数据库连接池之所以使用非常广泛，其最主要的原因在于它可以直接提供性能监控。那么本次来针对于当前已经实现好的druid配置来进行性能监控的处理配置。</p><p>1、如果要想进行Druid的性能的监控操作，则需要做一些基础配置，例如：访问的IP地址是否是白名单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要实现WEB监控的配置处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>); <span class="comment">// 要进行druid监控的配置处理操作</span></span><br><span class="line">servletRegistrationBean.addInitParameter(<span class="string">"allow"</span>, <span class="string">"127.0.0.1,192.168.74.1"</span>);<span class="comment">// 白名单</span></span><br><span class="line">servletRegistrationBean.addInitParameter(<span class="string">"deny"</span>, <span class="string">"192.168.74.2"</span>);<span class="comment">// 黑名单</span></span><br><span class="line">servletRegistrationBean.addInitParameter(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);<span class="comment">// 用户名</span></span><br><span class="line">servletRegistrationBean.addInitParameter(<span class="string">"loginPassword"</span>, <span class="string">"admin"</span>);<span class="comment">// 密码</span></span><br><span class="line">servletRegistrationBean.addInitParameter(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>);<span class="comment">// 是否可以重置数据源</span></span><br><span class="line"><span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);<span class="comment">// 所有请求进行监控处理</span></span><br><span class="line">filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jsp,*.css,/druid/*"</span>);</span><br><span class="line"><span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、为了更好的说明问题，建议建立一个控制器进行业务层的调用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.service.IDeptService;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IDeptService deptService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.deptService.list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、如果想要进行监控还需要开启一个过滤配置，而这个过滤配置的开启需要通过application.yml配置文件配置；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis.cfg.xml</span>  <span class="comment"># mybatis配置文件所在路劲</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.example.microboot.vo</span>      <span class="comment"># 定义所有操作类的别名所在包</span></span><br><span class="line"><span class="attr">  mapper-locations:</span>                                   <span class="comment"># 所有的mapper映射文件</span></span><br><span class="line"><span class="attr">  - classpath:</span><span class="string">mybatis/mapper/**/*.xml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment"># 配置当前要使用的数据源的操作类型</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>      <span class="comment"># 配置Mysql的驱动程序类</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/springboot</span>   <span class="comment"># 数据库连接地址</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span>                                <span class="comment"># 数据库用户名</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span>                               <span class="comment"># 数据库密码</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">    dbcp2:</span>                                        <span class="comment"># 进行数据库连接池的配置</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">5</span>                                 <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span>                             <span class="comment"># 初始化提供的连接数</span></span><br><span class="line"><span class="attr">      max-total:</span> <span class="number">5</span>                                <span class="comment"># 最大的连接数</span></span><br><span class="line"><span class="attr">      max-wait-millis:</span> <span class="number">200</span>                        <span class="comment"># 等待连接获取的最大超时时间</span></span><br></pre></td></tr></table></figure><p>此时启动项目，访问<a href="http://localhost/druid/login.html" target="_blank" rel="noopener">http://localhost/druid/login.html</a>会看到一个可视化界面；</p><p><img src="/2017-01-22/第九章：SpringBoot整合MyBatis.htm/1553590332207.png" alt="1553590332207"></p><p>使用之前在Druid配置类中设置的用户名和密码登录即可查看监控信息；利用监控可以方便的进行程序的管理，这一点在企业开发之中至关重要。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第八章: SpringBoot拦截器</title>
    <link href="https://www.amorou.cn/2017-01-15/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9ASpringBoot%E6%8B%A6%E6%88%AA%E5%99%A8.html"/>
    <id>https://www.amorou.cn/2017-01-15/第八章：SpringBoot拦截器.html</id>
    <published>2017-01-15T08:32:14.000Z</published>
    <updated>2019-08-11T00:53:48.729Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>所有的开发之中拦截器一定是一个必须要使用的功能，利用拦截器可以更加有效的实现数据的验证处理，而且在SpringBoot之中所使用的拦截器与Spring中的拦截器完全一样。</p><h2 id="一、基础拦截器"><a href="#一、基础拦截器" class="headerlink" title="一、基础拦截器"></a>一、基础拦截器</h2><p>1、创建一个程序的控制器类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写一个拦截器对其进行控制，为了更好的说明问题，现在将拦截器定义在外包中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Logger log = LoggerFactory.getLogger(MyInterceptor.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HandlerMethod handlerMethod = (HandlerMethod) handler; </span><br><span class="line">log.info(<span class="string">"[*** MyInterceptor.preHandle ***] &#123;&#125;"</span>, handlerMethod.getBean().getClass().getSimpleName());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HandlerMethod handlerMethod = (HandlerMethod) handler; </span><br><span class="line">log.info(<span class="string">"[*** MyInterceptor.postHandle ***] &#123;&#125;"</span>, handlerMethod.getBean().getClass().getSimpleName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HandlerMethod handlerMethod = (HandlerMethod) handler; </span><br><span class="line">log.info(<span class="string">"[*** MyInterceptor.afterCompletion ***] &#123;&#125; 拦截处理完毕..."</span>, handlerMethod.getBean().getClass().getSimpleName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、此时如果想要使用拦截器则必须有一个拦截器的配置类，现在不在编写配置文件了，所有的配置全部利用一个类完成；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.MyInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;<span class="comment">// 定义MVC配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注册拦截器、定义匹配路径</span></span><br><span class="line">registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line"><span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在只要找到了可以操作的控制器程序类，那么久可以依照Spring的拦截器进行相关的代码编写。</p><h2 id="二、AOP拦截器"><a href="#二、AOP拦截器" class="headerlink" title="二、AOP拦截器"></a>二、AOP拦截器</h2><p>在Spring里面还提供有一种AOP拦截器配置，不过大部分的AOP拦截器都是围绕业务层进行拦截处理的。</p><p>1、修改POM.xml，添加AOP依赖包；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写一个AOP拦截的控制程序类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Logger log = LoggerFactory.getLogger(ServiceAspect.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* com.example.microboot..*.*Service.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">arountMethod</span><span class="params">(ProceedingJoinPoint point)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; className = point.getTarget().getClass();</span><br><span class="line">log.info(<span class="string">"[*** ServiceAspect ***] &#123;&#125;"</span>, className);</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行目标方法</span></span><br><span class="line">result = point.proceed();</span><br><span class="line">log.info(<span class="string">"[*** ServiceAspect ***] &#123;&#125; 执行完毕,返回结果: &#123;&#125;"</span>, className, result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、业务类以及控制器类；</p><p><strong>HelloController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.service.IHelloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IHelloService helloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> helloService.sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IHelloService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHelloService</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HelloService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.service.IHelloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> <span class="keyword">implements</span> <span class="title">IHelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!!!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于WEB拦截可以使用拦截器，而对于业务层的拦截可以使用Aspect表达式结合AOP的拦截机制实现。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第七章: SpringBoot 文件上传</title>
    <link href="https://www.amorou.cn/2017-01-15/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9ASpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html"/>
    <id>https://www.amorou.cn/2017-01-15/第七章：SpringBoot文件上传.html</id>
    <published>2017-01-15T08:23:19.000Z</published>
    <updated>2019-08-11T00:53:48.713Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="一、基础上传操作"><a href="#一、基础上传操作" class="headerlink" title="一、基础上传操作"></a>一、基础上传操作</h1><p>所有只要与WEB开发牵扯到的开发框架都必须面对有文件上传处理，在原始的Spring之中所使用的上传组件是Apache的fileupload组件，在SpringBoot里面也同样要使用此组件。</p><p>1、 如果要进行上传处理，则首先需要准备出相应的控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadPre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"upload-page"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">uploadPre</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">result.put(<span class="string">"fileName"</span>, file.getOriginalFilename());</span><br><span class="line">result.put(<span class="string">"fileSize"</span>, file.getSize());</span><br><span class="line">result.put(<span class="string">"fileType"</span>, file.getContentType());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编辑文件上传页面；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot-FileUpload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/upload&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时文件上传的基本操作就实现了。</p><h1 id="二、上传限制"><a href="#二、上传限制" class="headerlink" title="二、上传限制"></a>二、上传限制</h1><p>虽然现在已经实现了上传操作，但是这个时候的上传是没有限制的，也就是说你可以上传任意大小的文件，这一点在实际开发之中是不可能存在的，所以必须对上传进行一些限制处理。</p><p>SpringBoot中默认上传限制为1M（参见MultipartProperties类源码），如果要想改变上传的限制，那么最好的做法是进行application.yml配置文件的变更；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">    multipart:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span> <span class="comment"># 可以启用http上传</span></span><br><span class="line"><span class="attr">      max-file-size:</span> <span class="number">10</span><span class="string">MB</span>  <span class="comment"># 设置支持的单个文件上传的大小限制</span></span><br><span class="line"><span class="attr">      max-request-size:</span> <span class="number">20</span><span class="string">MB</span> <span class="comment"># 设置支持的上传文件总大小限制</span></span><br><span class="line"><span class="attr">      file-size-threshold:</span> <span class="number">512</span><span class="string">KB</span> <span class="comment"># 当上传文件达到指定配置量的时候会将文件内容写入磁盘</span></span><br><span class="line"><span class="attr">      location:</span> <span class="string">/</span> <span class="comment"># 设置上传的临时目录</span></span><br></pre></td></tr></table></figure><p>那么此时就可以通过以上的文件实现上传的大小限制。</p><p>对于上传的配置限制，除了采用以上的配置文件编写之外，也可以单独编写一个配置程序类。</p><p>范例：建立一个上传的配置程序类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.MultipartConfigElement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.MultipartConfigFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">getMultipartConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MultipartConfigFactory configFactory = <span class="keyword">new</span> MultipartConfigFactory();</span><br><span class="line"><span class="comment">// 设置支持的单个文件上传的大小限制</span></span><br><span class="line">configFactory.setMaxFileSize(<span class="string">"10MB"</span>);</span><br><span class="line"><span class="comment">// 设置支持的上传文件总大小限制</span></span><br><span class="line">configFactory.setMaxRequestSize(<span class="string">"20MB"</span>);</span><br><span class="line"><span class="comment">// 当上传文件达到指定配置量的时候会将文件内容写入磁盘</span></span><br><span class="line">configFactory.setFileSizeThreshold(<span class="string">"512kb"</span>);</span><br><span class="line"><span class="comment">// 设置上传的临时目录</span></span><br><span class="line">configFactory.setLocation(<span class="string">"/"</span>);</span><br><span class="line"><span class="keyword">return</span> configFactory.createMultipartConfig();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以后的开发之中此类上传的配置程序会经常性出现。</p><h1 id="三、上传多个文件"><a href="#三、上传多个文件" class="headerlink" title="三、上传多个文件"></a>三、上传多个文件</h1><p>1、修改上传表单；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/multiUpload&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、修改文件上传处理控制器；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/multiUpload"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; multiUpload(HttpServletRequest request) &#123;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (request <span class="keyword">instanceof</span> MultipartHttpServletRequest) &#123;</span><br><span class="line">MultipartHttpServletRequest multipartHttpServletRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">List&lt;MultipartFile&gt; files = multipartHttpServletRequest.getFiles(<span class="string">"file"</span>);</span><br><span class="line"><span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line"><span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">Map&lt;String, Object&gt; item = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">item.put(<span class="string">"fileName"</span>, file.getOriginalFilename());</span><br><span class="line">item.put(<span class="string">"fileSize"</span>, file.getSize());</span><br><span class="line">item.put(<span class="string">"fileType"</span>, file.getContentType());</span><br><span class="line">result.add(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个上传文件的信息要通过Spring包装的Request对象获得。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第六章：SpringBoot页面模版</title>
    <link href="https://www.amorou.cn/2017-01-07/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9ASpringBoot%E9%A1%B5%E9%9D%A2%E6%A8%A1%E7%89%88.html"/>
    <id>https://www.amorou.cn/2017-01-07/第六章：SpringBoot页面模版.html</id>
    <published>2017-01-07T07:27:11.000Z</published>
    <updated>2019-08-11T00:53:48.730Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>在整个SpringBoot之中支持最好的一个页面显示模版就是thymeleaf，而且使用此开发模版可以完全避免JSP的存在，JSP页面的最大败笔在于很多开发者会在JSP文件中编写大量的Scriptlet代码，这种代码的结构根本就不方便阅读。而且再编写JSP的时候你会发现不管如何开发都要导入一些标签库等概念，而为了简化这一切可以使用thymeleaf开发框架实现。</p><h2 id="一、信息显示"><a href="#一、信息显示" class="headerlink" title="一、信息显示"></a>一、信息显示</h2><p>在MVC的设计开发过程中，很多情况下都需要通过控制器将一些显示的内容交给页面来完成，所以首先来观察一个最简单的信息显示。</p><h3 id="1、普通的文本"><a href="#1、普通的文本" class="headerlink" title="1、普通的文本"></a>1、普通的文本</h3><p>现在在控制器里面传输了一些简单的信息内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> <span class="keyword">extends</span> <span class="title">AbstractBaseController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">model.addAttribute(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">model.addAttribute(<span class="string">"age"</span>, <span class="string">"25"</span>);</span><br><span class="line">model.addAttribute(<span class="string">"url"</span>, <span class="string">"&lt;span style='color: red;'&gt;https://wwww.baidu.com&lt;span&gt;"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"thymeleaf-show"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后在thymeleaf-show.html页面进行数据显示时只需要通过“${属性名}”即可完成；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot-Thymeleaf<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'姓名: ' + $&#123;name&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'年龄: ' + $&#123;age&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现在“</p><p>”元素之中出现有一个属性“th:text=<em>“‘<strong>姓名</strong>: ‘ + ${name}”</em>”，而这个th就是thymeleaf的一个支持语法。也就是说此时表示要显示的是一个普通的文本信息。</p><h3 id="2、th-text（普通文本输出）"><a href="#2、th-text（普通文本输出）" class="headerlink" title="2、th:text（普通文本输出）"></a>2、th:text（普通文本输出）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">---------------------------------------</span><br><span class="line">&lt;p th:text=<span class="string">"'姓名: ' + $&#123;name&#125;"</span> /&gt;</span><br><span class="line">---------------------------------------</span><br><span class="line">输出结果：姓名：张三</span><br></pre></td></tr></table></figure><p><strong>读取资源文件内容：</strong></p><p>在一个项目中一定会存在资源文件，实际上使用th:text也可以获取资源文件内容</p><p><img src="/2017-01-07/第六章：SpringBoot页面模版.htm/1553585477975.png" alt="1553585477975"></p><p><img src="/2017-01-07/第六章：SpringBoot页面模版.htm/1553585494215.png" alt="1553585494215"></p><p><img src="/2017-01-07/第六章：SpringBoot页面模版.htm/1553585497881.png" alt="1553585497881"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123;user.name&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123;user.age&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123;user.age('25')&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：<img src="/2017-01-07/第六章：SpringBoot页面模版.htm/1553585552208.png" alt="1553585552208"></p><p><strong>基础运算：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'基础运算：' + (1 + 5)"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>th:utext（html输出）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"dom"</span>, <span class="string">"&lt;span style='color: red;'&gt;https://wwww.baidu.com&lt;span&gt;"</span>);</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">&lt;p th:utext=<span class="string">"$&#123; dom&#125;"</span> /&gt;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">输出结果：https:<span class="comment">//wwww.baidu.com</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="二、路径处理"><a href="#二、路径处理" class="headerlink" title="二、路径处理"></a>二、路径处理</h2><p>1、在“src/main/view/static/js”目录里面创建有一个main.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"页面加载完成"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果后续想进行方便的访问，可以使用“@{}”进行访问的定位处理；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/main.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要想再页面中进行资源的定位一定要使用“@{路径}”完成，而且一定要使用thymeleaf标签。</p><p>3、使用“@{路径}”也可以访问控制器方法；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/show&#125;"</span>&gt;</span>访问控制器方法<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在使用超链接的时候设置了“href”和“th:href”的话，那么前者的html元素的默认属性将无效。</p><h2 id="三、处理内置对象"><a href="#三、处理内置对象" class="headerlink" title="三、处理内置对象"></a>三、处理内置对象</h2><p>在这种模版开发框架里面是不提倡使用内置对象的，但是很多的开发者依然需要使用内置对象，所以下面观察如何在页面中采用内置对象。</p><p>1、在控制器中追加一个方法，这个方法将采用内置对象的形式传递属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/inner"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">inner</span><span class="params">(HttpServletRequest request, Model model)</span> </span>&#123;</span><br><span class="line">request.setAttribute(<span class="string">"requestMsg"</span>, <span class="string">"request: Hello"</span>);</span><br><span class="line">model.addAttribute(<span class="string">"modelMsg"</span>, <span class="string">"model: Hello"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"thymeleaf-inner"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中model传递的本质就属于request属性范围。</p><p>2、编写页面进行内容的显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;requestMsg&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;modelMsg&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>而后也可以使用“*{属性名称}”进行访问：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"*&#123;requestMsg&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"*&#123;modelMsg&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>3、传递三种属性范围：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/inner"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">inner</span><span class="params">(HttpServletRequest request, Model model)</span> </span>&#123;</span><br><span class="line">model.addAttribute(<span class="string">"modelMsg"</span>, <span class="string">"modelMsg"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"requestMsg"</span>, <span class="string">"requestMsg"</span>);</span><br><span class="line">request.getSession().setAttribute(<span class="string">"sessionMsg"</span>, <span class="string">"sessionMsg"</span>);</span><br><span class="line">request.getServletContext().setAttribute(<span class="string">"applicationMsg"</span>, <span class="string">"applicationMsg"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"thymeleaf-inner"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;modelMsg&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;requestMsg&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.sessionMsg&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;application.applicationMsg&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>4、实际上在thymeleaf里面也支持有JSP内置对象的获取操作，不过一般很少这样使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#httpServletRequest.getRemoteAddr()&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#httpServletRequest.getAttribute('requestMsg')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#httpSession.getId()&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#httpServletRequest.getServletContext().getRealPath('/')&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>现在会将所有可能显示出的内容全部重新做一个模版的改写。</p><h2 id="四、对象输出"><a href="#四、对象输出" class="headerlink" title="四、对象输出"></a>四、对象输出</h2><p>1、准备一个VO类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long mid;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> Double salary;</span><br><span class="line"><span class="comment">// getter,setter略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写一个控制器将对象内容进行属性传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Member;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberController</span> <span class="keyword">extends</span> <span class="title">AbstractBaseController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/member/show"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">root</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setMid(<span class="number">9527L</span>);</span><br><span class="line">member.setName(<span class="string">"张三"</span>);</span><br><span class="line">member.setAge(<span class="number">35</span>);</span><br><span class="line">member.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">member.setSalary(<span class="number">9999.99</span>);</span><br><span class="line">model.addAttribute(<span class="string">"member"</span>, member);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"member-show"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编写页面输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'id: ' + $&#123;member.mid&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'name: ' + $&#123;member.name&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'age: ' + $&#123;member.age&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'birthday: ' + $&#123;#dates.format(member.birthday,'yyyy-MM-dd')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'salary: ' + $&#123;member.salary&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>4、经过上面的操作，发现这样的操作有点复杂，下面演示更为简单的做法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;member&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'id: ' + *&#123;mid&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'name: ' + *&#123;name&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'age: ' + *&#123;age&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'birthday: ' + *&#123;#dates.format(birthday,'yyyy-MM-dd')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'salary: ' + *&#123;salary&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>区别：</strong>关于“${属性}”和“*{属性}”区别?</p><ul><li><p>这两种属性访问机制再访问单独或者是完整属性时候是一样的，而如果要使用“*{属性}”形式进行访问往往需要结合“th:object”作为整体对象的声明后才可以直接访问；</p></li><li><p>$访问完整信息，而*访问指定对象中的属性内容，如果访问的只是普通的内容两者没有区别。</p></li></ul><h2 id="五、逻辑判断"><a href="#五、逻辑判断" class="headerlink" title="五、逻辑判断"></a>五、逻辑判断</h2><p>所有的页面模版都一定存在有各种基础逻辑，例如：判断、循环处理。在Thymeleaf之中对于逻辑可以使用如下运算符完成，例如：and、or、关系比较（&gt;、&lt;、&gt;=、&lt;=、==、!= 、gt、lt、ge、le、eq、ne）。</p><p>1、通过控制器传递一些属性内容到页面中；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;age lt 18&#125;"</span>&gt;</span></span><br><span class="line">未成年禁止入内</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、除了这种做法之外还可以实现不满足条件的判断；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;age gt 18&#125;"</span>&gt;</span></span><br><span class="line">未成年禁止入内</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在开发之中还会使用到swith这样的语句来进行多内容的判断；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"王五"</span>&gt;</span>我是王五<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"李四"</span>&gt;</span>我是李四<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>没有匹配成功的数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Thymeleaf中实现的switch语句之中并没有default的存在，如果需要使用default功能，就采用“th:case=<em>“\</em>“*”来实现。</p><h2 id="六、迭代输出"><a href="#六、迭代输出" class="headerlink" title="六、迭代输出"></a>六、迭代输出</h2><p>​ 数据迭代是模版语言之中一个重要的组成部分，也是所有项目开发之中的重要组成部分，那么下面进行迭代操作的实现，而在实际的开发之中进行数据的迭代类型往往会有两类：List、Map。</p><p>1、 建立一个控制器，在控制器中追加一个List集合和一个Map集合数据；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/foreach"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foreach</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">Map&lt;String, Object&gt; item = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">item.put(<span class="string">"id"</span>, i);</span><br><span class="line">item.put(<span class="string">"name"</span>, <span class="string">"王五-"</span> + i);</span><br><span class="line">list.add(item);</span><br><span class="line">&#125;</span><br><span class="line">model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Map&lt;String, Object&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, Map&lt;String, Object&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">Map&lt;String, Object&gt; item = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">item.put(<span class="string">"id"</span>, i);</span><br><span class="line">item.put(<span class="string">"name"</span>, <span class="string">"王五-"</span> + i);</span><br><span class="line">map.put(<span class="string">"item"</span> + i, item);</span><br><span class="line">&#125;</span><br><span class="line">model.addAttribute(<span class="string">"map"</span>, map);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"thymeleaf-foreach"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、模版页面输出；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"item:$&#123;list&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.id&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.name&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 迭代Map --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>KEY<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"item:$&#123;map&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.key&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.value.id&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.value.name&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在页面迭代Map的时候，每一次取得的迭代数据类型一定都是Map.Entry对象，所以一定是通过getKey()、getValue()方法获取相应的数据内容。</p><p>3、在Thymeleaf输出的时候还可以输出更加强大的内容；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>奇数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>偶数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"item,itemState:$&#123;list&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;itemState.index + 1&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.id&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.name&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;itemState.even&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;itemState.odd&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、包含处理"><a href="#七、包含处理" class="headerlink" title="七、包含处理"></a>七、包含处理</h2><p>所有的项目开发之中页面的互相包含是一项非常重要的技术支持，而在Thymeleaf也同样支持有数据的包含处理，而对于包含操作，再Thymeleaf模版之中提供有两种支持语法：</p><ul><li><p>th:replace：是使用标签进行替换；</p></li><li><p>th:include：是进行包含；</p></li></ul><p>1、定义被包含的页面，于是建立“src/main/view/templates/commons/footer.html”页面；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"companyInfo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>D.Jang个人博客(http://www.amorouser.club)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、进行页面包含操作；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"@&#123;/commons/footer&#125; :: copy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"@&#123;/commons/footer&#125; :: copy"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2017-01-07/第六章：SpringBoot页面模版.htm/1553586097544.png" alt="1553586097544"></p><p><img src="/2017-01-07/第六章：SpringBoot页面模版.htm/1553586101266.png" alt="1553586101266"></p><p>3、在很多的开发之中都需要向被包含页面进行参数的传递，于是，在Thymeleaf之中也可以实现，使用“th:with”完成；</p><ul><li><p>修改被包含页面：footer.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>D.Jang个人博客(www.amorouser.club)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;year&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>而后在进行包含处理的时候进行参数传递：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"@&#123;/commons/footer&#125; :: copy"</span> <span class="attr">th:with</span>=<span class="string">"year=2017,month=10,day=24"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>那么此时就可以利用此技术与一些其他的的前端开发框架进行整合。</p></li></ul><h2 id="八、数据处理"><a href="#八、数据处理" class="headerlink" title="八、数据处理"></a>八、数据处理</h2><p>在Thymeleaf之中提供有相应的集合处理方法，例如：在使用List集合的时候可以考虑采用get()方法获取指定索引的数据，在使用Set()集合的时候会考虑使用contains()来判断摸个数据是否存在，使用Map集合的时候也希望使用containsKey()判断某个Key是否存在，以及使用get()根据key获取对应的value，而这些功能在之前并不具备，下面来观察如何在页面中使用此类操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/data"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">data</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">Map&lt;String, Object&gt; item = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">item.put(<span class="string">"id"</span>, i);</span><br><span class="line">item.put(<span class="string">"name"</span>, <span class="string">"王五-"</span> + i);</span><br><span class="line">list.add(item);</span><br><span class="line">&#125;</span><br><span class="line">model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">Map&lt;String, Object&gt; item = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">item.put(<span class="string">"id"</span>, i);</span><br><span class="line">item.put(<span class="string">"name"</span>, <span class="string">"王五-"</span> + i);</span><br><span class="line">map.put(<span class="string">"item"</span> + i, item);</span><br><span class="line">&#125;</span><br><span class="line">model.addAttribute(<span class="string">"map"</span>, map);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.add(<span class="string">"JAVA"</span>);</span><br><span class="line">set.add(<span class="string">"PHP"</span>);</span><br><span class="line">set.add(<span class="string">"C#"</span>);</span><br><span class="line">model.addAttribute(<span class="string">"set"</span>, set);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"thymeleaf-data"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、通过Map集合获取信息；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#maps.containsKey(map,'item3')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;map['item3'].name&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2、判断某个数据是否存在；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#maps.containsKey(map,'item3')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;map['item3'].name&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#sets.contains(set,'JAVA')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#sets.contains(set,'C')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#sets.size(set)&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#lists.contains(list,'C')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#lists.size(list)&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如果真进行了集合类型的修改实际上发现进行页面操作也同样保持不变。而且可以发现在页面之中都可以根据所以取得，而不关心是Set集合还是List集合：</p><p>3、在进行数据处理的时候字符串数据也是一个常见的类型，所以在Thymeleaf之中也支持有字符串的操作；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings.replace('www.amorouser.club','.','$')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings.toUpperCase('www.amorouser.club')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings.trim(' www.amorouser.club   ')&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>4、日期格式化：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(mydate,'yyyy-MM-dd')&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(mydate,'yyyy-MM-dd HH:mm:ss')&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现模版的页面设计比传统的JSP强大很多。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第五章: SpringBoot整合Tomcat</title>
    <link href="https://www.amorou.cn/2017-01-07/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ASpringBoot%E6%95%B4%E5%90%88Tomcat.html"/>
    <id>https://www.amorou.cn/2017-01-07/第五章：SpringBoot整合Tomcat.html</id>
    <published>2017-01-07T07:16:21.000Z</published>
    <updated>2019-08-11T00:53:48.725Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>SpringBoot本身支持有两类的WEB容器：默认的Tomcat、Jetty， 在SpringBoot程序运行的时候，即使没有WEB容器，也可以采用自定义的方式实现WEB容器的启动。如果现在只是作为一个简单的服务发布，的却用不上Tomcat,可以Tomcat也有自身的优势，毕竟它是一个具备完全功能的WEB容器，而且再这个容器里面还可以进行各种容器的服务配置，所以一些开发者认为，不应该只是纯粹的去使用微服务的方式来启动WEB程序，我们的程序还应该发布到其他WEB容器中，比如Tomcat。</p><h2 id="一、配置Tomcat运行"><a href="#一、配置Tomcat运行" class="headerlink" title="一、配置Tomcat运行"></a>一、配置Tomcat运行</h2><p>1、如果一个程序项目需要发布到Tomcat上运行，那么该项目一定要设置为war文件修改项目类型为war文件，于是首先第一步就需要修改项目的类型为war，修改pom.xml配置文件；</p><ul><li><p>首先将打包的类型设置为war文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改后会提示一个项目错误信息：</p></li></ul><p><img src="/2017-01-07/第五章：SpringBoot整合Tomcat.htm/1553584783442.png" alt="1553584783442"></p><p>解决方法：</p><p><img src="/2017-01-07/第五章：SpringBoot整合Tomcat.htm/1553584792945.png" alt="1553584792945"></p><p>以上错误提示意思是没有WEB-INFO/web.xml文件</p><ul><li>打包部署到tomcat</li></ul><p>在进行以上完成以上的操作后，启动tomcat服务器，然后访问程序路径，发现并不能访问到程序，而且在tomcat启动日志中也没有SpringBoot启动的相关日志，如果想要以tomcat的形式运行，那么必须对SpringBoot的启动类做一个简单的处理</p><p>2、删掉microboot-tomcat中的pom.xml里的jetty依赖库</p><p>3、修改SpringBoot的启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// 启动SpringBoot程序,而后自带子包扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartSpringBootMain</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123; <span class="comment">// 必须继承指定的父类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.sources(StartSpringBootMain.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(StartSpringBootMain.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、将项目进行打包，运行。</p><h2 id="二、Https访问控制"><a href="#二、Https访问控制" class="headerlink" title="二、Https访问控制"></a>二、Https访问控制</h2><p>之前实现了Tomcat的正常部署访问，但是再实际中可以正常的进行https的处理才是现阶段开发的重点所在。现在可以在本地做一个简单的https访问配置，正常来讲https的访问是需要有证书的，为了保证证书的安全一定要在项目之中使用CA进行认证。下面只是再本机做一个简单的模拟，利用java提供的keytool命令实现证书的生成。</p><p>1、使用命令行方式进入到D:/路径下，随后进行证书的生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> mytomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650 -dname “CN=Web Service,OU=Unit,O=Organization,L=City,S=State,C=US” –storepass springboot</span><br></pre></td></tr></table></figure><p>该服务器端证书生成的名称为“keystore.p12”,别名设置为了“mytomcat”，密码设置为“springboot”</p><p>随后执行命令后会在D:/目录下生成一个文件：</p><p><img src="/2017-01-07/第五章：SpringBoot整合Tomcat.htm/1553584991573.png" alt="1553584991573"></p><p>2、将该整数保存到项目之中（只要是classpath路径下即可），本次将其保存再“src/main/resourse”目录之中；</p><p>3、修改application.yml文件配置ssl安全访问：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">443</span>                       <span class="comment"># https的端口设置为443</span></span><br><span class="line"><span class="attr">  ssl:</span></span><br><span class="line"><span class="attr">    key-store:</span> <span class="attr">class:keystore.p12</span> <span class="comment"># key-store配置文件路径</span></span><br><span class="line"><span class="attr">    key-store-type:</span> <span class="string">PKCS12</span>        <span class="comment"># key-store类型</span></span><br><span class="line"><span class="attr">    key-alias:</span> <span class="string">mytomcat</span>           <span class="comment"># 设置的别名</span></span><br><span class="line"><span class="attr">    key-password:</span> <span class="string">springboot</span>      <span class="comment"># 访问密码</span></span><br></pre></td></tr></table></figure><p>需要注意一个问题，如果项目之中设置了maven的“<resources>”之后，一定要保证该配置文件可以正常使用。</resources></p><p>4、修改【microboot】项目中的pom.xml的资源配置项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.tld<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.p12<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改完成后一定要进行Maven/Update处理。如果现在443端口没有被其他程序暂用，那么此时一定可以正常启动，可是如果端口被占用，那么启动将失败，本机现在是被chrome.exe进程所占用了443端口。</p><p>5、如果现在要进行醒目的执行测试不能够使用google浏览器，因为google浏览器可定无法访问，即时使用的是ForFox浏览器也不能正常访问，因为没有CA。访问：<a href="https://localhost/" target="_blank" rel="noopener">https://localhost/</a>；</p><p>6、但是也需要考虑一个问题，如果用户现在没有通过https访问，所以最好的做法是如果现在是进行了http访问，则应该让请求跳转到https的443端口上。如果要想实现这样的处理需要追加一个配置程序类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityConstraint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责HTTP的连接相关配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnectorConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connector <span class="title">initConnetor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connector connetor = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">connetor.setScheme(<span class="string">"http"</span>); <span class="comment">// 如果现在用户使用普通http的方式进行访问</span></span><br><span class="line">connetor.setPort(<span class="number">80</span>); <span class="comment">// 用户访问的是80端口</span></span><br><span class="line">connetor.setSecure(<span class="keyword">false</span>); <span class="comment">// 如果该链接为跳转则表示不是一个新的连接对象</span></span><br><span class="line">connetor.setRedirectPort(<span class="number">443</span>); <span class="comment">// 设置转发操作端口</span></span><br><span class="line"><span class="keyword">return</span> connetor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">servletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TomcatEmbeddedServletContainerFactory factory = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory() &#123;</span><br><span class="line"><span class="comment">// 该方法主要进行请求处理的上下文配置</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint(); <span class="comment">// 定义新的安全访问策略</span></span><br><span class="line">securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>); <span class="comment">// 定义用户的访问约束要求</span></span><br><span class="line">SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">collection.addPattern(<span class="string">"/*"</span>);<span class="comment">// 匹配所有的访问映射路径</span></span><br><span class="line">securityConstraint.addCollection(collection); <span class="comment">// 追加路径映射访问配置</span></span><br><span class="line">context.addConstraint(securityConstraint);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">factory.addAdditionalTomcatConnectors(<span class="keyword">this</span>.initConnetor());</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果以后用户要访问80端口，则会将其自动跳转到443端口。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第四章：SpringBoot错误处理</title>
    <link href="https://www.amorou.cn/2017-01-07/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9ASpringBoot%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html"/>
    <id>https://www.amorou.cn/2017-01-07/第四章：SpringBoot错误处理.html</id>
    <published>2017-01-07T07:05:48.000Z</published>
    <updated>2019-08-11T00:53:48.736Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h2 id="一、数据验证错误处理"><a href="#一、数据验证错误处理" class="headerlink" title="一、数据验证错误处理"></a>一、数据验证错误处理</h2><p>现在假设要进行表单信息提交，可定需要一个表单，而这个表单要讲数据提交到VO类中，所以现在基本实现如下：</p><p>1、建立一个Member.java的VO类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4383124782868942630L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter,setter略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、建立MemberController控制类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.microboot.vo.Member;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/member"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberController</span> <span class="keyword">extends</span> <span class="title">AbstractBaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/member/member-add"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">save</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> member;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编写一个页面进行用户的表单填写（在src/main/view/templates下建立）：member/member-add.html；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Member信息添加<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"/images/avatar.icon"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/member/save"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">用户邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"mid"</span> <span class="attr">value</span>=<span class="string">"666666@gmail.com"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">用户姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">用户年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"25"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">用户工资: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"salary"</span> <span class="attr">value</span>=<span class="string">"5000.00"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">用户生日: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"1992-10-02"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、此时的代码只是最为普通的操作，但是这时对于改程序也是存在一些问题的；</p><ul><li><p>如果有些数据没有输入，则内容是null，如果要进行严格控制，这写null不应该存在</p></li><li><p>某些数据应该进行格式验证，例如：用户邮箱应该是邮箱，这个信息应该进行邮箱验证；</p></li></ul><p>所以现在如果想要进行这些的验证，SpringBoot里面提供有默认的支持，只不过这些支持未必是最好的，在SpringBoot中为了用户编写认证专门提供有一个hibernate-validation.jar工具包，这个工具包是有hibernate开发框架提供的。</p><p><img src="/2017-01-07/第四章：SpringBoot错误处理.htm/1553584175130.png" alt="1553584175130"></p><p>6、如果要想验证，那么首先要解决的问题就是错误提示信息问题，而在SpringBoot中对于错误信息的保存，都要求其保存在ValidationMessages.properties文件，在“src/main/resources”目录中建立此文件；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">member.mid.notblank.error=用户名不允许为空!</span><br><span class="line">member.mid.email.error=用户邮箱格式不正确!</span><br><span class="line">member.age.notnull.error=年龄不允许为空!</span><br><span class="line">member.age.digits.error=年龄必须输入合法数字!</span><br><span class="line">member.salary.notnull.error=工资不允许为空!</span><br><span class="line">member.salary.digits.error=工资必须输入合法数字!</span><br><span class="line">member.birthday.notnull.error=生日不允许为空!</span><br></pre></td></tr></table></figure><p><strong>提示：</strong>一个表单就需要编写这么多配置项，那么如果要有几百个表单呢？所以最好的数据检测还是利用拦截器处理最合适。</p><p>7、修改Member.java程序类追加验证的处理方式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Digits;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4383124782868942630L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span>(message = <span class="string">"&#123;member.mid.notblank.error&#125;"</span>)</span><br><span class="line"><span class="meta">@Email</span>(message = <span class="string">"&#123;member.mid.email.error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span>(message = <span class="string">"&#123;member.age.notnull.error&#125;"</span>)</span><br><span class="line"><span class="meta">@Digits</span>(integer = <span class="number">3</span>, fraction = <span class="number">0</span>, message = <span class="string">"&#123;member.age.digits.error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span>(message = <span class="string">"&#123;member.salary.notnull.error&#125;"</span>)</span><br><span class="line"><span class="meta">@Digits</span>(integer = <span class="number">20</span>, fraction = <span class="number">2</span>, message = <span class="string">"&#123;member.salary.digits.error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="meta">@NotNull</span>(message = <span class="string">"&#123;member.birthday.notnull.error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter,setter略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、修改MemberController类中的save()方法来观察错误提示信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">save</span><span class="params">(@Valid Member member, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bindingResult.hasErrors()) &#123; <span class="comment">// 现在表示执行的验证出现错误</span></span><br><span class="line">Iterator&lt;ObjectError&gt; iterator = bindingResult.getAllErrors().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">ObjectError error = iterator.next(); <span class="comment">// 取出每一个错误</span></span><br><span class="line">System.out.println(<span class="string">"【错误信息】:"</span> + error.getCode() + <span class="string">", message = "</span> + error.getDefaultMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bindingResult.getAllErrors();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> member;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、配置错误页"><a href="#二、配置错误页" class="headerlink" title="二、配置错误页"></a>二、配置错误页</h2><p>错误页绝对是所有的WEB项目之中必须具有的一项信息显示处理，但是再传统的WEB项目的开发之中，错误页是再web.xml之中进行配置的，不过SpringBoot中并没有web.xml配置文件，如果要想使用错误页，最好的做法是根据每一个错误代码创建一个属于自己的错误显示页。</p><p>1、所有的错误页都是普通的静态文件，那么建议再“src/main/view/static”目录下创建几个常见的错误页（常见的错误页的HTTP返回状态吗：404、500、400…）：</p><p><img src="/2017-01-07/第四章：SpringBoot错误处理.htm/1553584250291.png" alt="1553584250291"></p><p>2、添加一个错误页的配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ErrorPage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorPageConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">containerCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">ErrorPage errorPage400 = <span class="keyword">new</span> ErrorPage(HttpStatus.BAD_REQUEST, <span class="string">"/error-400.html"</span>);</span><br><span class="line">ErrorPage errorPage404 = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="string">"/error-404.html"</span>);</span><br><span class="line">ErrorPage errorPage500 = <span class="keyword">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">"/error-500.html"</span>);</span><br><span class="line">container.addErrorPages(errorPage400, errorPage404, errorPage500);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时只要出现了错误，就会找到相应的http状态码，而后跳转到指定的错误路径上进行显示。</p><h2 id="三、全局异常处理"><a href="#三、全局异常处理" class="headerlink" title="三、全局异常处理"></a>三、全局异常处理</h2><p>观察以下代码，例如：现在建立一个控制器，而后这个控制器自己抛出一个异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/exception"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"除法计算结果："</span> + (<span class="number">10</span> / <span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时配置有错误页，那么这时候错误会同意跳转到500所在的路径页面进行错误的显示，但是如果现在希望能够显示出错误更加详细的内容呢，或者现在没有配置错误页？</p><p><img src="/2017-01-07/第四章：SpringBoot错误处理.htm/1553584298762.png" alt="1553584298762"></p><p>所以此时可以单独定义一个页面进行错误信息显示处理，而这个页面可以定义在“src/main/view/templates/error.html”，这个页面里面要求可以输出一些信息；</p><p>1、定义一个全局的异常处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ERROR_VIEW = <span class="string">"error "</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">defaultErrorHandler</span><span class="params">(HttpServletRequest request, Exception e)</span> </span>&#123;</span><br><span class="line">ModelAndView result = <span class="keyword">new</span> ModelAndView(DEFAULT_ERROR_VIEW);</span><br><span class="line">result.addObject(<span class="string">"url"</span>, request.getRequestURL());</span><br><span class="line">result.addObject(<span class="string">"exception"</span>, e);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于全局异常信息显示除了采用跳转处理方式之外，也可以使用Rest进行显示。</p><p><strong>范例：</strong>修改全局异常处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"><span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">defaultErrorHandler</span><span class="params">(HttpServletRequest request, Exception e)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorInfo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ErrorInfo</span><span class="params">(String message, String url)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line"><span class="keyword">this</span>.url = url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ErrorInfo(e.getMessage(), request.getRequestURL().toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>CentOS-7-搭建生产环境</title>
    <link href="https://www.amorou.cn/2017-01-03/CentOS-7-%E6%90%AD%E5%BB%BA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83.html"/>
    <id>https://www.amorou.cn/2017-01-03/CentOS-7-搭建生产环境.html</id>
    <published>2017-01-03T08:21:55.000Z</published>
    <updated>2019-08-11T00:53:48.587Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="CentOS-7-搭建生产环境"><a href="#CentOS-7-搭建生产环境" class="headerlink" title="CentOS-7-搭建生产环境"></a>CentOS-7-搭建生产环境</h1><h2 id="一、Hyper-V安装CentOS-7"><a href="#一、Hyper-V安装CentOS-7" class="headerlink" title="一、Hyper-V安装CentOS-7"></a>一、Hyper-V安装CentOS-7</h2><p>Hyper-V是微软的一款虚拟化产品，首先要注意，Hyper-V是基于64位系统的，所以你的电脑必须是64位的Windows7或者以上。对于Windows7系统，首先要安装远程服务器管理工具（<a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=7887" target="_blank" rel="noopener">http://www.microsoft.com/zh-cn/download/details.aspx?id=7887</a>），才能使用Hyper-V，Windows8及以上系统自带了Hyper-V，默认是关闭的，都是在控制面板里开启。</p><h3 id="1、开启Hyper-V"><a href="#1、开启Hyper-V" class="headerlink" title="1、开启Hyper-V"></a>1、开启Hyper-V</h3><p>在<strong>控制面板-&gt;程序-&gt;打开或关闭Windows功能</strong> 中启用Hyper-V。如下图所示：</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553308086282.png" alt="1553308086282"></p><p>安装成功后可以在开始菜单中的Windows管理工具中找到。</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553308148365.png" alt="1553308148365"></p><h3 id="2、使用Hyper-V连接到服务器"><a href="#2、使用Hyper-V连接到服务器" class="headerlink" title="2、使用Hyper-V连接到服务器"></a>2、使用Hyper-V连接到服务器</h3><p>打开Hyper-V管理器，点右侧<strong>连接到服务器</strong>，然后选择<strong>本地计算机</strong>，如下图所示：</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553308226548.png" alt="1553308226548"></p><p>这样就可以在自己的电脑上安装和使用虚拟机了，当然也可以连接到其他的计算机。为了能让虚拟机联网，先要设置一下Hyper-V的网络。如果你不知道什么是外网什么是内网，就按下面的方法操作，如果你知道，那下面的说明可以作为参考。</p><h3 id="3、创建虚拟网络交换机"><a href="#3、创建虚拟网络交换机" class="headerlink" title="3、创建虚拟网络交换机"></a>3、创建虚拟网络交换机</h3><p>点击<strong>虚拟交换机管理器-&gt;新建虚拟网络交换机-&gt;外部-&gt;创建虚拟交换机</strong>。然后设置虚拟交换机的名称、选择使用的网卡等。确定之后会提示应用网络更改，选择“是”。</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553308319721.png" alt="1553308319721"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309096107.png" alt="1553309096107"></p><h3 id="4、创建虚拟机"><a href="#4、创建虚拟机" class="headerlink" title="4、创建虚拟机"></a>4、创建虚拟机</h3><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309126259.png" alt="1553309126259"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309142050.png" alt="1553309142050"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309152742.png" alt="1553309152742"></p><p>虚拟机的名称可以随便取，建议按照功能或者版本取，便于识别和管理。默认情况下虚拟机会放在C盘，考虑到C盘容量并不是很大，选择将虚拟机存储在其他位置（<strong>建议在Hyper-V的设置里将虚拟硬盘和虚拟机都改成其他位置，这样以后建立其他虚拟机就不用每次都改了</strong>）</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309175598.png" alt="1553309175598"></p><p>如果你电脑内存比较大（比如8G）可以分2G。如果比较吃紧，512M也可以的。</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309187999.png" alt="1553309187999"></p><p>下面这一步就是要让你的虚拟机能够联网，选择刚才建立的虚拟交换机</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309207532.png" alt="1553309207532"></p><p>一般情况下，10G的虚拟硬盘足已，也可以酌情分配</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309216436.png" alt="1553309216436"></p><p>我是用ISO文件安装CentOS-7，因此这一步要选择ISO镜像，自己按需选择。</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309227607.png" alt="1553309227607"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309233027.png" alt="1553309233027"></p><p>完成之后（在中间的窗口选中建立的虚拟机，然后点击右侧<strong>连接</strong>选项也会出现），选择第二个按钮<strong>启动</strong>，就可以开始虚拟机的安装了，和真机安装没什么区别。</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309243559.png" alt="1553309243559"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309247533.png" alt="1553309247533"></p><p>选中第一个<strong>Install CentOS 7</strong>回车，等待片刻出现如下图形界面</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309268643.png" alt="1553309268643"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309274677.png" alt="1553309274677"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309279504.png" alt="1553309279504"></p><p>此处需要自行设置root管理用户密码</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309287846.png" alt="1553309287846"></p><p>安装完成后点击重启</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309295468.png" alt="1553309295468"></p><p>此时我们就可以使用之前的root帐号进行登录和后续操作了。</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553309315079.png" alt="1553309315079"></p><h2 id="二、WinSCP连接CentOS-7"><a href="#二、WinSCP连接CentOS-7" class="headerlink" title="二、WinSCP连接CentOS-7"></a>二、WinSCP连接CentOS-7</h2><p>使用WinSCP进行ssh连接的时候需要被连接服务器的ip地址和开放的22端口。所以首先需要查询出我们虚拟机中安装的CentOS-7的ip地址。</p><h3 id="1、查看IP地址"><a href="#1、查看IP地址" class="headerlink" title="1、查看IP地址"></a>1、查看IP地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553330242055.png" alt="1553330242055"></p><p>但是此时图中的结果却没有显示局域网的IP地址</p><h3 id="2、激活网卡"><a href="#2、激活网卡" class="headerlink" title="2、激活网卡"></a>2、激活网卡</h3><p>修改<strong><em>/etc/sysconfig/network-scripts/ifcfg-eth0</em></strong>文件，将<strong><em>ONBOOT=no</em></strong>修改为<strong><em>ONBOOT=yes</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">$ vi ifcfg-eth0</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553330467887.png" alt="1553330467887"></p><p>按【<strong>i</strong>】键进入编辑模式，并修改<strong><em>ONBOOT=no</em></strong>为<strong><em>ONBOOT=yes</em></strong>，然后按【<strong>esc</strong>】进入命令模式，输入以下命令保存并退出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ :wq</span><br></pre></td></tr></table></figure><h3 id="3、重启网卡"><a href="#3、重启网卡" class="headerlink" title="3、重启网卡"></a>3、重启网卡</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service network restart</span><br></pre></td></tr></table></figure><p>执行以上命令重启网卡服务，使我们的修改生效。</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553330793243.png" alt="1553330793243"></p><h3 id="4、查看IP地址"><a href="#4、查看IP地址" class="headerlink" title="4、查看IP地址"></a>4、查看IP地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553330850839.png" alt="1553330850839"></p><p>现在可以看到我们的CentOS-7服务器已经有局域网地址，不出意外的话使用WinSCP应该能够连接上了。</p><h3 id="5、WinSCP连接CentOS-7"><a href="#5、WinSCP连接CentOS-7" class="headerlink" title="5、WinSCP连接CentOS-7"></a>5、WinSCP连接CentOS-7</h3><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553330979734.png" alt="1553330979734"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553331052906.png" alt="1553331052906"></p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553331081024.png" alt="1553331081024"></p><p>到这里我们就基本完成了SSH客户端对虚拟机CentOS-7服务器的远程连接，此后我们就可以进行服务部署等操作了。</p><h2 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h2><h3 id="1、新建开发环境目录"><a href="#1、新建开发环境目录" class="headerlink" title="1、新建开发环境目录"></a>1、新建开发环境目录</h3><p>这里我将会在<strong><em>usr</em></strong>目录下新建一个<strong><em>dev_home</em></strong>目录作为后续的容器及一些中间件安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr</span><br><span class="line">$ mkdir dev_home</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553331316727.png" alt="1553331316727"></p><h3 id="2、安装wget"><a href="#2、安装wget" class="headerlink" title="2、安装wget"></a>2、安装wget</h3><p>CentOS wget是一个从网络上自动下载文件的自由工具。它支持HTTP，HTTPS和FTP协议，可以使用HTTP代理. 所谓的自动下载是指，CentOS wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个CentOS wget下载任务，然后退出系统，CentOS wget将在后台执行直到任务完成，相对于其它大部分浏览器在下载大量数据时需要用户一直的参与，这省去了极大的麻烦。</p><p>wget可以跟踪HTML页面上的链接依次下载来创建远程服务器的本地版本，完全重建原始站点的目录结构。这又常被称作”递归下载”。在递归下载的时候，wget遵循Robot Exclusion标准(/robots.txt). wget可以在下载的同时，将链接转换成指向本地文件，以方便离线浏览。</p><p>wget非常稳定,它在带宽很窄的情况下和不稳定网络中有很强的适应性.如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install wget</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553332474112.png" alt="1553332474112"></p><h3 id="3、关闭防火墙"><a href="#3、关闭防火墙" class="headerlink" title="3、关闭防火墙"></a>3、关闭防火墙</h3><p>因为我们后续几个章节需要在宿主机上访问CentOS服务器中的一些服务，所以这里我们关闭防火墙设置，以便于后续的操作，正常情况下应该只需要开放部分端口就可以了，这里不做过多操作介绍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h2 id="四、JDK安装配置"><a href="#四、JDK安装配置" class="headerlink" title="四、JDK安装配置"></a>四、JDK安装配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换工作目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/dev_home</span><br><span class="line"><span class="comment"># 新建java目录</span></span><br><span class="line">$ mkdir java</span><br><span class="line"><span class="comment"># 切换到java目录</span></span><br><span class="line">$ <span class="built_in">cd</span> java</span><br><span class="line"><span class="comment"># 下载jdk-下载地址直接去官网选中对应的版本</span></span><br><span class="line">$ wget --no-cookies --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie;"</span> https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 解压压缩包</span></span><br><span class="line">$ tar xvf jdk-8u201-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 修改[/etc/profile]文件，追加环境变量配置-或者直接使用WinSCP方便操作</span></span><br><span class="line">$ vi /etc/profile</span><br></pre></td></tr></table></figure><p>追加的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/dev_home/java/jdk1.8.0_201</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553333630864.png" alt="1553333630864"></p><p>对于/etc/profile编写完成之后是不够的，还需要最后一个步骤，就是让刚刚我们修改的文件变成有效起来，所以我们再输入一个命令，让修改生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /</span><br><span class="line"><span class="comment"># 使新建立的环境变量立刻生效</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 查看java版本</span></span><br><span class="line">$ java -version</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553333773916.png" alt="1553333773916"></p><h2 id="五、Tomcat安装配置"><a href="#五、Tomcat安装配置" class="headerlink" title="五、Tomcat安装配置"></a>五、Tomcat安装配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到/usr/dev_home/目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> usr/dev_home</span><br><span class="line"><span class="comment"># 新建tomcat目录</span></span><br><span class="line">$ mkdir tomcat</span><br><span class="line"><span class="comment"># 切换到tomcat目录</span></span><br><span class="line">$ <span class="built_in">cd</span> tomcat</span><br><span class="line"><span class="comment"># 下载-下载地址直接去官网复制</span></span><br><span class="line">$ wget http://mirrors.shu.edu.cn/apache/tomcat/tomcat-8/v8.5.39/bin/apache-tomcat-8.5.39.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar xvf apache-tomcat-8.5.39.tar.gz</span><br><span class="line"><span class="comment"># 切换到bin目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> apache-tomcat-8.5.39/bin</span><br><span class="line"><span class="comment"># 默认配置启动tomcat</span></span><br><span class="line">$ ./startup.sh</span><br><span class="line"><span class="comment"># 关闭tomcat</span></span><br><span class="line">$ ./shutdown.sh</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553334006760.png" alt="1553334006760"></p><p>此时在宿主机中访问我们CentOS服务器的地址和tomcat的8080端口，如下图：</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553334273951.png" alt="1553334273951"></p><p>此时我们的Tomcat环境就安装配置完成，至于Tomcat的一些其他配置同Windows中的操作一样，这里也不做过多讲解。</p><h2 id="六、Nginx安装配置"><a href="#六、Nginx安装配置" class="headerlink" title="六、Nginx安装配置"></a>六、Nginx安装配置</h2><p>先执行以下命令，安装Nginx依赖库,如果缺少依赖库，可能会安装失败，具体可以参考文章后面的错误提示信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc-c++</span><br><span class="line">$ yum install pcre</span><br><span class="line">$ yum install pcre-devel</span><br><span class="line">$ yum install zlib </span><br><span class="line">$ yum install zlib-devel</span><br><span class="line">$ yum install openssl</span><br><span class="line">$ yum install openssl-devel</span><br></pre></td></tr></table></figure><h3 id="1、安装nginx"><a href="#1、安装nginx" class="headerlink" title="1、安装nginx"></a>1、安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到/usr/dev_home/目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> usr/dev_home</span><br><span class="line"><span class="comment"># 新建nginx目录</span></span><br><span class="line">$ mkdir nginx</span><br><span class="line"><span class="comment"># 切换到nginx目录</span></span><br><span class="line">$ <span class="built_in">cd</span> nginx</span><br><span class="line"><span class="comment"># 下载-下载地址直接去官网复制</span></span><br><span class="line">$ wget http://nginx.org/download/nginx-1.15.9.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar xvf nginx-1.15.9.tar.gz</span><br><span class="line"><span class="comment"># 进入安装包目录</span></span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.15.9</span><br><span class="line"><span class="comment"># 配置安装选项、--prefix配置编译安装的路径，这里配置我们自己的路径，默认是/usr/local/nginx</span></span><br><span class="line">$ ./configure --prefix=/usr/dev_home/nginx/</span><br></pre></td></tr></table></figure><h3 id="2、安装必要的库"><a href="#2、安装必要的库" class="headerlink" title="2、安装必要的库"></a>2、安装必要的库</h3><p>如果没有执行之前的命令，那么运行<code>./configure</code>命令时，会报错，如下图：</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553335544873.png" alt="1553335544873"></p><p>找不到<strong><em>C</em></strong>编译器，所以我们还需要安装gcc工具集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc-c++</span><br></pre></td></tr></table></figure><hr><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553335961131.png" alt="1553335961131"></p><p>Nginx的<code>rewrite</code>模块依赖于PCRE库，所以我们还需要安装PCRE库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install pcre</span><br><span class="line">$ yum install pcre-devel</span><br></pre></td></tr></table></figure><hr><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553336342636.png" alt="1553336342636"></p><p>Nginx的<code>gzip</code>模块依赖于zlib库，所以我们还需要安装zlib库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install zlib </span><br><span class="line">$ yum install zlib-devel</span><br></pre></td></tr></table></figure><hr><p>再次运行<code>./configure</code>命令：</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553336644310.png" alt="1553336644310"></p><p>到这里如果没有出现<code>./configure: error</code>提示，表示当前环境可以安装nginx，也就是说<code>gcc-c++</code>、<code>pcre</code>、<code>zlib</code>库是必须的，如果nginx需要使用到ssl模块，那么还需要安装<code>openssl</code>库，不过不是必须的。</p><h3 id="3、编译nginx"><a href="#3、编译nginx" class="headerlink" title="3、编译nginx"></a>3、编译nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>没有出错的话，表示nginx已经成功安装完成，默认安装位置为/usr/local/nginx，不过我们之前配置的路径是/usr/dev_home/nginx，安装完成后/usr/dev_home/nginx/nginx-1.15.9就可以删除掉了。</p><h3 id="4、启动Nginx"><a href="#4、启动Nginx" class="headerlink" title="4、启动Nginx"></a>4、启动Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/dev_home/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>此时在宿主机中访问我们CentOS服务器的地址和nginx默认的80端口，如下图：</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553337937600.png" alt="1553337937600"></p><p>此时我们的Nginx环境就安装配置完成，至于Nginx的一些其他配置同Windows中的操作一样，这里也不做过多讲解。</p><h3 id="5、常用命令"><a href="#5、常用命令" class="headerlink" title="5、常用命令"></a>5、常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">$ /usr/dev_home/nginx/sbin/nginx</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ /usr/dev_home/nginx/sbin/nginx –s stop</span><br><span class="line"><span class="comment"># 有序的退出</span></span><br><span class="line">$ /usr/dev_home/nginx/sbin/nginx –s quit</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ /usr/dev_home/nginx/sbin/nginx –s reload</span><br><span class="line"><span class="comment"># 测试配置文件是否正常</span></span><br><span class="line">$ /usr/dev_home/nginx/sbin/nginx –t</span><br><span class="line"><span class="comment"># 强制关闭</span></span><br><span class="line">$ pkill nginx</span><br></pre></td></tr></table></figure><h2 id="七、Redis安装配置"><a href="#七、Redis安装配置" class="headerlink" title="七、Redis安装配置"></a>七、Redis安装配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到/usr/dev_home/目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> usr/dev_home</span><br><span class="line"><span class="comment"># 新建redis目录</span></span><br><span class="line">$ mkdir redis</span><br><span class="line"><span class="comment"># 切换到redis目录</span></span><br><span class="line">$ <span class="built_in">cd</span> redis</span><br><span class="line"><span class="comment"># 下载-下载地址直接去官网复制</span></span><br><span class="line">$ wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar xvf redis-5.0.3.tar.gz</span><br><span class="line"><span class="comment"># 切换到redis安装目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> redis-5.0.3</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>完成以上面步骤后，如果没有报错，那么说明Redis已经安装成功，接下来我们说一下Redis的启动方式。</p><h3 id="1、前端模式启动"><a href="#1、前端模式启动" class="headerlink" title="1、前端模式启动"></a>1、前端模式启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/dev_home/redis/redis-5.0.3/src/redis-server</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553312783956.png" alt="1553312783956"></p><p>此时我们的Redis就启动成功了，但是发现一个问题，此时我们不能做其他操作了，如果要操作必须使用Ctrl+C，同时redis-server程序结束，不建议使用此方法。</p><h3 id="2、后端模式启动"><a href="#2、后端模式启动" class="headerlink" title="2、后端模式启动"></a>2、后端模式启动</h3><p>修改redis.conf，把daemonize no修改成daemonize yes，保存退出；</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553313010211.png" alt="1553313010211"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动时，指定配置文件；</span></span><br><span class="line">$ ./redis-server ../redis.conf</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553313212340.png" alt="1553313212340"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看Redis运行情况</span></span><br><span class="line">$ ps -ef | grep redis</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553313349816.png" alt="1553313349816"></p><h3 id="3、内置客户端连接"><a href="#3、内置客户端连接" class="headerlink" title="3、内置客户端连接"></a>3、内置客户端连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有密码启动</span></span><br><span class="line">$ ./redis-cli</span><br><span class="line"><span class="comment"># 有密码启动</span></span><br><span class="line">$ ./redis-cli -a 密码 -h 127.0.0.1 -p 6379</span><br><span class="line"><span class="comment"># 关闭Redis服务器</span></span><br><span class="line">$ ./redis-cli shutdown</span><br></pre></td></tr></table></figure><p>此时我们还没有配置密码，所以直接启动就行了</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553313516293.png" alt="1553313516293"></p><h3 id="4、外部客户端连接"><a href="#4、外部客户端连接" class="headerlink" title="4、外部客户端连接"></a>4、外部客户端连接</h3><p>​ 完成上一步操作后我们虚拟机中的Redis内置客户端就可以连接了，但是在实际使用的肯定还会有其他局域网中的服务器需要连接Redis，此时需要关闭Redis的防火墙。</p><p>更改redis.conf 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br><span class="line">protected-mode yes</span><br></pre></td></tr></table></figure><p>更改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># bind 127.0.0.1</span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553313967585.png" alt="1553313967585"></p><p>重启redis，首先Ctrl + C退出Redis客户端，再执行以下命令重启Redis服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./redis-cli shutdown</span><br><span class="line">$ ./redis-server ../redis.conf</span><br></pre></td></tr></table></figure><p>成功后我们再使用宿主机的Redis客户端连接虚拟机中Redis服务</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553339358856.png" alt="1553339358856"></p><p>关闭Redia防火墙后，建议开启密码，进行安全的连接，具体操作同Redis-Windows，这里不再赘述。</p><h2 id="八、MySQL安装配置"><a href="#八、MySQL安装配置" class="headerlink" title="八、MySQL安装配置"></a>八、MySQL安装配置</h2><p>在 Centos7 系统下使用 yum 命令安装 MySQL，需要注意的是 CentOS 7 版本中 MySQL数据库已从默认的程序列表中移除，所以在安装前我们需要先去官网下载 Yum 资源包，下载地址为：<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">$ rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">$ yum update</span><br><span class="line">$ yum install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">$ chown mysql:mysql -R /var/lib/mysql</span><br><span class="line"><span class="comment"># 初始化 MySQL</span></span><br><span class="line">$ mysqld --initialize</span><br><span class="line"><span class="comment"># 启动 MySQL</span></span><br><span class="line">$ systemctl start mysqld</span><br><span class="line"><span class="comment"># 查看 MySQL 运行状态</span></span><br><span class="line">$ systemctl status mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证 MySQL 安装</span></span><br><span class="line">$ mysqladmin --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 MySQL Client(Mysql客户端) 执行简单的SQL命令</span></span><br><span class="line">$ mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql安装成功后，默认的root用户密码为空，你可以使用以下命令来创建root用户的密码</span></span><br><span class="line">$ mysqladmin -u root password <span class="string">"admin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到Mysql服务器</span></span><br><span class="line">$ mysql -u root -p <span class="string">'admin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行授权操作：</span></span><br><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'admin'</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment"># 重载授权表：</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>此时我们可以在宿主机或者局域网中的其他计算机中使用MySQL客户端进行连接。</p><p><img src="/2017-01-03/CentOS-7-搭建生产环境.htm/1553358111485.png" alt="1553358111485"></p><p>再次尝试就可以连接到MySQL数据库了。</p><h2 id="CentOS防火墙"><a href="#CentOS防火墙" class="headerlink" title="CentOS防火墙"></a>CentOS防火墙</h2><p>CentOS7使用firewalld打开关闭防火墙与端口</p><p>1、firewalld的基本使用</p><blockquote><p>启动： systemctl start firewalld<br>关闭： systemctl stop firewalld<br>查看状态： systemctl status firewalld<br>开机禁用 ： systemctl disable firewalld<br>开机启用 ： systemctl enable firewalld</p></blockquote><p>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p><blockquote><p>启动一个服务：systemctl start firewalld.service<br>关闭一个服务：systemctl stop firewalld.service<br>重启一个服务：systemctl restart firewalld.service<br>显示一个服务的状态：systemctl status firewalld.service<br>在开机时启用一个服务：systemctl enable firewalld.service<br>在开机时禁用一个服务：systemctl disable firewalld.service<br>查看服务是否开机启动：systemctl is-enabled firewalld.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl –failed</p></blockquote><p>3.配置firewalld-cmd</p><blockquote><p>查看版本： firewall-cmd –version<br>查看帮助： firewall-cmd –help<br>显示状态： firewall-cmd –state<br>查看所有打开的端口： firewall-cmd –zone=public –list-ports<br>更新防火墙规则： firewall-cmd –reload<br>查看区域信息: firewall-cmd –get-active-zones<br>查看指定接口所属区域： firewall-cmd –get-zone-of-interface=eth0<br>拒绝所有包：firewall-cmd –panic-on<br>取消拒绝状态： firewall-cmd –panic-off<br>查看是否拒绝： firewall-cmd –query-panic</p></blockquote><p>4.那怎么开启一个端口呢</p><blockquote><p>添加（–permanent永久生效，没有此参数重启后失效）：firewall-cmd –zone=public –add-port=80/tcp –permanent</p><p>重新载入：firewall-cmd –reload</p><p>查看：firewall-cmd –zone= public –query-port=80/tcp</p><p>删除：firewall-cmd –zone= public –remove-port=80/tcp –permanent</p></blockquote><h2 id="yum使用阿里云镜像"><a href="#yum使用阿里云镜像" class="headerlink" title="yum使用阿里云镜像"></a>yum使用阿里云镜像</h2><p>yum的默认地址下载太慢，所以用国内比较稳定的阿里云源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、备份</span></span><br><span class="line">$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/</span></span><br><span class="line"><span class="comment">## CentOS 5</span></span><br><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class="line"><span class="comment">## CentOS 6</span></span><br><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="comment">## CentOS 7</span></span><br><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、生成缓存</span></span><br><span class="line">$ yum makecache</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://www.amorou.cn/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://www.amorou.cn/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>第三章：SpringBoot配置深入</title>
    <link href="https://www.amorou.cn/2017-01-02/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9ASpringBoot%E9%85%8D%E7%BD%AE%E6%B7%B1%E5%85%A5.html"/>
    <id>https://www.amorou.cn/2017-01-02/第三章：SpringBoot配置深入.html</id>
    <published>2017-01-02T06:18:23.000Z</published>
    <updated>2019-08-11T00:53:48.714Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>在之前已经基本上了解了整个SpringBoot运行机制，但是也需要清楚的认识到以下的问题，在实际的项目开发之中，尤其是Java的MVC版项目，所有的项目都一定需要满足于如下几点要求：</p><ul><li>访问的端口不能够是8080，应该使用默认的80端口；</li><li>在项目之中为了方便进行数据的维护，建议建立一系列的*.properties配置文件，例如：提示消息、跳转路径；</li><li>所有的控制器现在都采用了Rest风格输出，但是正常来讲，信息的显示应该交给页面（不再是JSP）负责完成；</li><li>在进行项目打包的时候，应该考虑到不同的profile配置。</li></ul><h1 id="改变环境属性"><a href="#改变环境属性" class="headerlink" title="改变环境属性"></a>改变环境属性</h1><p>通过当前的执行可以发现，默认情况下，在SpringBoot里面启动WEB容器为Tomcat：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 15400 --- [main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</span><br></pre></td></tr></table></figure><h2 id="properties配置文件"><a href="#properties配置文件" class="headerlink" title="properties配置文件"></a>properties配置文件</h2><p>从实际的开发来讲，我们的WEB部署项目如果是单独运行不可能运行再8080端口上，从正常来讲我们的服务器应该运行在80端口上，如果要想修改这样的默认环境，则必须编写与之对应的配置文件，该配置文件一定要卸载classpath之中，例如：项目中的“src/main/resources”就是一个classpath路径，那么这个目录之中直接创建有一个<code>application.properties</code>（文件名称一定不要改变）。</p><p><img src="/2017-01-02/第三章：SpringBoot配置深入.htm/1553588122857.png" alt="1553588122857"></p><p><strong>范例：</strong>定义<code>application.properties</code>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置Tomcat的运行服务所在端口</span><br><span class="line">server.port=80</span><br></pre></td></tr></table></figure><p>随后重新运行程序会出现有如下的提示信息：“Tomcat started on port(s): 80 (http)”</p><p><strong>范例：</strong>如果有需要也可以配置contextPath的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 设置Tomcat的运行服务所在端口</span><br><span class="line">server.port=80</span><br><span class="line"># 可以配置ContextPath访问路径，但是在实际开发之中是不能够进行配置的</span><br><span class="line">server.context-path=/base</span><br></pre></td></tr></table></figure><p>此时的访问路径需要最佳contextPath前缀：<a href="http://localhost/base/" target="_blank" rel="noopener">http://localhost/base/</a><br>严格来讲在SpringBoot、SpringCloud里面可以使用两类配置文件：<code>application.properties</code>、<code>application.yml</code>。</p><h2 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h2><p><strong>YAML文件：</strong><br>这是一种结构话的文件数据，其在很多的地方上都使用过，例如：Apache Storm开发组件上进行配置的时候使用的就是yml配置文件，该配置文件的全称（Yet Another Markup Languange、仍然是一种标记语言）</p><p><strong>范例：</strong>定义<code>application.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span>  <span class="comment"># 此处设置的服务访问的端口配置</span></span><br></pre></td></tr></table></figure><p><strong>无聊的测试：</strong>如果<code>application.properties</code>和<code>application.yml</code>两个文件同时存在使用哪个？<br>那么这个时候优先使用<code>application.properties</code>配置文件的加载，如果现在两个配置项的作用冲突了，则以<code>properties</code>为主，如果不冲突，则以存在的为主。</p><p>在之前默认使用的WEB容器是Tomcat容器，实际上再SpringBoot里面如果用户有需要也可以将容器更换为jetty容器，如果现在要想使用这个容器，则只需要增加一些依赖即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在以后项目以微服务的方式进行打包发布的时候，强烈建议使用jetty服务进行发布。</p><h1 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h1><p>在实际的项目开发之中资源文件一定不可或缺，因为所有的提示文字信息都要求再资源文件之中进行定义，而且资源文件是实现国际化技术的主要手段。如果要想在SpringBoot里面进行资源文件的配置只需要做一些简单的<code>application.yml</code>配置即可，而且所有注入的资源文件都可以像最初的Spring处理那样直接使用<code>MessageSource</code>进行读取。</p><h2 id="为了统一管理资源文件，在“src-main-resources”目录之中建立有一个i18n的存储目录。"><a href="#为了统一管理资源文件，在“src-main-resources”目录之中建立有一个i18n的存储目录。" class="headerlink" title="为了统一管理资源文件，在“src/main/resources”目录之中建立有一个i18n的存储目录。"></a>为了统一管理资源文件，在“src/main/resources”目录之中建立有一个i18n的存储目录。</h2><h2 id="在“src-main-resources-i18n”目录之中建立有两个资源目录："><a href="#在“src-main-resources-i18n”目录之中建立有两个资源目录：" class="headerlink" title="在“src/main/resources/i18n”目录之中建立有两个资源目录："></a>在“src/main/resources/i18n”目录之中建立有两个资源目录：</h2><ul><li>建立<code>Messages.properties</code>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">welcome.url=com.example.springboot</span><br><span class="line">welcome.msg=欢迎&#123;0&#125;光临!</span><br></pre></td></tr></table></figure><ul><li>建立<code>Pages.properties</code>配置文件：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">member.add.page=/pages/back/admin/member/member_add.jsp</span></span><br><span class="line"><span class="string">member.add.action=/pages/back/admin/member/member_add.action</span></span><br></pre></td></tr></table></figure><h2 id="修改application-yml文件："><a href="#修改application-yml文件：" class="headerlink" title="修改application.yml文件："></a>修改application.yml文件：</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span>  <span class="comment"># 此处设置的服务访问的端口配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span>     <span class="comment"># 表示该配置直接为Spring容器负责处理</span></span><br><span class="line"><span class="attr">  messages:</span> <span class="comment"># 表示进行资源配置</span></span><br><span class="line"><span class="attr">    basename:</span> <span class="string">i18n/Messages,i18n/Messages.pages</span> <span class="comment"># 资源文件的名称</span></span><br></pre></td></tr></table></figure><h2 id="当执行完以上的配置之后会自动为用户创建MessageSource对象，那么用户再使用的时候直接注入此对象即可。"><a href="#当执行完以上的配置之后会自动为用户创建MessageSource对象，那么用户再使用的时候直接注入此对象即可。" class="headerlink" title="当执行完以上的配置之后会自动为用户创建MessageSource对象，那么用户再使用的时候直接注入此对象即可。"></a>当执行完以上的配置之后会自动为用户创建MessageSource对象，那么用户再使用的时候直接注入此对象即可。</h2><ul><li>考虑到实际开发的标准性，所以现在建议创建一个父的控制器的抽象类；<code>AbstractBaseController</code>；在此抽象类之中进行资源读取类的配置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBaseController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String key, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> messageSource.getMessage(key, args, Locale.getDefault());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在控制器的子类之中读取配置信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> <span class="keyword">extends</span> <span class="title">AbstractBaseController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/message"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">message</span><span class="params">(String mid)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"访问地址："</span> + <span class="keyword">super</span>.getMessage(<span class="string">"member.add.page"</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getMessage(<span class="string">"welcome.msg"</span>, mid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个JUnit测试类，来测试以上的控制器程序是否正确。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.example.microboot.controller.MessageController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = StartSpringBootMain.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageControllerTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MessageController messageController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(messageController.message(<span class="string">"张三"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过整个SpringBoot执行可以清楚的发现，再SpringBoot里面所有对象信息的注入配置操作，都直接通过一行简单的字符串实现了，而且最终也能够保持与之前同样的运行效果。</p><blockquote><p><a href="https://github.com/amorous/Spring-Boot/tree/master/microboot/microboot-configure" target="_blank" rel="noopener">代码下载: microboot-configure</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第二章：SpringBoot基础知识</title>
    <link href="https://www.amorou.cn/2017-01-02/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9ASpringBoot%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
    <id>https://www.amorou.cn/2017-01-02/第二章：SpringBoot基础知识.html</id>
    <published>2017-01-02T05:06:35.000Z</published>
    <updated>2019-08-11T00:53:48.722Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>在<a href="/2017-01-02/第一章：SpringBoot入门.html" title="第一章">第一章</a>所建立的SpringBoot项目只是根据官方文档实现的一个基础程序模型，但是这样的代码肯定不适合于实际的项目开发，因为从实际的Maven项目来讲，应该要有统一的父pom.xml文件。</p><h1 id="统一父pom管理"><a href="#统一父pom管理" class="headerlink" title="统一父pom管理"></a>统一父pom管理</h1><h2 id="首先建立一个microboot的Maven项目："><a href="#首先建立一个microboot的Maven项目：" class="headerlink" title="首先建立一个microboot的Maven项目："></a>首先建立一个microboot的Maven项目：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>microboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>1.5.7.RELEASE<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>microboot-base<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span><span class="comment">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>microboot-base<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="建立microboot-basede-子模块，实现第一章的SpringBoot程序，修改pom-xml文件，追加SpringBoot的WEB启动包"><a href="#建立microboot-basede-子模块，实现第一章的SpringBoot程序，修改pom-xml文件，追加SpringBoot的WEB启动包" class="headerlink" title="建立microboot-basede 子模块，实现第一章的SpringBoot程序，修改pom.xml文件，追加SpringBoot的WEB启动包"></a>建立microboot-basede 子模块，实现第一章的SpringBoot程序，修改pom.xml文件，追加SpringBoot的WEB启动包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microboot-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>microboot-base<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>microboot-base<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span><span class="comment">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="建立与之前一样的程序类；"><a href="#建立与之前一样的程序类；" class="headerlink" title="建立与之前一样的程序类；"></a>建立与之前一样的程序类；</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(SampleController.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这样的状态下才可以进行后续的代码编写。</p><h1 id="SpringBoot代码测试"><a href="#SpringBoot代码测试" class="headerlink" title="SpringBoot代码测试"></a>SpringBoot代码测试</h1><p>上面的程序里面已经实现了一个最为简单的控制器程序类，不过从实际项目的角度来讲，必须考虑到代码的测试问题，而且现在的程序代码属于SpringBoot，则需要在项目之中进行如下的<code>pom.xml</code>文件的变更。</p><h2 id="【microboot-base模块】修改pom-xml配置文件，追加SpringBoot测试支持。"><a href="#【microboot-base模块】修改pom-xml配置文件，追加SpringBoot测试支持。" class="headerlink" title="【microboot-base模块】修改pom.xml配置文件，追加SpringBoot测试支持。"></a>【microboot-base模块】修改pom.xml配置文件，追加SpringBoot测试支持。</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要进行java测试，最简单实用的就是junit，所以这个开发包一定要随测试一起导入。</p><h2 id="【microboot-base模块】建立一个测试程序类。"><a href="#【microboot-base模块】建立一个测试程序类。" class="headerlink" title="【microboot-base模块】建立一个测试程序类。"></a>【microboot-base模块】建立一个测试程序类。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes=SampleController.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SampleController sampleController;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TestCase.assertEquals(<span class="keyword">this</span>.sampleController.home(), <span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2017-01-02/第二章：SpringBoot基础知识.htm/1553654904397.png" alt="1553654904397"></p><h1 id="SpringBoot启动注解分析"><a href="#SpringBoot启动注解分析" class="headerlink" title="SpringBoot启动注解分析"></a>SpringBoot启动注解分析</h1><p>现在为止已经可以发现再整个SpringBoot程序里面使用了许多的注解，首先把这些注解做一个列表：</p><style>table th:nth-of-type(1){width:5%}table th:nth-of-type(2){width:25%}table th:nth-of-type(3){width:70%}</style><table><thead><tr><th>No</th><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>@Controller</td><td>进行控制器的配置注解，这个注解所在的类就是控制器类</td></tr><tr><td>2</td><td>@EnableAutoConfiguration</td><td>开启自动配置处理</td></tr><tr><td>3</td><td>@RequestMapping(“/“)</td><td>表示访问的映射路径，此时的路径为“/”，访问地址：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></td></tr><tr><td>4</td><td>@ResponseBody</td><td>在Restful架构之中，该注解表示直接将返回的数据以字符串或JSON的形式获得</td></tr></tbody></table><p>可以发现再给定的几个注解之中“@EnableAutoConfiguration”为整个SpringBoot的启动注解配置，为就是说这个注解应该随着程序的主类一起进行定义。<br>而对于控制器程序类，由于在项目之中会有许多的控制器，那么最好将这些控制器统一保存在一个包中，下面将所有的控制器程序类保存在“com.example.microboot.controller”，是“com.example.microboot”子包。<br>强烈建议（Spring官方建议）：如果想要进行简单方便的开发，所有的程序类一定要再启动类所在包的子包下。</p><h2 id="【microboot-base模块】建立一个com-example-microboot-controller-HelloController程序类；"><a href="#【microboot-base模块】建立一个com-example-microboot-controller-HelloController程序类；" class="headerlink" title="【microboot-base模块】建立一个com.example.microboot.controller.HelloController程序类；"></a>【microboot-base模块】建立一个com.example.microboot.controller.HelloController程序类；</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【microboot-base模块】启动程序主类；"><a href="#【microboot-base模块】启动程序主类；" class="headerlink" title="【microboot-base模块】启动程序主类；"></a>【microboot-base模块】启动程序主类；</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.example.microboot"</span>)<span class="comment">// 定义一个访问路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(SampleController.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用复合注解"><a href="#使用复合注解" class="headerlink" title="使用复合注解"></a>使用复合注解</h2><p>【microboot-base模块】以上的做法只是传统程序的开发做法，因为现在位置为止，毕竟是两块程序类，这两个彼此之间的联系需要有一个连接点，而程序中配置的“@ComponentScan”就是负责这个连接处理，但是SpringBoot考虑到了此类的配置问题，所以踢出了一个更简化策略，该策略的核心思想：既然程序主类会在所有开发包的父包里面，那么能不能简化点取得配置呢，为此在实际的开发中，会使用一个特殊的复合注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">// 启动SpringBoot程序,而后自带子包扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(SampleController.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“@SpringBootApplicati = @EnableAutoConfiguration + @ComponentScan + 其他配置”。正式因为他有这样的特点，所以当以后使用Bean实现配置处理的时候将会非常的容易。<br>参见源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;java.lang.annotation.ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters=&#123;<span class="meta">@org</span>.springframework.context.annotation.ComponentScan.Filter(type=org.springframework.context.annotation.FilterType.CUSTOM, classes=&#123;org.springframework.boot.context.TypeExcludeFilter.class&#125;), <span class="meta">@org</span>.springframework.context.annotation.ComponentScan.Filter(type=org.springframework.context.annotation.FilterType.CUSTOM, classes=&#123;AutoConfigurationExcludeFilter.class&#125;)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;……&#125;</span><br></pre></td></tr></table></figure><h1 id="路径访问控制"><a href="#路径访问控制" class="headerlink" title="路径访问控制"></a>路径访问控制</h1><p>在一个实际的项目开发之中，控制器的路径可能会有很多个，而且再进行控制器编写的时候也会有两种运行模式：跳转配置、Restful显示。那么下面来观察关于路径的详细描述。</p><h2 id="在之前所编写的控制器里面有如下两个注解配置使用："><a href="#在之前所编写的控制器里面有如下两个注解配置使用：" class="headerlink" title="在之前所编写的控制器里面有如下两个注解配置使用："></a>在之前所编写的控制器里面有如下两个注解配置使用：</h2><ol><li>@Controller：在类上定义，表示定义的是控制器；</li><li>@ResponseBody：将控制器中方法的返回值变为rest内容。</li></ol><p>但是如果说现在一个项目里面可能控制器之中返回的全部都是Restful信息，这样分别定义就太麻烦了，为此再SpringBoot里面又提供了一个复合注解：“@RestController”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为从MVC实际标准来讲，控制器需要传递一些属性到页面上进行显示，按照这样的原则并不是所有的开发都会以Rest结构返回，但是Rest结构是SpringCloud的实现核心技术。</p><h2 id="现在所给出的控制器的类里面只是负责了简单的信息返回，那么实际上也可以进行参数的接受处理；最简单的做法是使用地址重写传递“-参数名-值”；"><a href="#现在所给出的控制器的类里面只是负责了简单的信息返回，那么实际上也可以进行参数的接受处理；最简单的做法是使用地址重写传递“-参数名-值”；" class="headerlink" title="现在所给出的控制器的类里面只是负责了简单的信息返回，那么实际上也可以进行参数的接受处理；最简单的做法是使用地址重写传递“?参数名=值”；"></a>现在所给出的控制器的类里面只是负责了简单的信息返回，那么实际上也可以进行参数的接受处理；最简单的做法是使用地址重写传递“?参数名=值”；</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/echo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"echo: "</span> + msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/echo?msg=hello" target="_blank" rel="noopener">http://localhost:8080/echo?msg=hello</a></p><h2 id="由于SpringBoot支持Rest风格处理，所以此时对于参数的接收可以采用路径参数的形式完成；"><a href="#由于SpringBoot支持Rest风格处理，所以此时对于参数的接收可以采用路径参数的形式完成；" class="headerlink" title="由于SpringBoot支持Rest风格处理，所以此时对于参数的接收可以采用路径参数的形式完成；"></a>由于SpringBoot支持Rest风格处理，所以此时对于参数的接收可以采用路径参数的形式完成；</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/echo/&#123;message&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(@PathVariable(<span class="string">"message"</span>)</span> String msg) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"echo: "</span> + msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/echo/hello" target="_blank" rel="noopener">http://localhost:8080/echo/hello</a><br>个人建议：虽然路径参数的形式属于rest操作标准，但是个人觉得使用地址重写传递参数更加简单，不过这一点使用什么样的模式来处理，取决于所处的项目团队。</p><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>现在每一次类级别的操作都要重新启动项目，但是在SpringBoot的处理操作中实际上已经充分考虑到了此类情况，所以追加有自动加载配置的依赖库，实现热部署；</p><ul><li>如果现在的项目是一个简单的SpringBoot的配置项目，则显示的项目信息如下：<br><img src="/2017-01-02/第二章：SpringBoot基础知识.htm/1553654943183.png" alt="1553654943183"></li><li>【microboot-base模块】如果现在程序中添加有如下的两个依赖库：修改pom.xml文件；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入完成之后可以观察项目上的提示信息：<br><img src="/2017-01-02/第二章：SpringBoot基础知识.htm/1553654950523.png" alt="1553654950523"></p><h1 id="使用内置对象"><a href="#使用内置对象" class="headerlink" title="使用内置对象"></a>使用内置对象</h1><p>通过整个SpringBoot程序发现，再SpringBoot中的控制器的形式和SpringMVC是一样的，所以如果现在想要再程序中使用JSP的内置对象，那么也可以按照与SpringMVC同样的方式进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/object"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">object</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"*** 客户端ip："</span> + request.getRemoteAddr());</span><br><span class="line">System.out.println(<span class="string">"*** 取得客户端相应编码："</span> + response.getCharacterEncoding());</span><br><span class="line">System.out.println(<span class="string">"*** 取得SessionID："</span> + request.getSession().getId());</span><br><span class="line">System.out.println(<span class="string">"*** 取得真实路径："</span> + request.getServletContext().getRealPath(<span class="string">"/upload/"</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"object"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*** 客户端ip：0:0:0:0:0:0:0:1</span><br><span class="line">*** 取得客户端相应编码：ISO-8859-1</span><br><span class="line">*** 取得SessionID：B639577D43042C054C16E0C94D7D55C8</span><br><span class="line">*** 取得真实路径：C:\Users\D\AppData\Local\Temp\tomcat-docbase.164888899979402928.8080\upload\</span><br></pre></td></tr></table></figure><p>通过以上的信息可以发现。此时的SpringBoot运行依然需要有一个工作目录，只不过这个工作目录是由SpringBoot自己定义的，主要就是当前用户的目录下存在</p><h1 id="项目打包部署"><a href="#项目打包部署" class="headerlink" title="项目打包部署"></a>项目打包部署</h1><p>SpringBoot作为微架构实现主要技术，其发布项目的方式极为简单，只需要你在你的项目中配置号插件，以及打包就可以进行了，并且这个执行不需要特别复杂的配置。</p><h2 id="添加打包发布处理插件"><a href="#添加打包发布处理插件" class="headerlink" title="添加打包发布处理插件"></a>添加打包发布处理插件</h2><p>【microboot项目】修改pom.xml配置文件，追加新的插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span><span class="comment">&lt;!-- 该插件主要功能是进行项目的打包发布处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!-- 设置程序执行的主类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.microboot.StartSpringBootMain<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于增加了新的插件，所以对于整个程序一定要进行整体的项目更新。</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>【microboot-base模块】将当前项目模块进行打包处理：clean package；</p><p><img src="/2017-01-02/第二章：SpringBoot基础知识.htm/1553654964591.png" alt="1553654964591"></p><p>此时形成“microboot.jar”程序文件，并且这个文件里面包含有全部的依赖支持库文件；</p><h2 id="部署运行"><a href="#部署运行" class="headerlink" title="部署运行"></a>部署运行</h2><p>将“microboot.jar”文件随意拷贝到一个路径之中，例如：D盘，而后进入到命令行方式下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar microboot.jar</span><br></pre></td></tr></table></figure><p>如果此时想要再Linux下执行，只需要将这个*.jar文件直接上传到Linux下，再执行以上命令即可。</p><blockquote><p><a href="https://github.com/amorous/Spring-Boot/tree/master/microboot/microboot-base" target="_blank" rel="noopener">代码下载: microboot-base</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>第一章：SpringBoot入门</title>
    <link href="https://www.amorou.cn/2017-01-02/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9ASpringBoot%E5%85%A5%E9%97%A8.html"/>
    <id>https://www.amorou.cn/2017-01-02/第一章：SpringBoot入门.html</id>
    <published>2017-01-02T02:06:12.000Z</published>
    <updated>2019-08-11T00:53:48.707Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h1><p>长期以来Java的开发一直让人所诟病：</p><blockquote><ol><li>Java项目开发复杂度极其高；</li><li>Java项目的维护非常困难；</li><li>在云时代如何实现项目的快速部署以及快速启动；</li><li>即便使用了大量的开发框架，发现我们的开发也没少多少。</li></ol></blockquote><p>当所有的人认为Spring不在前进的时候，Spring推出了微架构实现的两个重要开发框架：SpringBoot、SpringCloud。</p><h2 id="Java开发的复杂度是最高的？"><a href="#Java开发的复杂度是最高的？" class="headerlink" title="Java开发的复杂度是最高的？"></a>Java开发的复杂度是最高的？</h2><p>在软件行业里面，如果要说商用体系，排在第一位的永远是Java，因为Java的体系丰富，支持度高，安全性也高，但是同时所有的开发者也不得不去忍受Java中的以下痛苦：</p><blockquote><ul><li><p>Java里面提供的开发支持都属于原生操作，例如：JDBC，如果使用Java原生代码会重复编写大量的代码，例如：PreparedStatement操作；</p></li><li><p>Java进行WEB项目开发时，必须按照严格的格式进行WEB项目创建，每当修改WEB程序的时候，又需要进行Tomcat的重新启动；</p></li><li><p>Java中虽然提供了所谓的开发变准，但是所有的公司几乎都有可能有自己的标准，例如：JVM最初的标准就有三个，而且许多公司由于使用的版本不同也会造成部署的环境不同；</p></li><li><p>Java里面严格要求按照MVC的设计模式。</p><p><img src="/2017-01-02/第一章：SpringBoot入门.htm/1553654727699.png" alt="1553654727699"></p></li><li><p>以WEB开发为例，一个靓号的JSP程序代码里面不应该包含有任何的Scriptlet程序代码，但是要想做到这一步非常麻烦，有各种实现标准，例如：JSTL+EL、SpringTaglib、StratsTaglib、JSF、Shiro、SpringSecurity;</p></li><li><p>如果现在使用Node.JS、Python开发一个控制器程序类可能只需要几行代码，而Java要想开发这样一个程序，需要写一堆的代码，而且还要搞部署；</p></li></ul></blockquote><h2 id="Java项目的维护困难？"><a href="#Java项目的维护困难？" class="headerlink" title="Java项目的维护困难？"></a>Java项目的维护困难？</h2><p>Rest技术已经开始在行业中广为流传，而Java要想实现Rest架构的开发（基于Spring），那么也是相当麻烦的。</p><h2 id="如何实现项目的快速部署以及快速启动？"><a href="#如何实现项目的快速部署以及快速启动？" class="headerlink" title="如何实现项目的快速部署以及快速启动？"></a>如何实现项目的快速部署以及快速启动？</h2><p>Java后期的发展使用了大量的Maven技术作为开发，那么使用Maven之后发现传统的开发之中并没有逃离掉传统WEB的身影，所有的项目依然需要打包为WAR文件，而后上传到系统之中。使用Maven还有一个最大的痛：如果使用开发框架，那一堆的Maven的配置依赖库。</p><h2 id="即便使用了大量的开发框架，我们的开发也没少多少？"><a href="#即便使用了大量的开发框架，我们的开发也没少多少？" class="headerlink" title="即便使用了大量的开发框架，我们的开发也没少多少？"></a>即便使用了大量的开发框架，我们的开发也没少多少？</h2><p>现在行业之中，Spring已经作为了绝对的Java架构，但是如果要想在Spring之中整合RabbitMQ，Kafka、ActiveMQ、MySQL，Druid、Shiro；需要编写一堆的*.xml配置文件。</p><hr><p>所以再这样的一个大的背景下，很多人开始需求更多简便的开发，而遗憾的是这种简便的开发没有被JDK所支持、没有被JavaEE所支持，因为这些只是平台，平台所能够提供的只是最原始的技术支持。这一时刻由于Spring框架的升级而得到了新生，SpringBoot的出现，改变了所有Java开发的困境，ApringBoot的最终奉行的宗旨：废除所有的复杂开发，废除掉所有的配置文件，让开发变得更简单纯粹，核心：“零配置”。<br><img src="/2017-01-02/第一章：SpringBoot入门.htm/1553654738165.png" alt="1553654738165"><br><img src="/2017-01-02/第一章：SpringBoot入门.htm/1553654744467.png" alt="1553654744467"></p><p>SpringBoot之所以慢慢可以火遍全世界，是因为在SpringBoot中使用的大量注解还是之前Spring所提供的注解，那么这一点让所有的开发者几乎可以零适应进行完整过渡。</p><h1 id="SpringBoot快速入门"><a href="#SpringBoot快速入门" class="headerlink" title="SpringBoot快速入门"></a>SpringBoot快速入门</h1><p>本次快速启动程序将直接采用Spring官方给出的程序进行演示。</p><h2 id="新建Maven-quickstart项目"><a href="#新建Maven-quickstart项目" class="headerlink" title="新建Maven-quickstart项目"></a>新建Maven-quickstart项目</h2><p>如果要想进行SpringBoot开发，一定需要使用Maven或其他的项目管理工具完成。SpringBoot运行之后会以WEB程序为主，但是现在所建立的只是一个普通的quickstart程序；<br><img src="/2017-01-02/第一章：SpringBoot入门.htm/1553654753060.png" alt="1553654753060"></p><h2 id="如果要想开发SpringBoot程序只需要按照官方给出的要求配置一个父pom即可。"><a href="#如果要想开发SpringBoot程序只需要按照官方给出的要求配置一个父pom即可。" class="headerlink" title="如果要想开发SpringBoot程序只需要按照官方给出的要求配置一个父pom即可。"></a>如果要想开发SpringBoot程序只需要按照官方给出的要求配置一个父pom即可。</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-helloword<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-helloword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring-boot-helloword<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span><span class="comment">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写一个具体的程序："><a href="#编写一个具体的程序：" class="headerlink" title="编写一个具体的程序："></a>编写一个具体的程序：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(SampleController.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后可以直接通过Java程序运行该SpringBoot的代码。现在由于我的Eclipse使用的是<a href="https://spring.io/tools/sts/all/" target="_blank" rel="noopener">STS</a>开发插件，所以支持有SpringBoot的运行模式。</p><p><img src="/2017-01-02/第一章：SpringBoot入门.htm/1553654761974.png" alt="1553654761974"><br>如果现在是一个Maven的普通项目，最简单的做法是再maven运行的时候输入：“spring-boot:run”;<br><img src="/2017-01-02/第一章：SpringBoot入门.htm/1553654767409.png" alt="1553654767409"><br><img src="/2017-01-02/第一章：SpringBoot入门.htm/1553654773535.png" alt="1553654773535"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SpringBoot的天生缺陷：是对开发者的要求比较高，会Maven、SSM整合开发。</p><blockquote><p><a href="https://github.com/amorous/Spring-Boot/tree/master/spring-boot-helloword" target="_blank" rel="noopener">代码下载: spring-boot-helloword</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.amorou.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring中AOP方式实现多数据源切换</title>
    <link href="https://www.amorou.cn/2017-01-02/Spring%E4%B8%ADAOP%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2.html"/>
    <id>https://www.amorou.cn/2017-01-02/Spring中AOP方式实现多数据源切换.html</id>
    <published>2017-01-02T02:06:00.000Z</published>
    <updated>2019-08-11T00:53:48.666Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><p>基于<a href="http://druid.io/" target="_blank" rel="noopener">Druid</a>数据源.</p><h1 id="动态配置多数据源"><a href="#动态配置多数据源" class="headerlink" title="动态配置多数据源"></a>动态配置多数据源</h1><p>负责改变上下文数据源的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wesite.core.datasource;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_SOURCE_A = <span class="string">"datasource1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_SOURCE_B = <span class="string">"datasource2"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程本地环境</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置数据源类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String dataSource)</span> </span>&#123;</span><br><span class="line">contextHolder.set(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据源类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (contextHolder.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除数据源类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">contextHolder.remove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="建立动态数据源类"><a href="#建立动态数据源类" class="headerlink" title="建立动态数据源类"></a>建立动态数据源类</h1><p>这个类必须继承<code>AbstractRoutingDataSource</code>，且实现方法<code>determineCurrentLookupKey</code>，该方法返回一个<code>Object</code>，一般是返回字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wesite.core.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> debug = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;Object, Object&gt; dynamicTargetDataSources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object dynamicDefaultTargetDataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String dataSource = DataSourceContextHolder.getDataSource();</span><br><span class="line"><span class="keyword">if</span> (debug) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(dataSource)) &#123;</span><br><span class="line">System.out.println(<span class="string">"---当前数据源: 默认数据源---"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"---当前数据源："</span> + dataSource + <span class="string">"---"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> DataSourceContextHolder.getDataSource();  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetDataSources</span><span class="params">(Map&lt;Object, Object&gt; targetDataSources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">dynamicTargetDataSources = targetDataSources;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultTargetDataSource</span><span class="params">(Object defaultTargetDataSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);</span><br><span class="line">dynamicDefaultTargetDataSource = defaultTargetDataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDebug</span><span class="params">(<span class="keyword">boolean</span> debug)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.debug = debug;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDebug</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> debug;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">getDynamicTargetDataSources</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dynamicTargetDataSources;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDynamicTargetDataSources</span><span class="params">(Map&lt;Object, Object&gt; dynamicTargetDataSources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dynamicTargetDataSources = dynamicTargetDataSources;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getDynamicDefaultTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dynamicDefaultTargetDataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDynamicDefaultTargetDataSource</span><span class="params">(Object dynamicDefaultTargetDataSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dynamicDefaultTargetDataSource = dynamicDefaultTargetDataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编写spring的配置文件配置多个数据源"><a href="#编写spring的配置文件配置多个数据源" class="headerlink" title="编写spring的配置文件配置多个数据源"></a>编写spring的配置文件配置多个数据源</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multiDataSource"</span> <span class="attr">class</span>=<span class="string">"com.wesite.core.datasource.DynamicDataSource"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"datasource1"</span> <span class="attr">key</span>=<span class="string">"datasource1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"datasource2"</span> <span class="attr">key</span>=<span class="string">"datasource2"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"debug"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource1"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.ibm.db2.jcc.DB2Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:db2://localhost:50000/SAMPLE:currentSchema=TEST;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"D"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource2"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、 在这个配置中第一个property属性配置目标数据源<br>2、<map key-type="java.lang.String">中的key-type必须要和静态键值对照类<code>DynamicDataSource</code>中dynamicTargetDataSources的key值的类型相同<br>3、<entry value-ref="datasource1" key="datasource1"></entry>中key的值必须要和静态键值对照类中的值相同，如果有多个值，可以配置多个&lt; entry&gt;标签。第二个property属性配置默认的数据源</map></p><h1 id="动态切换是数据源"><a href="#动态切换是数据源" class="headerlink" title="动态切换是数据源"></a>动态切换是数据源</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSourceContextHolder.setDataSource(DataSourceContextHolder.DATA_SOURCE_A);</span><br></pre></td></tr></table></figure><h1 id="配置自定义注解"><a href="#配置自定义注解" class="headerlink" title="配置自定义注解"></a>配置自定义注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DynamicDataSourceAnnotation &#123;</span><br><span class="line">    <span class="comment">//dataSource 自定义注解的参数</span></span><br><span class="line">    <span class="function">String <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">default</span> DataSourceContextHolder.DATA_SOURCE_A</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置切面类"><a href="#配置切面类" class="headerlink" title="配置切面类"></a>配置切面类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wesite.model.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"@annotation(com.wesite.model.datasource.DynamicDataSourceAnnotation)"</span>) <span class="comment">//前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBefore</span><span class="params">(JoinPoint point)</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; className = point.getTarget().getClass();</span><br><span class="line">        DynamicDataSourceAnnotation dataSourceAnnotation = className.getAnnotation(DynamicDataSourceAnnotation.class);</span><br><span class="line">        <span class="keyword">if</span> (dataSourceAnnotation != <span class="keyword">null</span> ) &#123; </span><br><span class="line">            String methodName = point.getSignature().getName();</span><br><span class="line">            Class[] argClass = ((MethodSignature)point.getSignature()).getParameterTypes();</span><br><span class="line">            String dataSource = DataSourceContextHolder.DATA_SOURCE_A;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = className.getMethod(methodName, argClass);</span><br><span class="line">                <span class="keyword">if</span> (method.isAnnotationPresent(DynamicDataSourceAnnotation.class)) &#123;</span><br><span class="line">                    DynamicDataSourceAnnotation annotation = method.getAnnotation(DynamicDataSourceAnnotation.class);</span><br><span class="line">                    dataSource = annotation.dataSource();</span><br><span class="line">                    System.out.println(<span class="string">"DataSource Aop ====&gt; "</span>+dataSource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            DataSourceContextHolder.setDataSource(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span>(<span class="string">"@annotation(com.wesite.model.datasource.DynamicDataSourceAnnotation)"</span>)   <span class="comment">//后置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAfter</span><span class="params">(JoinPoint point)</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; className = point.getTarget().getClass();</span><br><span class="line">        DynamicDataSourceAnnotation dataSourceAnnotation = className.getAnnotation(DynamicDataSourceAnnotation.class);</span><br><span class="line">        <span class="keyword">if</span> (dataSourceAnnotation != <span class="keyword">null</span> ) &#123; </span><br><span class="line">            String methodName = point.getSignature().getName();</span><br><span class="line">            Class[] argClass = ((MethodSignature)point.getSignature()).getParameterTypes();</span><br><span class="line">            String dataSource = DataSourceContextHolder.DATA_SOURCE_A;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = className.getMethod(methodName, argClass);</span><br><span class="line">                <span class="keyword">if</span> (method.isAnnotationPresent(DynamicDataSourceAnnotation.class)) &#123;</span><br><span class="line">                    DynamicDataSourceAnnotation annotation = method.getAnnotation(DynamicDataSourceAnnotation.class);</span><br><span class="line">                    dataSource = annotation.dataSource();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dataSource != <span class="keyword">null</span> &amp;&amp; !DataSourceContextHolder.DATA_SOURCE_A.equals(dataSource)) DataSourceContextHolder.clearDataSource();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在切入点添加自定义的注解"><a href="#在切入点添加自定义的注解" class="headerlink" title="在切入点添加自定义的注解"></a>在切入点添加自定义的注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wesite.model.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wesite.model.datasource.DataSourceContextHolder;</span><br><span class="line"><span class="keyword">import</span> com.wesite.model.datasource.DynamicDataSourceAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DynamicDataSourceAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DynamicDataSourceAnnotation</span>(dataSource = DataSourceContextHolder.DATA_SOURCE_B)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"切换数据源serviceImple"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="当然注解扫描、和aop代理一定要在配置文件中配好"><a href="#当然注解扫描、和aop代理一定要在配置文件中配好" class="headerlink" title="当然注解扫描、和aop代理一定要在配置文件中配好"></a>当然注解扫描、和aop代理一定要在配置文件中配好</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描(bean注入) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.website.*"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AOP自动代理功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.amorou.cn/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.amorou.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hexo：SEO设置</title>
    <link href="https://www.amorou.cn/2017-01-01/Hexo%EF%BC%9ASEO%E8%AE%BE%E7%BD%AE.html"/>
    <id>https://www.amorou.cn/2017-01-01/Hexo：SEO设置.html</id>
    <published>2017-01-01T07:35:12.000Z</published>
    <updated>2019-08-11T00:53:48.630Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="一、百度收录站点"><a href="#一、百度收录站点" class="headerlink" title="一、百度收录站点"></a>一、百度收录站点</h1><blockquote><p>SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式:利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是：为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力</p></blockquote><p>登录<a href="http://zhanzhang.baidu.com/" target="_blank" rel="noopener">百度站长平台</a>，在用户中心 =&gt; 站点管理添加你的站点网址</p><p><img src="/2017-01-01/Hexo：SEO设置.htm/1553490397997.png" alt="1553490397997"></p><p>配置完站点属性后，进入最后一步：验证网站。有三种方式：文件验证、HTML标签验证、CNAME验证，文件验证和CNAME验证都比较简单，也有相对应的帮助文本，在此我选择的是HTML标签验证。</p><p><img src="/2017-01-01/Hexo：SEO设置.htm/1553490487495.png" alt="1553490487495"></p><h2 id="1、主题-config-yml文件"><a href="#1、主题-config-yml文件" class="headerlink" title="1、主题_config.yml文件"></a>1、主题_config.yml文件</h2><p>在主题的<code>_config.yml</code>文件中，设置：<code>baidu_site_verification: true</code>，如果没有该字段就手动添加。</p><h2 id="2、修改head-swig"><a href="#2、修改head-swig" class="headerlink" title="2、修改head.swig"></a>2、<code>修改head.swig</code></h2><p>在<code>themes/next/layout/_partials/head.swig</code>文件中添加下列代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个人的content值都不一致，请注意更换成你的content值</span></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.baidu_site_verification %&#125;</span><br><span class="line">  &lt;meta name=<span class="string">"baidu-site-verification"</span> content=<span class="string">"6K5YmdKWEx"</span> /&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="3、重新发布"><a href="#3、重新发布" class="headerlink" title="3、重新发布"></a>3、重新发布</h2><p>配置好后，重新发布站点，在百度站长页面完成验证。</p><h1 id="二、百度链接提交"><a href="#二、百度链接提交" class="headerlink" title="二、百度链接提交"></a>二、百度链接提交</h1><blockquote><p>链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题</p></blockquote><p>由于github屏蔽百度的爬虫，所以使用github page服务的站点的链接无法被抓取，可用<a href="https://coding.net/" target="_blank" rel="noopener">coding</a>的page服务。</p><h2 id="1、主动推送"><a href="#1、主动推送" class="headerlink" title="1、主动推送"></a>1、主动推送</h2><blockquote><p>最为快速的提交方式，建议您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</p></blockquote><ol><li><p>安装百度链接提交插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure></li><li><p>修改站点<code>_config.yml</code>文件，追加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度链接自动提交</span></span><br><span class="line">baidu_url_submit:</span><br><span class="line">  <span class="comment"># 提交最新的链接数量</span></span><br><span class="line">  count: 6</span><br><span class="line">  <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  host: http://amorous.coding.me</span><br><span class="line">  <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  token:  </span><br><span class="line">  <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br><span class="line">  path: baidu_urls.txt</span><br></pre></td></tr></table></figure></li><li><p>修改站点<code>_config.yml</code>文件，修改<code>deploye</code>配置</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: </span><br><span class="line">    github: git@github.com:amorous/amorous.github.io.git,master</span><br><span class="line">    coding: git@git.coding.net:Amorous/Amorous.git,master</span><br><span class="line">    <span class="built_in">type</span>: baidu_url_submitter</span><br></pre></td></tr></table></figure><h2 id="2、自动推送"><a href="#2、自动推送" class="headerlink" title="2、自动推送"></a>2、自动推送</h2><blockquote><p>是轻量级链接提交组件，将自动推送的JS代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现。</p></blockquote><ol><li><p>修改主题<code>_config.yml</code>文件，修改<code>baidu_push</code>配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu_push: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>新增baidu_push.swig文件</p><p>在路径themes\next\layout\_scripts\下创建baidu_push.swig 文件，文件内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.baidu_push %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3、sitemap"><a href="#3、sitemap" class="headerlink" title="3、sitemap"></a>3、sitemap</h2><blockquote><p>您可以定期将网站链接放到Sitemap中，然后将Sitemap提交给百度。百度会周期性的抓取检查您提交的Sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</p></blockquote><p>使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><ol><li><p>安装sitemap插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>修改hexo配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: https://amorous.coding.me</span><br><span class="line">root: /</span><br><span class="line">permalink: :title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件，部署后访问我们的站点<code>http://amorous.coding.me/sitemap.xml</code>。</p></li><li><p>提交到百度站长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://amorous.coding.me/sitemap.xml</span><br></pre></td></tr></table></figure><p><img src="/2017-01-01/Hexo：SEO设置.htm/1553491246297.png" alt="1553491246297"></p></li></ol><h2 id="4、手动提交"><a href="#4、手动提交" class="headerlink" title="4、手动提交"></a>4、手动提交</h2><blockquote><p>如果您不想通过程序提交，那么可以采用此种方式，手动将链接提交给百度。</p></blockquote><p>手动提交方式比较简单，按照官方提示就会使用 - -</p><p><img src="/2017-01-01/Hexo：SEO设置.htm/1553491292701.png" alt="1553491292701"></p><h1 id="三、文章页面配置"><a href="#三、文章页面配置" class="headerlink" title="三、文章页面配置"></a>三、文章页面配置</h1><h2 id="1、缩短页面url路径"><a href="#1、缩短页面url路径" class="headerlink" title="1、缩短页面url路径"></a>1、缩短页面url路径</h2><p>hexo 中文章页面url默认为：sitename/year/mounth/day/title，由于url层级过多爬虫不容易爬到文章，所以将页面url缩简为：sitename/title，在hexo 配置文件中修改permalink 配置项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://lianghuii.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h2 id="2、文章增加标识字段"><a href="#2、文章增加标识字段" class="headerlink" title="2、文章增加标识字段"></a>2、文章增加标识字段</h2><p>为文章增加keywords、description等标识字段，在hexo 根目录中scaffolds文件中的文章模版文件中增加。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.amorou.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.amorou.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo：性能优化</title>
    <link href="https://www.amorou.cn/2017-01-01/Hexo%EF%BC%9A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"/>
    <id>https://www.amorou.cn/2017-01-01/Hexo：性能优化.html</id>
    <published>2017-01-01T06:43:27.000Z</published>
    <updated>2019-08-11T00:53:48.634Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="Hexo-性能优化"><a href="#Hexo-性能优化" class="headerlink" title="Hexo 性能优化"></a>Hexo 性能优化</h1><h2 id="一、主题源加载优化"><a href="#一、主题源加载优化" class="headerlink" title="一、主题源加载优化"></a>一、主题源加载优化</h2><p>把在NexT主题的<code>_config.yml</code>里面的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span></span><br><span class="line"><span class="attr">host:</span></span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">//fonts.lug.ustc.edu.cn</span></span><br></pre></td></tr></table></figure><p>因为<code>fonts.lug.ustc.edu.cn</code>是中科大的源，相比之前能快一下。</p><h2 id="二、压缩静态资源"><a href="#二、压缩静态资源" class="headerlink" title="二、压缩静态资源"></a>二、压缩静态资源</h2><p><a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener">hexo-neat插件github地址</a></p><p>常规的做法是使用<code>gulp</code>来进行压缩，每次压缩时还需要输入额外的命令，比较繁琐</p><p>利用<code>gulp</code>和它的一些插件来压缩js、css、img等文件。</p><h3 id="1、安装hexo-neat插件"><a href="#1、安装hexo-neat插件" class="headerlink" title="1、安装hexo-neat插件"></a>1、安装hexo-neat插件</h3><p>博客目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p>如果报错，选择克隆插件，然后手动复制到插件目录里面<code>hexo目录\node_modules\</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rozbo/hexo-neat</span><br></pre></td></tr></table></figure><h3 id="2、站点文件配置"><a href="#2、站点文件配置" class="headerlink" title="2、站点文件配置"></a>2、站点文件配置</h3><p>配置信息添加到博客目录文件夹下的<code>hexo目录\_config.yml</code>的末尾，可以安装自己的需求去自定义配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="comment"># 是否启用，默认true</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 打印日志，默认true</span></span><br><span class="line"><span class="attr">  logger:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 排除文件，注意：这里参数太多，看'https://github.com/kangax/html-minifier'</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  logger:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.css'</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Mangle file names</span></span><br><span class="line"><span class="attr">  mangle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  logger:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 输出配置</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line">  <span class="comment"># 编译配置</span></span><br><span class="line"><span class="attr">  compress:</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/index.js'</span></span><br></pre></td></tr></table></figure><h3 id="3、报错及相应解决"><a href="#3、报错及相应解决" class="headerlink" title="3、报错及相应解决"></a>3、报错及相应解决</h3><h4 id="a-跳过压缩文件的正确配置方式"><a href="#a-跳过压缩文件的正确配置方式" class="headerlink" title="a) 跳过压缩文件的正确配置方式"></a>a) 跳过压缩文件的正确配置方式</h4><p>如果按照官方插件的文档说明来配置exclude，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">neat_css:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.css'</span></span><br></pre></td></tr></table></figure><h4 id="b-压缩html时不要跳过-md文件"><a href="#b-压缩html时不要跳过-md文件" class="headerlink" title="b) 压缩html时不要跳过.md文件"></a>b) 压缩html时不要跳过.md文件</h4><p>.md文件就是我们写文章时的markdown文件，如果跳过压缩.md文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p><h4 id="c-压缩html时不要跳过-swig文件"><a href="#c-压缩html时不要跳过-swig文件" class="headerlink" title="c) 压缩html时不要跳过.swig文件"></a>c) 压缩html时不要跳过.swig文件</h4><p>.swig文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p><h4 id="d-点击的桃心效果消失"><a href="#d-点击的桃心效果消失" class="headerlink" title="d) 点击的桃心效果消失"></a>d) 点击的桃心效果消失</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line">neat_js:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">'**/*.min.js'</span></span><br><span class="line">    - <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line">    - <span class="string">'**/index.js'</span>  </span><br><span class="line">    - <span class="string">'**/love.js'</span></span><br></pre></td></tr></table></figure><p>gitalk js文件报错<br>在上面的代码底部加入如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="string">'**/comments.gitalk.js'</span></span><br></pre></td></tr></table></figure><h4 id="e-jquery-pjax-min-js报错"><a href="#e-jquery-pjax-min-js报错" class="headerlink" title="e) jquery pjax min js报错"></a>e) jquery pjax min js报错</h4><p>我这里的 jquery pjax min js是指的加入pjax前需要以来的两个cdn文件，一个是jq，一个是它，我将它下载到了本地，不要在意这些细节~<br>同样加入如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="string">'**/jquery_pjax_min_js.js'</span></span><br></pre></td></tr></table></figure><h3 id="4、重新生成"><a href="#4、重新生成" class="headerlink" title="4、重新生成"></a>4、重新生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>清除缓存，重新生成静态页面，启动服务访问可疑发现我们的html页面，css样式文件和js脚本文件都被压缩了，问价大小相比之前小了不少。</p><h2 id="三、图片懒加载"><a href="#三、图片懒加载" class="headerlink" title="三、图片懒加载"></a>三、图片懒加载</h2><p>懒加载，在需要的时候才加载图片，而不是一次性加载完整个页面的图片，使用<code>lazyload</code>插件，适用于本地图片很多的情况</p><h3 id="1、安装lazyload插件"><a href="#1、安装lazyload插件" class="headerlink" title="1、安装lazyload插件"></a>1、安装lazyload插件</h3><p>在<code>Hexo</code>博客目录下，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload --save</span><br></pre></td></tr></table></figure><h3 id="2、站点文件配置-1"><a href="#2、站点文件配置-1" class="headerlink" title="2、站点文件配置"></a>2、站点文件配置</h3><p>然后在你的 <code>Hexo</code>目录的配置文件 <code>_config.yml</code> 中添加配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># className: #可选 e.g. .J-lazyload-img</span></span><br><span class="line">  <span class="comment"># loadingImg: #可选 eg. ./images/loading.png</span></span><br></pre></td></tr></table></figure><p>参数：<br><code>loadingImg</code> - 图片未加载时的代替图</p><p>默认路径: <code>/js/lazyload-plugin/loading.svg</code><br>如果需要自定义，添填入 <code>loading</code> 图片地址，如果是本地图片，不要忘记把图片添加到你的主题目录下。</p><p><code>className</code> - 需要延迟加载的图片 <code>class</code>选择器</p><p>默认会延迟加载文章中的所有图片。<br>如果不为空，请填入需要延迟加载的图片<code>class</code> 选择器</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.amorou.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.amorou.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo：文章图片问题</title>
    <link href="https://www.amorou.cn/2017-01-01/Hexo%EF%BC%9A%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98.html"/>
    <id>https://www.amorou.cn/2017-01-01/Hexo：文章图片问题.html</id>
    <published>2017-01-01T04:43:27.000Z</published>
    <updated>2019-08-11T00:53:48.635Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="Hexo-文章图片问题"><a href="#Hexo-文章图片问题" class="headerlink" title="Hexo 文章图片问题"></a>Hexo 文章图片问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用Hexo生成Markdown文档为html后，部署访问刚刚发布的文章，原本文章中引用的图片全部404。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><p>首先确认<code>_config.yml</code> 中有 <code>post_asset_folder:true</code>。</p><p>Hexo 提供了一种更方便管理 Asset 的设定：<code>post_asset_folder</code>，当您设置<code>post_asset_folder</code>为<code>true</code>参数后，在建立文件时，<code>Hexo</code>会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。</p></li><li><p>安装hexo-asset-image插件</p><p>在hexo的目录下执行<code>npm install hexo-asset-image --save</code>（需要等待一段时间）。</p></li><li><p>hexo new [layout]</p><title>新建文章</title><p></p></li></ol><p>完成安装后用<code>hexo</code>命令新建文章的时候会发现<code>_posts</code>目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">├── 1.jpg</span><br><span class="line">├── 2.jpg</span><br><span class="line">└── 3.jpg</span><br><span class="line">test.md</span><br></pre></td></tr></table></figure><p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](本地图片测试/logo.jpg)</code> 就可以插入图片。其中<code>[]</code>里面不写文字则没有图片标题。<br>生成的结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public/2017/3/24/</span><br><span class="line">test</span><br><span class="line">├── 1.jpg</span><br><span class="line">├── 2.jpg</span><br><span class="line">└── 3.jpg</span><br><span class="line">test.html</span><br></pre></td></tr></table></figure><ol start="4"><li><p>bug解决</p><p>正常情况来讲生成的test.html中的src引用应该没有问题才对，当时现在里面的url全部都不对，修改<code>node_modules/hexo-asset-image/index.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">    <span class="keyword">if</span> (config.post_asset_folder) &#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">        <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">        <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">        link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">                ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">                xmlMode: <span class="literal">false</span>,</span><br><span class="line">                lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">                decodeEntities: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>)) &#123;</span><br><span class="line">                    <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">                    <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp; !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">                        <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">                        <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">                        <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">if</span> (srcArray.length &gt; <span class="number">1</span>) srcArray.shift();</span><br><span class="line">                        src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">$(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line"><span class="built_in">console</span>.info &amp;&amp; <span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span> + config.root + link + src);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'src-------------'</span> + src);</span><br><span class="line">                    <span class="built_in">console</span>.info &amp;&amp; <span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">                    <span class="built_in">console</span>.info &amp;&amp; <span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            data[key] = $.html();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 11 2019 10:29:43 GMT+0800 (GMT+08:00) --&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.amorou.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.amorou.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
